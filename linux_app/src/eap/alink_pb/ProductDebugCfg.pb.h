// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProductDebugCfg.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ProductDebugCfg_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ProductDebugCfg_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ProductDebugCfg_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ProductDebugCfg_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ProductDebugCfg_2eproto;
class PbAlgCacheAttr;
struct PbAlgCacheAttrDefaultTypeInternal;
extern PbAlgCacheAttrDefaultTypeInternal _PbAlgCacheAttr_default_instance_;
class PbAlgExceptAttr;
struct PbAlgExceptAttrDefaultTypeInternal;
extern PbAlgExceptAttrDefaultTypeInternal _PbAlgExceptAttr_default_instance_;
class PbSpectrogramAttr;
struct PbSpectrogramAttrDefaultTypeInternal;
extern PbSpectrogramAttrDefaultTypeInternal _PbSpectrogramAttr_default_instance_;
class ProductDebugCfg;
struct ProductDebugCfgDefaultTypeInternal;
extern ProductDebugCfgDefaultTypeInternal _ProductDebugCfg_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::PbAlgCacheAttr* Arena::CreateMaybeMessage<::PbAlgCacheAttr>(Arena*);
template<> ::PbAlgExceptAttr* Arena::CreateMaybeMessage<::PbAlgExceptAttr>(Arena*);
template<> ::PbSpectrogramAttr* Arena::CreateMaybeMessage<::PbSpectrogramAttr>(Arena*);
template<> ::ProductDebugCfg* Arena::CreateMaybeMessage<::ProductDebugCfg>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class PbSpectrogramAttr final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PbSpectrogramAttr) */ {
 public:
  inline PbSpectrogramAttr() : PbSpectrogramAttr(nullptr) {}
  ~PbSpectrogramAttr() override;
  explicit constexpr PbSpectrogramAttr(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PbSpectrogramAttr(const PbSpectrogramAttr& from);
  PbSpectrogramAttr(PbSpectrogramAttr&& from) noexcept
    : PbSpectrogramAttr() {
    *this = ::std::move(from);
  }

  inline PbSpectrogramAttr& operator=(const PbSpectrogramAttr& from) {
    CopyFrom(from);
    return *this;
  }
  inline PbSpectrogramAttr& operator=(PbSpectrogramAttr&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PbSpectrogramAttr& default_instance() {
    return *internal_default_instance();
  }
  static inline const PbSpectrogramAttr* internal_default_instance() {
    return reinterpret_cast<const PbSpectrogramAttr*>(
               &_PbSpectrogramAttr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PbSpectrogramAttr& a, PbSpectrogramAttr& b) {
    a.Swap(&b);
  }
  inline void Swap(PbSpectrogramAttr* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PbSpectrogramAttr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PbSpectrogramAttr* New() const final {
    return new PbSpectrogramAttr();
  }

  PbSpectrogramAttr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PbSpectrogramAttr>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PbSpectrogramAttr& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PbSpectrogramAttr& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PbSpectrogramAttr* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PbSpectrogramAttr";
  }
  protected:
  explicit PbSpectrogramAttr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilePathFieldNumber = 1,
    kFilePrefixFieldNumber = 2,
    kFileIndexFieldNumber = 3,
    kFileMaxNumFieldNumber = 4,
  };
  // string file_path = 1;
  void clear_file_path();
  const std::string& file_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_path();
  PROTOBUF_MUST_USE_RESULT std::string* release_file_path();
  void set_allocated_file_path(std::string* file_path);
  private:
  const std::string& _internal_file_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_path(const std::string& value);
  std::string* _internal_mutable_file_path();
  public:

  // string file_prefix = 2;
  void clear_file_prefix();
  const std::string& file_prefix() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_prefix(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_prefix();
  PROTOBUF_MUST_USE_RESULT std::string* release_file_prefix();
  void set_allocated_file_prefix(std::string* file_prefix);
  private:
  const std::string& _internal_file_prefix() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_prefix(const std::string& value);
  std::string* _internal_mutable_file_prefix();
  public:

  // string file_index = 3;
  void clear_file_index();
  const std::string& file_index() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_index(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_index();
  PROTOBUF_MUST_USE_RESULT std::string* release_file_index();
  void set_allocated_file_index(std::string* file_index);
  private:
  const std::string& _internal_file_index() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_index(const std::string& value);
  std::string* _internal_mutable_file_index();
  public:

  // int32 file_max_num = 4;
  void clear_file_max_num();
  ::PROTOBUF_NAMESPACE_ID::int32 file_max_num() const;
  void set_file_max_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_file_max_num() const;
  void _internal_set_file_max_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PbSpectrogramAttr)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_prefix_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_index_;
  ::PROTOBUF_NAMESPACE_ID::int32 file_max_num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ProductDebugCfg_2eproto;
};
// -------------------------------------------------------------------

class PbAlgCacheAttr final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PbAlgCacheAttr) */ {
 public:
  inline PbAlgCacheAttr() : PbAlgCacheAttr(nullptr) {}
  ~PbAlgCacheAttr() override;
  explicit constexpr PbAlgCacheAttr(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PbAlgCacheAttr(const PbAlgCacheAttr& from);
  PbAlgCacheAttr(PbAlgCacheAttr&& from) noexcept
    : PbAlgCacheAttr() {
    *this = ::std::move(from);
  }

  inline PbAlgCacheAttr& operator=(const PbAlgCacheAttr& from) {
    CopyFrom(from);
    return *this;
  }
  inline PbAlgCacheAttr& operator=(PbAlgCacheAttr&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PbAlgCacheAttr& default_instance() {
    return *internal_default_instance();
  }
  static inline const PbAlgCacheAttr* internal_default_instance() {
    return reinterpret_cast<const PbAlgCacheAttr*>(
               &_PbAlgCacheAttr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PbAlgCacheAttr& a, PbAlgCacheAttr& b) {
    a.Swap(&b);
  }
  inline void Swap(PbAlgCacheAttr* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PbAlgCacheAttr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PbAlgCacheAttr* New() const final {
    return new PbAlgCacheAttr();
  }

  PbAlgCacheAttr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PbAlgCacheAttr>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PbAlgCacheAttr& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PbAlgCacheAttr& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PbAlgCacheAttr* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PbAlgCacheAttr";
  }
  protected:
  explicit PbAlgCacheAttr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilePathFieldNumber = 1,
    kFilePrefixFieldNumber = 2,
    kFileIndexFieldNumber = 3,
    kFileMaxNumFieldNumber = 4,
    kFrameMaxNumFieldNumber = 5,
  };
  // string file_path = 1;
  void clear_file_path();
  const std::string& file_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_path();
  PROTOBUF_MUST_USE_RESULT std::string* release_file_path();
  void set_allocated_file_path(std::string* file_path);
  private:
  const std::string& _internal_file_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_path(const std::string& value);
  std::string* _internal_mutable_file_path();
  public:

  // string file_prefix = 2;
  void clear_file_prefix();
  const std::string& file_prefix() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_prefix(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_prefix();
  PROTOBUF_MUST_USE_RESULT std::string* release_file_prefix();
  void set_allocated_file_prefix(std::string* file_prefix);
  private:
  const std::string& _internal_file_prefix() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_prefix(const std::string& value);
  std::string* _internal_mutable_file_prefix();
  public:

  // string file_index = 3;
  void clear_file_index();
  const std::string& file_index() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_index(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_index();
  PROTOBUF_MUST_USE_RESULT std::string* release_file_index();
  void set_allocated_file_index(std::string* file_index);
  private:
  const std::string& _internal_file_index() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_index(const std::string& value);
  std::string* _internal_mutable_file_index();
  public:

  // int32 file_max_num = 4;
  void clear_file_max_num();
  ::PROTOBUF_NAMESPACE_ID::int32 file_max_num() const;
  void set_file_max_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_file_max_num() const;
  void _internal_set_file_max_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 frame_max_num = 5;
  void clear_frame_max_num();
  ::PROTOBUF_NAMESPACE_ID::int32 frame_max_num() const;
  void set_frame_max_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_frame_max_num() const;
  void _internal_set_frame_max_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PbAlgCacheAttr)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_prefix_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_index_;
  ::PROTOBUF_NAMESPACE_ID::int32 file_max_num_;
  ::PROTOBUF_NAMESPACE_ID::int32 frame_max_num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ProductDebugCfg_2eproto;
};
// -------------------------------------------------------------------

class PbAlgExceptAttr final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PbAlgExceptAttr) */ {
 public:
  inline PbAlgExceptAttr() : PbAlgExceptAttr(nullptr) {}
  ~PbAlgExceptAttr() override;
  explicit constexpr PbAlgExceptAttr(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PbAlgExceptAttr(const PbAlgExceptAttr& from);
  PbAlgExceptAttr(PbAlgExceptAttr&& from) noexcept
    : PbAlgExceptAttr() {
    *this = ::std::move(from);
  }

  inline PbAlgExceptAttr& operator=(const PbAlgExceptAttr& from) {
    CopyFrom(from);
    return *this;
  }
  inline PbAlgExceptAttr& operator=(PbAlgExceptAttr&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PbAlgExceptAttr& default_instance() {
    return *internal_default_instance();
  }
  static inline const PbAlgExceptAttr* internal_default_instance() {
    return reinterpret_cast<const PbAlgExceptAttr*>(
               &_PbAlgExceptAttr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PbAlgExceptAttr& a, PbAlgExceptAttr& b) {
    a.Swap(&b);
  }
  inline void Swap(PbAlgExceptAttr* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PbAlgExceptAttr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PbAlgExceptAttr* New() const final {
    return new PbAlgExceptAttr();
  }

  PbAlgExceptAttr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PbAlgExceptAttr>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PbAlgExceptAttr& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PbAlgExceptAttr& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PbAlgExceptAttr* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PbAlgExceptAttr";
  }
  protected:
  explicit PbAlgExceptAttr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilePathFieldNumber = 1,
    kFilePrefixFieldNumber = 2,
    kFileIndexFieldNumber = 3,
    kFileMaxNumFieldNumber = 4,
  };
  // string file_path = 1;
  void clear_file_path();
  const std::string& file_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_path();
  PROTOBUF_MUST_USE_RESULT std::string* release_file_path();
  void set_allocated_file_path(std::string* file_path);
  private:
  const std::string& _internal_file_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_path(const std::string& value);
  std::string* _internal_mutable_file_path();
  public:

  // string file_prefix = 2;
  void clear_file_prefix();
  const std::string& file_prefix() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_prefix(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_prefix();
  PROTOBUF_MUST_USE_RESULT std::string* release_file_prefix();
  void set_allocated_file_prefix(std::string* file_prefix);
  private:
  const std::string& _internal_file_prefix() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_prefix(const std::string& value);
  std::string* _internal_mutable_file_prefix();
  public:

  // string file_index = 3;
  void clear_file_index();
  const std::string& file_index() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_index(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_index();
  PROTOBUF_MUST_USE_RESULT std::string* release_file_index();
  void set_allocated_file_index(std::string* file_index);
  private:
  const std::string& _internal_file_index() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_index(const std::string& value);
  std::string* _internal_mutable_file_index();
  public:

  // int32 file_max_num = 4;
  void clear_file_max_num();
  ::PROTOBUF_NAMESPACE_ID::int32 file_max_num() const;
  void set_file_max_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_file_max_num() const;
  void _internal_set_file_max_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PbAlgExceptAttr)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_prefix_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_index_;
  ::PROTOBUF_NAMESPACE_ID::int32 file_max_num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ProductDebugCfg_2eproto;
};
// -------------------------------------------------------------------

class ProductDebugCfg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProductDebugCfg) */ {
 public:
  inline ProductDebugCfg() : ProductDebugCfg(nullptr) {}
  ~ProductDebugCfg() override;
  explicit constexpr ProductDebugCfg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProductDebugCfg(const ProductDebugCfg& from);
  ProductDebugCfg(ProductDebugCfg&& from) noexcept
    : ProductDebugCfg() {
    *this = ::std::move(from);
  }

  inline ProductDebugCfg& operator=(const ProductDebugCfg& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProductDebugCfg& operator=(ProductDebugCfg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProductDebugCfg& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProductDebugCfg* internal_default_instance() {
    return reinterpret_cast<const ProductDebugCfg*>(
               &_ProductDebugCfg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ProductDebugCfg& a, ProductDebugCfg& b) {
    a.Swap(&b);
  }
  inline void Swap(ProductDebugCfg* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProductDebugCfg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProductDebugCfg* New() const final {
    return new ProductDebugCfg();
  }

  ProductDebugCfg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProductDebugCfg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProductDebugCfg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ProductDebugCfg& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProductDebugCfg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProductDebugCfg";
  }
  protected:
  explicit ProductDebugCfg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpectrogramAttrFieldNumber = 22,
    kAlgCacheAttrFieldNumber = 24,
    kAlgExceptAttrFieldNumber = 26,
    kFlagDebugAppInitFieldNumber = 1,
    kFlagDebugNoRunAppStartFieldNumber = 2,
    kFlagDebugNoRunAppInitFieldNumber = 3,
    kFlagDebugNoRunLinuxAppFieldNumber = 4,
    kFlagDebugWifiConnectFieldNumber = 5,
    kFlagDebugRunRidCaptureFieldNumber = 6,
    kFlagDebugRunRidCapturePrintFieldNumber = 7,
    kFlagDebugNoReportAlinkInfoFieldNumber = 8,
    kFlagDebugTcpClientIpFieldNumber = 9,
    kFlagDebugDroneidCheckCrcFieldNumber = 10,
    kFlagDebugDroneidFieldNumber = 11,
    kFlagDebugNoFftDmaFieldNumber = 12,
    kFlagDebugDisableBuzzMotorFieldNumber = 13,
    kIsSupportSpectrogramFieldNumber = 21,
    kIsSupportAlgCacheFieldNumber = 23,
    kIsSupportAlgExceptFieldNumber = 25,
  };
  // .PbSpectrogramAttr spectrogramAttr = 22;
  bool has_spectrogramattr() const;
  private:
  bool _internal_has_spectrogramattr() const;
  public:
  void clear_spectrogramattr();
  const ::PbSpectrogramAttr& spectrogramattr() const;
  PROTOBUF_MUST_USE_RESULT ::PbSpectrogramAttr* release_spectrogramattr();
  ::PbSpectrogramAttr* mutable_spectrogramattr();
  void set_allocated_spectrogramattr(::PbSpectrogramAttr* spectrogramattr);
  private:
  const ::PbSpectrogramAttr& _internal_spectrogramattr() const;
  ::PbSpectrogramAttr* _internal_mutable_spectrogramattr();
  public:
  void unsafe_arena_set_allocated_spectrogramattr(
      ::PbSpectrogramAttr* spectrogramattr);
  ::PbSpectrogramAttr* unsafe_arena_release_spectrogramattr();

  // .PbAlgCacheAttr algCacheAttr = 24;
  bool has_algcacheattr() const;
  private:
  bool _internal_has_algcacheattr() const;
  public:
  void clear_algcacheattr();
  const ::PbAlgCacheAttr& algcacheattr() const;
  PROTOBUF_MUST_USE_RESULT ::PbAlgCacheAttr* release_algcacheattr();
  ::PbAlgCacheAttr* mutable_algcacheattr();
  void set_allocated_algcacheattr(::PbAlgCacheAttr* algcacheattr);
  private:
  const ::PbAlgCacheAttr& _internal_algcacheattr() const;
  ::PbAlgCacheAttr* _internal_mutable_algcacheattr();
  public:
  void unsafe_arena_set_allocated_algcacheattr(
      ::PbAlgCacheAttr* algcacheattr);
  ::PbAlgCacheAttr* unsafe_arena_release_algcacheattr();

  // .PbAlgExceptAttr algExceptAttr = 26;
  bool has_algexceptattr() const;
  private:
  bool _internal_has_algexceptattr() const;
  public:
  void clear_algexceptattr();
  const ::PbAlgExceptAttr& algexceptattr() const;
  PROTOBUF_MUST_USE_RESULT ::PbAlgExceptAttr* release_algexceptattr();
  ::PbAlgExceptAttr* mutable_algexceptattr();
  void set_allocated_algexceptattr(::PbAlgExceptAttr* algexceptattr);
  private:
  const ::PbAlgExceptAttr& _internal_algexceptattr() const;
  ::PbAlgExceptAttr* _internal_mutable_algexceptattr();
  public:
  void unsafe_arena_set_allocated_algexceptattr(
      ::PbAlgExceptAttr* algexceptattr);
  ::PbAlgExceptAttr* unsafe_arena_release_algexceptattr();

  // bool flag_debug_app_init = 1;
  void clear_flag_debug_app_init();
  bool flag_debug_app_init() const;
  void set_flag_debug_app_init(bool value);
  private:
  bool _internal_flag_debug_app_init() const;
  void _internal_set_flag_debug_app_init(bool value);
  public:

  // bool flag_debug_no_run_app_start = 2;
  void clear_flag_debug_no_run_app_start();
  bool flag_debug_no_run_app_start() const;
  void set_flag_debug_no_run_app_start(bool value);
  private:
  bool _internal_flag_debug_no_run_app_start() const;
  void _internal_set_flag_debug_no_run_app_start(bool value);
  public:

  // bool flag_debug_no_run_app_init = 3;
  void clear_flag_debug_no_run_app_init();
  bool flag_debug_no_run_app_init() const;
  void set_flag_debug_no_run_app_init(bool value);
  private:
  bool _internal_flag_debug_no_run_app_init() const;
  void _internal_set_flag_debug_no_run_app_init(bool value);
  public:

  // bool flag_debug_no_run_linux_app = 4;
  void clear_flag_debug_no_run_linux_app();
  bool flag_debug_no_run_linux_app() const;
  void set_flag_debug_no_run_linux_app(bool value);
  private:
  bool _internal_flag_debug_no_run_linux_app() const;
  void _internal_set_flag_debug_no_run_linux_app(bool value);
  public:

  // bool flag_debug_wifi_connect = 5;
  void clear_flag_debug_wifi_connect();
  bool flag_debug_wifi_connect() const;
  void set_flag_debug_wifi_connect(bool value);
  private:
  bool _internal_flag_debug_wifi_connect() const;
  void _internal_set_flag_debug_wifi_connect(bool value);
  public:

  // bool flag_debug_run_rid_capture = 6;
  void clear_flag_debug_run_rid_capture();
  bool flag_debug_run_rid_capture() const;
  void set_flag_debug_run_rid_capture(bool value);
  private:
  bool _internal_flag_debug_run_rid_capture() const;
  void _internal_set_flag_debug_run_rid_capture(bool value);
  public:

  // bool flag_debug_run_rid_capture_print = 7;
  void clear_flag_debug_run_rid_capture_print();
  bool flag_debug_run_rid_capture_print() const;
  void set_flag_debug_run_rid_capture_print(bool value);
  private:
  bool _internal_flag_debug_run_rid_capture_print() const;
  void _internal_set_flag_debug_run_rid_capture_print(bool value);
  public:

  // bool flag_debug_no_report_alink_info = 8;
  void clear_flag_debug_no_report_alink_info();
  bool flag_debug_no_report_alink_info() const;
  void set_flag_debug_no_report_alink_info(bool value);
  private:
  bool _internal_flag_debug_no_report_alink_info() const;
  void _internal_set_flag_debug_no_report_alink_info(bool value);
  public:

  // bool flag_debug_tcp_client_ip = 9;
  void clear_flag_debug_tcp_client_ip();
  bool flag_debug_tcp_client_ip() const;
  void set_flag_debug_tcp_client_ip(bool value);
  private:
  bool _internal_flag_debug_tcp_client_ip() const;
  void _internal_set_flag_debug_tcp_client_ip(bool value);
  public:

  // bool flag_debug_droneid_check_crc = 10;
  void clear_flag_debug_droneid_check_crc();
  bool flag_debug_droneid_check_crc() const;
  void set_flag_debug_droneid_check_crc(bool value);
  private:
  bool _internal_flag_debug_droneid_check_crc() const;
  void _internal_set_flag_debug_droneid_check_crc(bool value);
  public:

  // bool flag_debug_droneid = 11;
  void clear_flag_debug_droneid();
  bool flag_debug_droneid() const;
  void set_flag_debug_droneid(bool value);
  private:
  bool _internal_flag_debug_droneid() const;
  void _internal_set_flag_debug_droneid(bool value);
  public:

  // bool flag_debug_no_fft_dma = 12;
  void clear_flag_debug_no_fft_dma();
  bool flag_debug_no_fft_dma() const;
  void set_flag_debug_no_fft_dma(bool value);
  private:
  bool _internal_flag_debug_no_fft_dma() const;
  void _internal_set_flag_debug_no_fft_dma(bool value);
  public:

  // bool flag_debug_disable_buzz_motor = 13;
  void clear_flag_debug_disable_buzz_motor();
  bool flag_debug_disable_buzz_motor() const;
  void set_flag_debug_disable_buzz_motor(bool value);
  private:
  bool _internal_flag_debug_disable_buzz_motor() const;
  void _internal_set_flag_debug_disable_buzz_motor(bool value);
  public:

  // bool isSupportSpectrogram = 21;
  void clear_issupportspectrogram();
  bool issupportspectrogram() const;
  void set_issupportspectrogram(bool value);
  private:
  bool _internal_issupportspectrogram() const;
  void _internal_set_issupportspectrogram(bool value);
  public:

  // bool isSupportAlgCache = 23;
  void clear_issupportalgcache();
  bool issupportalgcache() const;
  void set_issupportalgcache(bool value);
  private:
  bool _internal_issupportalgcache() const;
  void _internal_set_issupportalgcache(bool value);
  public:

  // bool isSupportAlgExcept = 25;
  void clear_issupportalgexcept();
  bool issupportalgexcept() const;
  void set_issupportalgexcept(bool value);
  private:
  bool _internal_issupportalgexcept() const;
  void _internal_set_issupportalgexcept(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ProductDebugCfg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PbSpectrogramAttr* spectrogramattr_;
  ::PbAlgCacheAttr* algcacheattr_;
  ::PbAlgExceptAttr* algexceptattr_;
  bool flag_debug_app_init_;
  bool flag_debug_no_run_app_start_;
  bool flag_debug_no_run_app_init_;
  bool flag_debug_no_run_linux_app_;
  bool flag_debug_wifi_connect_;
  bool flag_debug_run_rid_capture_;
  bool flag_debug_run_rid_capture_print_;
  bool flag_debug_no_report_alink_info_;
  bool flag_debug_tcp_client_ip_;
  bool flag_debug_droneid_check_crc_;
  bool flag_debug_droneid_;
  bool flag_debug_no_fft_dma_;
  bool flag_debug_disable_buzz_motor_;
  bool issupportspectrogram_;
  bool issupportalgcache_;
  bool issupportalgexcept_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ProductDebugCfg_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PbSpectrogramAttr

// string file_path = 1;
inline void PbSpectrogramAttr::clear_file_path() {
  file_path_.ClearToEmpty();
}
inline const std::string& PbSpectrogramAttr::file_path() const {
  // @@protoc_insertion_point(field_get:PbSpectrogramAttr.file_path)
  return _internal_file_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PbSpectrogramAttr::set_file_path(ArgT0&& arg0, ArgT... args) {
 
 file_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PbSpectrogramAttr.file_path)
}
inline std::string* PbSpectrogramAttr::mutable_file_path() {
  std::string* _s = _internal_mutable_file_path();
  // @@protoc_insertion_point(field_mutable:PbSpectrogramAttr.file_path)
  return _s;
}
inline const std::string& PbSpectrogramAttr::_internal_file_path() const {
  return file_path_.Get();
}
inline void PbSpectrogramAttr::_internal_set_file_path(const std::string& value) {
  
  file_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PbSpectrogramAttr::_internal_mutable_file_path() {
  
  return file_path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PbSpectrogramAttr::release_file_path() {
  // @@protoc_insertion_point(field_release:PbSpectrogramAttr.file_path)
  return file_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PbSpectrogramAttr::set_allocated_file_path(std::string* file_path) {
  if (file_path != nullptr) {
    
  } else {
    
  }
  file_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_path,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:PbSpectrogramAttr.file_path)
}

// string file_prefix = 2;
inline void PbSpectrogramAttr::clear_file_prefix() {
  file_prefix_.ClearToEmpty();
}
inline const std::string& PbSpectrogramAttr::file_prefix() const {
  // @@protoc_insertion_point(field_get:PbSpectrogramAttr.file_prefix)
  return _internal_file_prefix();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PbSpectrogramAttr::set_file_prefix(ArgT0&& arg0, ArgT... args) {
 
 file_prefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PbSpectrogramAttr.file_prefix)
}
inline std::string* PbSpectrogramAttr::mutable_file_prefix() {
  std::string* _s = _internal_mutable_file_prefix();
  // @@protoc_insertion_point(field_mutable:PbSpectrogramAttr.file_prefix)
  return _s;
}
inline const std::string& PbSpectrogramAttr::_internal_file_prefix() const {
  return file_prefix_.Get();
}
inline void PbSpectrogramAttr::_internal_set_file_prefix(const std::string& value) {
  
  file_prefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PbSpectrogramAttr::_internal_mutable_file_prefix() {
  
  return file_prefix_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PbSpectrogramAttr::release_file_prefix() {
  // @@protoc_insertion_point(field_release:PbSpectrogramAttr.file_prefix)
  return file_prefix_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PbSpectrogramAttr::set_allocated_file_prefix(std::string* file_prefix) {
  if (file_prefix != nullptr) {
    
  } else {
    
  }
  file_prefix_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_prefix,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:PbSpectrogramAttr.file_prefix)
}

// string file_index = 3;
inline void PbSpectrogramAttr::clear_file_index() {
  file_index_.ClearToEmpty();
}
inline const std::string& PbSpectrogramAttr::file_index() const {
  // @@protoc_insertion_point(field_get:PbSpectrogramAttr.file_index)
  return _internal_file_index();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PbSpectrogramAttr::set_file_index(ArgT0&& arg0, ArgT... args) {
 
 file_index_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PbSpectrogramAttr.file_index)
}
inline std::string* PbSpectrogramAttr::mutable_file_index() {
  std::string* _s = _internal_mutable_file_index();
  // @@protoc_insertion_point(field_mutable:PbSpectrogramAttr.file_index)
  return _s;
}
inline const std::string& PbSpectrogramAttr::_internal_file_index() const {
  return file_index_.Get();
}
inline void PbSpectrogramAttr::_internal_set_file_index(const std::string& value) {
  
  file_index_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PbSpectrogramAttr::_internal_mutable_file_index() {
  
  return file_index_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PbSpectrogramAttr::release_file_index() {
  // @@protoc_insertion_point(field_release:PbSpectrogramAttr.file_index)
  return file_index_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PbSpectrogramAttr::set_allocated_file_index(std::string* file_index) {
  if (file_index != nullptr) {
    
  } else {
    
  }
  file_index_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_index,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:PbSpectrogramAttr.file_index)
}

// int32 file_max_num = 4;
inline void PbSpectrogramAttr::clear_file_max_num() {
  file_max_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PbSpectrogramAttr::_internal_file_max_num() const {
  return file_max_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PbSpectrogramAttr::file_max_num() const {
  // @@protoc_insertion_point(field_get:PbSpectrogramAttr.file_max_num)
  return _internal_file_max_num();
}
inline void PbSpectrogramAttr::_internal_set_file_max_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  file_max_num_ = value;
}
inline void PbSpectrogramAttr::set_file_max_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_file_max_num(value);
  // @@protoc_insertion_point(field_set:PbSpectrogramAttr.file_max_num)
}

// -------------------------------------------------------------------

// PbAlgCacheAttr

// string file_path = 1;
inline void PbAlgCacheAttr::clear_file_path() {
  file_path_.ClearToEmpty();
}
inline const std::string& PbAlgCacheAttr::file_path() const {
  // @@protoc_insertion_point(field_get:PbAlgCacheAttr.file_path)
  return _internal_file_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PbAlgCacheAttr::set_file_path(ArgT0&& arg0, ArgT... args) {
 
 file_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PbAlgCacheAttr.file_path)
}
inline std::string* PbAlgCacheAttr::mutable_file_path() {
  std::string* _s = _internal_mutable_file_path();
  // @@protoc_insertion_point(field_mutable:PbAlgCacheAttr.file_path)
  return _s;
}
inline const std::string& PbAlgCacheAttr::_internal_file_path() const {
  return file_path_.Get();
}
inline void PbAlgCacheAttr::_internal_set_file_path(const std::string& value) {
  
  file_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PbAlgCacheAttr::_internal_mutable_file_path() {
  
  return file_path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PbAlgCacheAttr::release_file_path() {
  // @@protoc_insertion_point(field_release:PbAlgCacheAttr.file_path)
  return file_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PbAlgCacheAttr::set_allocated_file_path(std::string* file_path) {
  if (file_path != nullptr) {
    
  } else {
    
  }
  file_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_path,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:PbAlgCacheAttr.file_path)
}

// string file_prefix = 2;
inline void PbAlgCacheAttr::clear_file_prefix() {
  file_prefix_.ClearToEmpty();
}
inline const std::string& PbAlgCacheAttr::file_prefix() const {
  // @@protoc_insertion_point(field_get:PbAlgCacheAttr.file_prefix)
  return _internal_file_prefix();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PbAlgCacheAttr::set_file_prefix(ArgT0&& arg0, ArgT... args) {
 
 file_prefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PbAlgCacheAttr.file_prefix)
}
inline std::string* PbAlgCacheAttr::mutable_file_prefix() {
  std::string* _s = _internal_mutable_file_prefix();
  // @@protoc_insertion_point(field_mutable:PbAlgCacheAttr.file_prefix)
  return _s;
}
inline const std::string& PbAlgCacheAttr::_internal_file_prefix() const {
  return file_prefix_.Get();
}
inline void PbAlgCacheAttr::_internal_set_file_prefix(const std::string& value) {
  
  file_prefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PbAlgCacheAttr::_internal_mutable_file_prefix() {
  
  return file_prefix_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PbAlgCacheAttr::release_file_prefix() {
  // @@protoc_insertion_point(field_release:PbAlgCacheAttr.file_prefix)
  return file_prefix_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PbAlgCacheAttr::set_allocated_file_prefix(std::string* file_prefix) {
  if (file_prefix != nullptr) {
    
  } else {
    
  }
  file_prefix_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_prefix,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:PbAlgCacheAttr.file_prefix)
}

// string file_index = 3;
inline void PbAlgCacheAttr::clear_file_index() {
  file_index_.ClearToEmpty();
}
inline const std::string& PbAlgCacheAttr::file_index() const {
  // @@protoc_insertion_point(field_get:PbAlgCacheAttr.file_index)
  return _internal_file_index();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PbAlgCacheAttr::set_file_index(ArgT0&& arg0, ArgT... args) {
 
 file_index_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PbAlgCacheAttr.file_index)
}
inline std::string* PbAlgCacheAttr::mutable_file_index() {
  std::string* _s = _internal_mutable_file_index();
  // @@protoc_insertion_point(field_mutable:PbAlgCacheAttr.file_index)
  return _s;
}
inline const std::string& PbAlgCacheAttr::_internal_file_index() const {
  return file_index_.Get();
}
inline void PbAlgCacheAttr::_internal_set_file_index(const std::string& value) {
  
  file_index_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PbAlgCacheAttr::_internal_mutable_file_index() {
  
  return file_index_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PbAlgCacheAttr::release_file_index() {
  // @@protoc_insertion_point(field_release:PbAlgCacheAttr.file_index)
  return file_index_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PbAlgCacheAttr::set_allocated_file_index(std::string* file_index) {
  if (file_index != nullptr) {
    
  } else {
    
  }
  file_index_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_index,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:PbAlgCacheAttr.file_index)
}

// int32 file_max_num = 4;
inline void PbAlgCacheAttr::clear_file_max_num() {
  file_max_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PbAlgCacheAttr::_internal_file_max_num() const {
  return file_max_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PbAlgCacheAttr::file_max_num() const {
  // @@protoc_insertion_point(field_get:PbAlgCacheAttr.file_max_num)
  return _internal_file_max_num();
}
inline void PbAlgCacheAttr::_internal_set_file_max_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  file_max_num_ = value;
}
inline void PbAlgCacheAttr::set_file_max_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_file_max_num(value);
  // @@protoc_insertion_point(field_set:PbAlgCacheAttr.file_max_num)
}

// int32 frame_max_num = 5;
inline void PbAlgCacheAttr::clear_frame_max_num() {
  frame_max_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PbAlgCacheAttr::_internal_frame_max_num() const {
  return frame_max_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PbAlgCacheAttr::frame_max_num() const {
  // @@protoc_insertion_point(field_get:PbAlgCacheAttr.frame_max_num)
  return _internal_frame_max_num();
}
inline void PbAlgCacheAttr::_internal_set_frame_max_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  frame_max_num_ = value;
}
inline void PbAlgCacheAttr::set_frame_max_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_frame_max_num(value);
  // @@protoc_insertion_point(field_set:PbAlgCacheAttr.frame_max_num)
}

// -------------------------------------------------------------------

// PbAlgExceptAttr

// string file_path = 1;
inline void PbAlgExceptAttr::clear_file_path() {
  file_path_.ClearToEmpty();
}
inline const std::string& PbAlgExceptAttr::file_path() const {
  // @@protoc_insertion_point(field_get:PbAlgExceptAttr.file_path)
  return _internal_file_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PbAlgExceptAttr::set_file_path(ArgT0&& arg0, ArgT... args) {
 
 file_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PbAlgExceptAttr.file_path)
}
inline std::string* PbAlgExceptAttr::mutable_file_path() {
  std::string* _s = _internal_mutable_file_path();
  // @@protoc_insertion_point(field_mutable:PbAlgExceptAttr.file_path)
  return _s;
}
inline const std::string& PbAlgExceptAttr::_internal_file_path() const {
  return file_path_.Get();
}
inline void PbAlgExceptAttr::_internal_set_file_path(const std::string& value) {
  
  file_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PbAlgExceptAttr::_internal_mutable_file_path() {
  
  return file_path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PbAlgExceptAttr::release_file_path() {
  // @@protoc_insertion_point(field_release:PbAlgExceptAttr.file_path)
  return file_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PbAlgExceptAttr::set_allocated_file_path(std::string* file_path) {
  if (file_path != nullptr) {
    
  } else {
    
  }
  file_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_path,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:PbAlgExceptAttr.file_path)
}

// string file_prefix = 2;
inline void PbAlgExceptAttr::clear_file_prefix() {
  file_prefix_.ClearToEmpty();
}
inline const std::string& PbAlgExceptAttr::file_prefix() const {
  // @@protoc_insertion_point(field_get:PbAlgExceptAttr.file_prefix)
  return _internal_file_prefix();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PbAlgExceptAttr::set_file_prefix(ArgT0&& arg0, ArgT... args) {
 
 file_prefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PbAlgExceptAttr.file_prefix)
}
inline std::string* PbAlgExceptAttr::mutable_file_prefix() {
  std::string* _s = _internal_mutable_file_prefix();
  // @@protoc_insertion_point(field_mutable:PbAlgExceptAttr.file_prefix)
  return _s;
}
inline const std::string& PbAlgExceptAttr::_internal_file_prefix() const {
  return file_prefix_.Get();
}
inline void PbAlgExceptAttr::_internal_set_file_prefix(const std::string& value) {
  
  file_prefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PbAlgExceptAttr::_internal_mutable_file_prefix() {
  
  return file_prefix_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PbAlgExceptAttr::release_file_prefix() {
  // @@protoc_insertion_point(field_release:PbAlgExceptAttr.file_prefix)
  return file_prefix_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PbAlgExceptAttr::set_allocated_file_prefix(std::string* file_prefix) {
  if (file_prefix != nullptr) {
    
  } else {
    
  }
  file_prefix_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_prefix,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:PbAlgExceptAttr.file_prefix)
}

// string file_index = 3;
inline void PbAlgExceptAttr::clear_file_index() {
  file_index_.ClearToEmpty();
}
inline const std::string& PbAlgExceptAttr::file_index() const {
  // @@protoc_insertion_point(field_get:PbAlgExceptAttr.file_index)
  return _internal_file_index();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PbAlgExceptAttr::set_file_index(ArgT0&& arg0, ArgT... args) {
 
 file_index_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PbAlgExceptAttr.file_index)
}
inline std::string* PbAlgExceptAttr::mutable_file_index() {
  std::string* _s = _internal_mutable_file_index();
  // @@protoc_insertion_point(field_mutable:PbAlgExceptAttr.file_index)
  return _s;
}
inline const std::string& PbAlgExceptAttr::_internal_file_index() const {
  return file_index_.Get();
}
inline void PbAlgExceptAttr::_internal_set_file_index(const std::string& value) {
  
  file_index_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PbAlgExceptAttr::_internal_mutable_file_index() {
  
  return file_index_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PbAlgExceptAttr::release_file_index() {
  // @@protoc_insertion_point(field_release:PbAlgExceptAttr.file_index)
  return file_index_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PbAlgExceptAttr::set_allocated_file_index(std::string* file_index) {
  if (file_index != nullptr) {
    
  } else {
    
  }
  file_index_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_index,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:PbAlgExceptAttr.file_index)
}

// int32 file_max_num = 4;
inline void PbAlgExceptAttr::clear_file_max_num() {
  file_max_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PbAlgExceptAttr::_internal_file_max_num() const {
  return file_max_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PbAlgExceptAttr::file_max_num() const {
  // @@protoc_insertion_point(field_get:PbAlgExceptAttr.file_max_num)
  return _internal_file_max_num();
}
inline void PbAlgExceptAttr::_internal_set_file_max_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  file_max_num_ = value;
}
inline void PbAlgExceptAttr::set_file_max_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_file_max_num(value);
  // @@protoc_insertion_point(field_set:PbAlgExceptAttr.file_max_num)
}

// -------------------------------------------------------------------

// ProductDebugCfg

// bool flag_debug_app_init = 1;
inline void ProductDebugCfg::clear_flag_debug_app_init() {
  flag_debug_app_init_ = false;
}
inline bool ProductDebugCfg::_internal_flag_debug_app_init() const {
  return flag_debug_app_init_;
}
inline bool ProductDebugCfg::flag_debug_app_init() const {
  // @@protoc_insertion_point(field_get:ProductDebugCfg.flag_debug_app_init)
  return _internal_flag_debug_app_init();
}
inline void ProductDebugCfg::_internal_set_flag_debug_app_init(bool value) {
  
  flag_debug_app_init_ = value;
}
inline void ProductDebugCfg::set_flag_debug_app_init(bool value) {
  _internal_set_flag_debug_app_init(value);
  // @@protoc_insertion_point(field_set:ProductDebugCfg.flag_debug_app_init)
}

// bool flag_debug_no_run_app_start = 2;
inline void ProductDebugCfg::clear_flag_debug_no_run_app_start() {
  flag_debug_no_run_app_start_ = false;
}
inline bool ProductDebugCfg::_internal_flag_debug_no_run_app_start() const {
  return flag_debug_no_run_app_start_;
}
inline bool ProductDebugCfg::flag_debug_no_run_app_start() const {
  // @@protoc_insertion_point(field_get:ProductDebugCfg.flag_debug_no_run_app_start)
  return _internal_flag_debug_no_run_app_start();
}
inline void ProductDebugCfg::_internal_set_flag_debug_no_run_app_start(bool value) {
  
  flag_debug_no_run_app_start_ = value;
}
inline void ProductDebugCfg::set_flag_debug_no_run_app_start(bool value) {
  _internal_set_flag_debug_no_run_app_start(value);
  // @@protoc_insertion_point(field_set:ProductDebugCfg.flag_debug_no_run_app_start)
}

// bool flag_debug_no_run_app_init = 3;
inline void ProductDebugCfg::clear_flag_debug_no_run_app_init() {
  flag_debug_no_run_app_init_ = false;
}
inline bool ProductDebugCfg::_internal_flag_debug_no_run_app_init() const {
  return flag_debug_no_run_app_init_;
}
inline bool ProductDebugCfg::flag_debug_no_run_app_init() const {
  // @@protoc_insertion_point(field_get:ProductDebugCfg.flag_debug_no_run_app_init)
  return _internal_flag_debug_no_run_app_init();
}
inline void ProductDebugCfg::_internal_set_flag_debug_no_run_app_init(bool value) {
  
  flag_debug_no_run_app_init_ = value;
}
inline void ProductDebugCfg::set_flag_debug_no_run_app_init(bool value) {
  _internal_set_flag_debug_no_run_app_init(value);
  // @@protoc_insertion_point(field_set:ProductDebugCfg.flag_debug_no_run_app_init)
}

// bool flag_debug_no_run_linux_app = 4;
inline void ProductDebugCfg::clear_flag_debug_no_run_linux_app() {
  flag_debug_no_run_linux_app_ = false;
}
inline bool ProductDebugCfg::_internal_flag_debug_no_run_linux_app() const {
  return flag_debug_no_run_linux_app_;
}
inline bool ProductDebugCfg::flag_debug_no_run_linux_app() const {
  // @@protoc_insertion_point(field_get:ProductDebugCfg.flag_debug_no_run_linux_app)
  return _internal_flag_debug_no_run_linux_app();
}
inline void ProductDebugCfg::_internal_set_flag_debug_no_run_linux_app(bool value) {
  
  flag_debug_no_run_linux_app_ = value;
}
inline void ProductDebugCfg::set_flag_debug_no_run_linux_app(bool value) {
  _internal_set_flag_debug_no_run_linux_app(value);
  // @@protoc_insertion_point(field_set:ProductDebugCfg.flag_debug_no_run_linux_app)
}

// bool flag_debug_wifi_connect = 5;
inline void ProductDebugCfg::clear_flag_debug_wifi_connect() {
  flag_debug_wifi_connect_ = false;
}
inline bool ProductDebugCfg::_internal_flag_debug_wifi_connect() const {
  return flag_debug_wifi_connect_;
}
inline bool ProductDebugCfg::flag_debug_wifi_connect() const {
  // @@protoc_insertion_point(field_get:ProductDebugCfg.flag_debug_wifi_connect)
  return _internal_flag_debug_wifi_connect();
}
inline void ProductDebugCfg::_internal_set_flag_debug_wifi_connect(bool value) {
  
  flag_debug_wifi_connect_ = value;
}
inline void ProductDebugCfg::set_flag_debug_wifi_connect(bool value) {
  _internal_set_flag_debug_wifi_connect(value);
  // @@protoc_insertion_point(field_set:ProductDebugCfg.flag_debug_wifi_connect)
}

// bool flag_debug_run_rid_capture = 6;
inline void ProductDebugCfg::clear_flag_debug_run_rid_capture() {
  flag_debug_run_rid_capture_ = false;
}
inline bool ProductDebugCfg::_internal_flag_debug_run_rid_capture() const {
  return flag_debug_run_rid_capture_;
}
inline bool ProductDebugCfg::flag_debug_run_rid_capture() const {
  // @@protoc_insertion_point(field_get:ProductDebugCfg.flag_debug_run_rid_capture)
  return _internal_flag_debug_run_rid_capture();
}
inline void ProductDebugCfg::_internal_set_flag_debug_run_rid_capture(bool value) {
  
  flag_debug_run_rid_capture_ = value;
}
inline void ProductDebugCfg::set_flag_debug_run_rid_capture(bool value) {
  _internal_set_flag_debug_run_rid_capture(value);
  // @@protoc_insertion_point(field_set:ProductDebugCfg.flag_debug_run_rid_capture)
}

// bool flag_debug_run_rid_capture_print = 7;
inline void ProductDebugCfg::clear_flag_debug_run_rid_capture_print() {
  flag_debug_run_rid_capture_print_ = false;
}
inline bool ProductDebugCfg::_internal_flag_debug_run_rid_capture_print() const {
  return flag_debug_run_rid_capture_print_;
}
inline bool ProductDebugCfg::flag_debug_run_rid_capture_print() const {
  // @@protoc_insertion_point(field_get:ProductDebugCfg.flag_debug_run_rid_capture_print)
  return _internal_flag_debug_run_rid_capture_print();
}
inline void ProductDebugCfg::_internal_set_flag_debug_run_rid_capture_print(bool value) {
  
  flag_debug_run_rid_capture_print_ = value;
}
inline void ProductDebugCfg::set_flag_debug_run_rid_capture_print(bool value) {
  _internal_set_flag_debug_run_rid_capture_print(value);
  // @@protoc_insertion_point(field_set:ProductDebugCfg.flag_debug_run_rid_capture_print)
}

// bool flag_debug_no_report_alink_info = 8;
inline void ProductDebugCfg::clear_flag_debug_no_report_alink_info() {
  flag_debug_no_report_alink_info_ = false;
}
inline bool ProductDebugCfg::_internal_flag_debug_no_report_alink_info() const {
  return flag_debug_no_report_alink_info_;
}
inline bool ProductDebugCfg::flag_debug_no_report_alink_info() const {
  // @@protoc_insertion_point(field_get:ProductDebugCfg.flag_debug_no_report_alink_info)
  return _internal_flag_debug_no_report_alink_info();
}
inline void ProductDebugCfg::_internal_set_flag_debug_no_report_alink_info(bool value) {
  
  flag_debug_no_report_alink_info_ = value;
}
inline void ProductDebugCfg::set_flag_debug_no_report_alink_info(bool value) {
  _internal_set_flag_debug_no_report_alink_info(value);
  // @@protoc_insertion_point(field_set:ProductDebugCfg.flag_debug_no_report_alink_info)
}

// bool flag_debug_tcp_client_ip = 9;
inline void ProductDebugCfg::clear_flag_debug_tcp_client_ip() {
  flag_debug_tcp_client_ip_ = false;
}
inline bool ProductDebugCfg::_internal_flag_debug_tcp_client_ip() const {
  return flag_debug_tcp_client_ip_;
}
inline bool ProductDebugCfg::flag_debug_tcp_client_ip() const {
  // @@protoc_insertion_point(field_get:ProductDebugCfg.flag_debug_tcp_client_ip)
  return _internal_flag_debug_tcp_client_ip();
}
inline void ProductDebugCfg::_internal_set_flag_debug_tcp_client_ip(bool value) {
  
  flag_debug_tcp_client_ip_ = value;
}
inline void ProductDebugCfg::set_flag_debug_tcp_client_ip(bool value) {
  _internal_set_flag_debug_tcp_client_ip(value);
  // @@protoc_insertion_point(field_set:ProductDebugCfg.flag_debug_tcp_client_ip)
}

// bool flag_debug_droneid_check_crc = 10;
inline void ProductDebugCfg::clear_flag_debug_droneid_check_crc() {
  flag_debug_droneid_check_crc_ = false;
}
inline bool ProductDebugCfg::_internal_flag_debug_droneid_check_crc() const {
  return flag_debug_droneid_check_crc_;
}
inline bool ProductDebugCfg::flag_debug_droneid_check_crc() const {
  // @@protoc_insertion_point(field_get:ProductDebugCfg.flag_debug_droneid_check_crc)
  return _internal_flag_debug_droneid_check_crc();
}
inline void ProductDebugCfg::_internal_set_flag_debug_droneid_check_crc(bool value) {
  
  flag_debug_droneid_check_crc_ = value;
}
inline void ProductDebugCfg::set_flag_debug_droneid_check_crc(bool value) {
  _internal_set_flag_debug_droneid_check_crc(value);
  // @@protoc_insertion_point(field_set:ProductDebugCfg.flag_debug_droneid_check_crc)
}

// bool flag_debug_droneid = 11;
inline void ProductDebugCfg::clear_flag_debug_droneid() {
  flag_debug_droneid_ = false;
}
inline bool ProductDebugCfg::_internal_flag_debug_droneid() const {
  return flag_debug_droneid_;
}
inline bool ProductDebugCfg::flag_debug_droneid() const {
  // @@protoc_insertion_point(field_get:ProductDebugCfg.flag_debug_droneid)
  return _internal_flag_debug_droneid();
}
inline void ProductDebugCfg::_internal_set_flag_debug_droneid(bool value) {
  
  flag_debug_droneid_ = value;
}
inline void ProductDebugCfg::set_flag_debug_droneid(bool value) {
  _internal_set_flag_debug_droneid(value);
  // @@protoc_insertion_point(field_set:ProductDebugCfg.flag_debug_droneid)
}

// bool flag_debug_no_fft_dma = 12;
inline void ProductDebugCfg::clear_flag_debug_no_fft_dma() {
  flag_debug_no_fft_dma_ = false;
}
inline bool ProductDebugCfg::_internal_flag_debug_no_fft_dma() const {
  return flag_debug_no_fft_dma_;
}
inline bool ProductDebugCfg::flag_debug_no_fft_dma() const {
  // @@protoc_insertion_point(field_get:ProductDebugCfg.flag_debug_no_fft_dma)
  return _internal_flag_debug_no_fft_dma();
}
inline void ProductDebugCfg::_internal_set_flag_debug_no_fft_dma(bool value) {
  
  flag_debug_no_fft_dma_ = value;
}
inline void ProductDebugCfg::set_flag_debug_no_fft_dma(bool value) {
  _internal_set_flag_debug_no_fft_dma(value);
  // @@protoc_insertion_point(field_set:ProductDebugCfg.flag_debug_no_fft_dma)
}

// bool flag_debug_disable_buzz_motor = 13;
inline void ProductDebugCfg::clear_flag_debug_disable_buzz_motor() {
  flag_debug_disable_buzz_motor_ = false;
}
inline bool ProductDebugCfg::_internal_flag_debug_disable_buzz_motor() const {
  return flag_debug_disable_buzz_motor_;
}
inline bool ProductDebugCfg::flag_debug_disable_buzz_motor() const {
  // @@protoc_insertion_point(field_get:ProductDebugCfg.flag_debug_disable_buzz_motor)
  return _internal_flag_debug_disable_buzz_motor();
}
inline void ProductDebugCfg::_internal_set_flag_debug_disable_buzz_motor(bool value) {
  
  flag_debug_disable_buzz_motor_ = value;
}
inline void ProductDebugCfg::set_flag_debug_disable_buzz_motor(bool value) {
  _internal_set_flag_debug_disable_buzz_motor(value);
  // @@protoc_insertion_point(field_set:ProductDebugCfg.flag_debug_disable_buzz_motor)
}

// bool isSupportSpectrogram = 21;
inline void ProductDebugCfg::clear_issupportspectrogram() {
  issupportspectrogram_ = false;
}
inline bool ProductDebugCfg::_internal_issupportspectrogram() const {
  return issupportspectrogram_;
}
inline bool ProductDebugCfg::issupportspectrogram() const {
  // @@protoc_insertion_point(field_get:ProductDebugCfg.isSupportSpectrogram)
  return _internal_issupportspectrogram();
}
inline void ProductDebugCfg::_internal_set_issupportspectrogram(bool value) {
  
  issupportspectrogram_ = value;
}
inline void ProductDebugCfg::set_issupportspectrogram(bool value) {
  _internal_set_issupportspectrogram(value);
  // @@protoc_insertion_point(field_set:ProductDebugCfg.isSupportSpectrogram)
}

// .PbSpectrogramAttr spectrogramAttr = 22;
inline bool ProductDebugCfg::_internal_has_spectrogramattr() const {
  return this != internal_default_instance() && spectrogramattr_ != nullptr;
}
inline bool ProductDebugCfg::has_spectrogramattr() const {
  return _internal_has_spectrogramattr();
}
inline void ProductDebugCfg::clear_spectrogramattr() {
  if (GetArenaForAllocation() == nullptr && spectrogramattr_ != nullptr) {
    delete spectrogramattr_;
  }
  spectrogramattr_ = nullptr;
}
inline const ::PbSpectrogramAttr& ProductDebugCfg::_internal_spectrogramattr() const {
  const ::PbSpectrogramAttr* p = spectrogramattr_;
  return p != nullptr ? *p : reinterpret_cast<const ::PbSpectrogramAttr&>(
      ::_PbSpectrogramAttr_default_instance_);
}
inline const ::PbSpectrogramAttr& ProductDebugCfg::spectrogramattr() const {
  // @@protoc_insertion_point(field_get:ProductDebugCfg.spectrogramAttr)
  return _internal_spectrogramattr();
}
inline void ProductDebugCfg::unsafe_arena_set_allocated_spectrogramattr(
    ::PbSpectrogramAttr* spectrogramattr) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(spectrogramattr_);
  }
  spectrogramattr_ = spectrogramattr;
  if (spectrogramattr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProductDebugCfg.spectrogramAttr)
}
inline ::PbSpectrogramAttr* ProductDebugCfg::release_spectrogramattr() {
  
  ::PbSpectrogramAttr* temp = spectrogramattr_;
  spectrogramattr_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PbSpectrogramAttr* ProductDebugCfg::unsafe_arena_release_spectrogramattr() {
  // @@protoc_insertion_point(field_release:ProductDebugCfg.spectrogramAttr)
  
  ::PbSpectrogramAttr* temp = spectrogramattr_;
  spectrogramattr_ = nullptr;
  return temp;
}
inline ::PbSpectrogramAttr* ProductDebugCfg::_internal_mutable_spectrogramattr() {
  
  if (spectrogramattr_ == nullptr) {
    auto* p = CreateMaybeMessage<::PbSpectrogramAttr>(GetArenaForAllocation());
    spectrogramattr_ = p;
  }
  return spectrogramattr_;
}
inline ::PbSpectrogramAttr* ProductDebugCfg::mutable_spectrogramattr() {
  ::PbSpectrogramAttr* _msg = _internal_mutable_spectrogramattr();
  // @@protoc_insertion_point(field_mutable:ProductDebugCfg.spectrogramAttr)
  return _msg;
}
inline void ProductDebugCfg::set_allocated_spectrogramattr(::PbSpectrogramAttr* spectrogramattr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete spectrogramattr_;
  }
  if (spectrogramattr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::PbSpectrogramAttr>::GetOwningArena(spectrogramattr);
    if (message_arena != submessage_arena) {
      spectrogramattr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spectrogramattr, submessage_arena);
    }
    
  } else {
    
  }
  spectrogramattr_ = spectrogramattr;
  // @@protoc_insertion_point(field_set_allocated:ProductDebugCfg.spectrogramAttr)
}

// bool isSupportAlgCache = 23;
inline void ProductDebugCfg::clear_issupportalgcache() {
  issupportalgcache_ = false;
}
inline bool ProductDebugCfg::_internal_issupportalgcache() const {
  return issupportalgcache_;
}
inline bool ProductDebugCfg::issupportalgcache() const {
  // @@protoc_insertion_point(field_get:ProductDebugCfg.isSupportAlgCache)
  return _internal_issupportalgcache();
}
inline void ProductDebugCfg::_internal_set_issupportalgcache(bool value) {
  
  issupportalgcache_ = value;
}
inline void ProductDebugCfg::set_issupportalgcache(bool value) {
  _internal_set_issupportalgcache(value);
  // @@protoc_insertion_point(field_set:ProductDebugCfg.isSupportAlgCache)
}

// .PbAlgCacheAttr algCacheAttr = 24;
inline bool ProductDebugCfg::_internal_has_algcacheattr() const {
  return this != internal_default_instance() && algcacheattr_ != nullptr;
}
inline bool ProductDebugCfg::has_algcacheattr() const {
  return _internal_has_algcacheattr();
}
inline void ProductDebugCfg::clear_algcacheattr() {
  if (GetArenaForAllocation() == nullptr && algcacheattr_ != nullptr) {
    delete algcacheattr_;
  }
  algcacheattr_ = nullptr;
}
inline const ::PbAlgCacheAttr& ProductDebugCfg::_internal_algcacheattr() const {
  const ::PbAlgCacheAttr* p = algcacheattr_;
  return p != nullptr ? *p : reinterpret_cast<const ::PbAlgCacheAttr&>(
      ::_PbAlgCacheAttr_default_instance_);
}
inline const ::PbAlgCacheAttr& ProductDebugCfg::algcacheattr() const {
  // @@protoc_insertion_point(field_get:ProductDebugCfg.algCacheAttr)
  return _internal_algcacheattr();
}
inline void ProductDebugCfg::unsafe_arena_set_allocated_algcacheattr(
    ::PbAlgCacheAttr* algcacheattr) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(algcacheattr_);
  }
  algcacheattr_ = algcacheattr;
  if (algcacheattr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProductDebugCfg.algCacheAttr)
}
inline ::PbAlgCacheAttr* ProductDebugCfg::release_algcacheattr() {
  
  ::PbAlgCacheAttr* temp = algcacheattr_;
  algcacheattr_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PbAlgCacheAttr* ProductDebugCfg::unsafe_arena_release_algcacheattr() {
  // @@protoc_insertion_point(field_release:ProductDebugCfg.algCacheAttr)
  
  ::PbAlgCacheAttr* temp = algcacheattr_;
  algcacheattr_ = nullptr;
  return temp;
}
inline ::PbAlgCacheAttr* ProductDebugCfg::_internal_mutable_algcacheattr() {
  
  if (algcacheattr_ == nullptr) {
    auto* p = CreateMaybeMessage<::PbAlgCacheAttr>(GetArenaForAllocation());
    algcacheattr_ = p;
  }
  return algcacheattr_;
}
inline ::PbAlgCacheAttr* ProductDebugCfg::mutable_algcacheattr() {
  ::PbAlgCacheAttr* _msg = _internal_mutable_algcacheattr();
  // @@protoc_insertion_point(field_mutable:ProductDebugCfg.algCacheAttr)
  return _msg;
}
inline void ProductDebugCfg::set_allocated_algcacheattr(::PbAlgCacheAttr* algcacheattr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete algcacheattr_;
  }
  if (algcacheattr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::PbAlgCacheAttr>::GetOwningArena(algcacheattr);
    if (message_arena != submessage_arena) {
      algcacheattr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, algcacheattr, submessage_arena);
    }
    
  } else {
    
  }
  algcacheattr_ = algcacheattr;
  // @@protoc_insertion_point(field_set_allocated:ProductDebugCfg.algCacheAttr)
}

// bool isSupportAlgExcept = 25;
inline void ProductDebugCfg::clear_issupportalgexcept() {
  issupportalgexcept_ = false;
}
inline bool ProductDebugCfg::_internal_issupportalgexcept() const {
  return issupportalgexcept_;
}
inline bool ProductDebugCfg::issupportalgexcept() const {
  // @@protoc_insertion_point(field_get:ProductDebugCfg.isSupportAlgExcept)
  return _internal_issupportalgexcept();
}
inline void ProductDebugCfg::_internal_set_issupportalgexcept(bool value) {
  
  issupportalgexcept_ = value;
}
inline void ProductDebugCfg::set_issupportalgexcept(bool value) {
  _internal_set_issupportalgexcept(value);
  // @@protoc_insertion_point(field_set:ProductDebugCfg.isSupportAlgExcept)
}

// .PbAlgExceptAttr algExceptAttr = 26;
inline bool ProductDebugCfg::_internal_has_algexceptattr() const {
  return this != internal_default_instance() && algexceptattr_ != nullptr;
}
inline bool ProductDebugCfg::has_algexceptattr() const {
  return _internal_has_algexceptattr();
}
inline void ProductDebugCfg::clear_algexceptattr() {
  if (GetArenaForAllocation() == nullptr && algexceptattr_ != nullptr) {
    delete algexceptattr_;
  }
  algexceptattr_ = nullptr;
}
inline const ::PbAlgExceptAttr& ProductDebugCfg::_internal_algexceptattr() const {
  const ::PbAlgExceptAttr* p = algexceptattr_;
  return p != nullptr ? *p : reinterpret_cast<const ::PbAlgExceptAttr&>(
      ::_PbAlgExceptAttr_default_instance_);
}
inline const ::PbAlgExceptAttr& ProductDebugCfg::algexceptattr() const {
  // @@protoc_insertion_point(field_get:ProductDebugCfg.algExceptAttr)
  return _internal_algexceptattr();
}
inline void ProductDebugCfg::unsafe_arena_set_allocated_algexceptattr(
    ::PbAlgExceptAttr* algexceptattr) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(algexceptattr_);
  }
  algexceptattr_ = algexceptattr;
  if (algexceptattr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProductDebugCfg.algExceptAttr)
}
inline ::PbAlgExceptAttr* ProductDebugCfg::release_algexceptattr() {
  
  ::PbAlgExceptAttr* temp = algexceptattr_;
  algexceptattr_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PbAlgExceptAttr* ProductDebugCfg::unsafe_arena_release_algexceptattr() {
  // @@protoc_insertion_point(field_release:ProductDebugCfg.algExceptAttr)
  
  ::PbAlgExceptAttr* temp = algexceptattr_;
  algexceptattr_ = nullptr;
  return temp;
}
inline ::PbAlgExceptAttr* ProductDebugCfg::_internal_mutable_algexceptattr() {
  
  if (algexceptattr_ == nullptr) {
    auto* p = CreateMaybeMessage<::PbAlgExceptAttr>(GetArenaForAllocation());
    algexceptattr_ = p;
  }
  return algexceptattr_;
}
inline ::PbAlgExceptAttr* ProductDebugCfg::mutable_algexceptattr() {
  ::PbAlgExceptAttr* _msg = _internal_mutable_algexceptattr();
  // @@protoc_insertion_point(field_mutable:ProductDebugCfg.algExceptAttr)
  return _msg;
}
inline void ProductDebugCfg::set_allocated_algexceptattr(::PbAlgExceptAttr* algexceptattr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete algexceptattr_;
  }
  if (algexceptattr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::PbAlgExceptAttr>::GetOwningArena(algexceptattr);
    if (message_arena != submessage_arena) {
      algexceptattr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, algexceptattr, submessage_arena);
    }
    
  } else {
    
  }
  algexceptattr_ = algexceptattr;
  // @@protoc_insertion_point(field_set_allocated:ProductDebugCfg.algExceptAttr)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ProductDebugCfg_2eproto
