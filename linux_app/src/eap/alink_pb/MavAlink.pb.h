// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MavAlink.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_MavAlink_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_MavAlink_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_MavAlink_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_MavAlink_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_MavAlink_2eproto;
class ReportDroneIdPB;
struct ReportDroneIdPBDefaultTypeInternal;
extern ReportDroneIdPBDefaultTypeInternal _ReportDroneIdPB_default_instance_;
class ReportDroneIdPB_DroneInfo;
struct ReportDroneIdPB_DroneInfoDefaultTypeInternal;
extern ReportDroneIdPB_DroneInfoDefaultTypeInternal _ReportDroneIdPB_DroneInfo_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::ReportDroneIdPB* Arena::CreateMaybeMessage<::ReportDroneIdPB>(Arena*);
template<> ::ReportDroneIdPB_DroneInfo* Arena::CreateMaybeMessage<::ReportDroneIdPB_DroneInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class ReportDroneIdPB_DroneInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ReportDroneIdPB.DroneInfo) */ {
 public:
  inline ReportDroneIdPB_DroneInfo() : ReportDroneIdPB_DroneInfo(nullptr) {}
  ~ReportDroneIdPB_DroneInfo() override;
  explicit constexpr ReportDroneIdPB_DroneInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReportDroneIdPB_DroneInfo(const ReportDroneIdPB_DroneInfo& from);
  ReportDroneIdPB_DroneInfo(ReportDroneIdPB_DroneInfo&& from) noexcept
    : ReportDroneIdPB_DroneInfo() {
    *this = ::std::move(from);
  }

  inline ReportDroneIdPB_DroneInfo& operator=(const ReportDroneIdPB_DroneInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReportDroneIdPB_DroneInfo& operator=(ReportDroneIdPB_DroneInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReportDroneIdPB_DroneInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReportDroneIdPB_DroneInfo* internal_default_instance() {
    return reinterpret_cast<const ReportDroneIdPB_DroneInfo*>(
               &_ReportDroneIdPB_DroneInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ReportDroneIdPB_DroneInfo& a, ReportDroneIdPB_DroneInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ReportDroneIdPB_DroneInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReportDroneIdPB_DroneInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReportDroneIdPB_DroneInfo* New() const final {
    return new ReportDroneIdPB_DroneInfo();
  }

  ReportDroneIdPB_DroneInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReportDroneIdPB_DroneInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReportDroneIdPB_DroneInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReportDroneIdPB_DroneInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReportDroneIdPB_DroneInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ReportDroneIdPB.DroneInfo";
  }
  protected:
  explicit ReportDroneIdPB_DroneInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDroneNameFieldNumber = 2,
    kSerialNumFieldNumber = 3,
    kProductTypeFieldNumber = 1,
    kDroneLongitudeFieldNumber = 4,
    kDroneLatitudeFieldNumber = 5,
    kDroneHeightFieldNumber = 6,
    kDroneYawAngleFieldNumber = 7,
    kDroneSpeedFieldNumber = 8,
    kSpeedderectionFieldNumber = 9,
    kDroneVerticalSpeedFieldNumber = 10,
    kPilotLongitudeFieldNumber = 11,
    kPilotLatitudeFieldNumber = 12,
    kUFreqFieldNumber = 13,
    kUDistanceFieldNumber = 14,
    kDangerLevelsFieldNumber = 15,
  };
  // string droneName = 2;
  void clear_dronename();
  const std::string& dronename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dronename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dronename();
  PROTOBUF_MUST_USE_RESULT std::string* release_dronename();
  void set_allocated_dronename(std::string* dronename);
  private:
  const std::string& _internal_dronename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dronename(const std::string& value);
  std::string* _internal_mutable_dronename();
  public:

  // string serialNum = 3;
  void clear_serialnum();
  const std::string& serialnum() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_serialnum(ArgT0&& arg0, ArgT... args);
  std::string* mutable_serialnum();
  PROTOBUF_MUST_USE_RESULT std::string* release_serialnum();
  void set_allocated_serialnum(std::string* serialnum);
  private:
  const std::string& _internal_serialnum() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_serialnum(const std::string& value);
  std::string* _internal_mutable_serialnum();
  public:

  // uint32 productType = 1;
  void clear_producttype();
  ::PROTOBUF_NAMESPACE_ID::uint32 producttype() const;
  void set_producttype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_producttype() const;
  void _internal_set_producttype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 droneLongitude = 4;
  void clear_dronelongitude();
  ::PROTOBUF_NAMESPACE_ID::int32 dronelongitude() const;
  void set_dronelongitude(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dronelongitude() const;
  void _internal_set_dronelongitude(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 droneLatitude = 5;
  void clear_dronelatitude();
  ::PROTOBUF_NAMESPACE_ID::int32 dronelatitude() const;
  void set_dronelatitude(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dronelatitude() const;
  void _internal_set_dronelatitude(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 droneHeight = 6;
  void clear_droneheight();
  ::PROTOBUF_NAMESPACE_ID::int32 droneheight() const;
  void set_droneheight(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_droneheight() const;
  void _internal_set_droneheight(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 droneYawAngle = 7;
  void clear_droneyawangle();
  ::PROTOBUF_NAMESPACE_ID::int32 droneyawangle() const;
  void set_droneyawangle(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_droneyawangle() const;
  void _internal_set_droneyawangle(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 droneSpeed = 8;
  void clear_dronespeed();
  ::PROTOBUF_NAMESPACE_ID::int32 dronespeed() const;
  void set_dronespeed(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dronespeed() const;
  void _internal_set_dronespeed(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 speedderection = 9;
  void clear_speedderection();
  ::PROTOBUF_NAMESPACE_ID::int32 speedderection() const;
  void set_speedderection(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_speedderection() const;
  void _internal_set_speedderection(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 droneVerticalSpeed = 10;
  void clear_droneverticalspeed();
  ::PROTOBUF_NAMESPACE_ID::int32 droneverticalspeed() const;
  void set_droneverticalspeed(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_droneverticalspeed() const;
  void _internal_set_droneverticalspeed(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 pilotLongitude = 11;
  void clear_pilotlongitude();
  ::PROTOBUF_NAMESPACE_ID::int32 pilotlongitude() const;
  void set_pilotlongitude(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pilotlongitude() const;
  void _internal_set_pilotlongitude(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 pilotLatitude = 12;
  void clear_pilotlatitude();
  ::PROTOBUF_NAMESPACE_ID::int32 pilotlatitude() const;
  void set_pilotlatitude(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pilotlatitude() const;
  void _internal_set_pilotlatitude(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 uFreq = 13;
  void clear_ufreq();
  ::PROTOBUF_NAMESPACE_ID::uint32 ufreq() const;
  void set_ufreq(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ufreq() const;
  void _internal_set_ufreq(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 uDistance = 14;
  void clear_udistance();
  ::PROTOBUF_NAMESPACE_ID::uint32 udistance() const;
  void set_udistance(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_udistance() const;
  void _internal_set_udistance(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 dangerLevels = 15;
  void clear_dangerlevels();
  ::PROTOBUF_NAMESPACE_ID::uint32 dangerlevels() const;
  void set_dangerlevels(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_dangerlevels() const;
  void _internal_set_dangerlevels(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:ReportDroneIdPB.DroneInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dronename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serialnum_;
  ::PROTOBUF_NAMESPACE_ID::uint32 producttype_;
  ::PROTOBUF_NAMESPACE_ID::int32 dronelongitude_;
  ::PROTOBUF_NAMESPACE_ID::int32 dronelatitude_;
  ::PROTOBUF_NAMESPACE_ID::int32 droneheight_;
  ::PROTOBUF_NAMESPACE_ID::int32 droneyawangle_;
  ::PROTOBUF_NAMESPACE_ID::int32 dronespeed_;
  ::PROTOBUF_NAMESPACE_ID::int32 speedderection_;
  ::PROTOBUF_NAMESPACE_ID::int32 droneverticalspeed_;
  ::PROTOBUF_NAMESPACE_ID::int32 pilotlongitude_;
  ::PROTOBUF_NAMESPACE_ID::int32 pilotlatitude_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ufreq_;
  ::PROTOBUF_NAMESPACE_ID::uint32 udistance_;
  ::PROTOBUF_NAMESPACE_ID::uint32 dangerlevels_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MavAlink_2eproto;
};
// -------------------------------------------------------------------

class ReportDroneIdPB final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ReportDroneIdPB) */ {
 public:
  inline ReportDroneIdPB() : ReportDroneIdPB(nullptr) {}
  ~ReportDroneIdPB() override;
  explicit constexpr ReportDroneIdPB(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReportDroneIdPB(const ReportDroneIdPB& from);
  ReportDroneIdPB(ReportDroneIdPB&& from) noexcept
    : ReportDroneIdPB() {
    *this = ::std::move(from);
  }

  inline ReportDroneIdPB& operator=(const ReportDroneIdPB& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReportDroneIdPB& operator=(ReportDroneIdPB&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReportDroneIdPB& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReportDroneIdPB* internal_default_instance() {
    return reinterpret_cast<const ReportDroneIdPB*>(
               &_ReportDroneIdPB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ReportDroneIdPB& a, ReportDroneIdPB& b) {
    a.Swap(&b);
  }
  inline void Swap(ReportDroneIdPB* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReportDroneIdPB* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReportDroneIdPB* New() const final {
    return new ReportDroneIdPB();
  }

  ReportDroneIdPB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReportDroneIdPB>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReportDroneIdPB& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReportDroneIdPB& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReportDroneIdPB* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ReportDroneIdPB";
  }
  protected:
  explicit ReportDroneIdPB(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ReportDroneIdPB_DroneInfo DroneInfo;

  // accessors -------------------------------------------------------

  enum : int {
    kDronesFieldNumber = 3,
    kTracerNameFieldNumber = 1,
    kUDroneNumFieldNumber = 2,
  };
  // repeated .ReportDroneIdPB.DroneInfo drones = 3;
  int drones_size() const;
  private:
  int _internal_drones_size() const;
  public:
  void clear_drones();
  ::ReportDroneIdPB_DroneInfo* mutable_drones(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ReportDroneIdPB_DroneInfo >*
      mutable_drones();
  private:
  const ::ReportDroneIdPB_DroneInfo& _internal_drones(int index) const;
  ::ReportDroneIdPB_DroneInfo* _internal_add_drones();
  public:
  const ::ReportDroneIdPB_DroneInfo& drones(int index) const;
  ::ReportDroneIdPB_DroneInfo* add_drones();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ReportDroneIdPB_DroneInfo >&
      drones() const;

  // string tracerName = 1;
  void clear_tracername();
  const std::string& tracername() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tracername(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tracername();
  PROTOBUF_MUST_USE_RESULT std::string* release_tracername();
  void set_allocated_tracername(std::string* tracername);
  private:
  const std::string& _internal_tracername() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tracername(const std::string& value);
  std::string* _internal_mutable_tracername();
  public:

  // int32 uDroneNum = 2;
  void clear_udronenum();
  ::PROTOBUF_NAMESPACE_ID::int32 udronenum() const;
  void set_udronenum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_udronenum() const;
  void _internal_set_udronenum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ReportDroneIdPB)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ReportDroneIdPB_DroneInfo > drones_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tracername_;
  ::PROTOBUF_NAMESPACE_ID::int32 udronenum_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MavAlink_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ReportDroneIdPB_DroneInfo

// uint32 productType = 1;
inline void ReportDroneIdPB_DroneInfo::clear_producttype() {
  producttype_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReportDroneIdPB_DroneInfo::_internal_producttype() const {
  return producttype_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReportDroneIdPB_DroneInfo::producttype() const {
  // @@protoc_insertion_point(field_get:ReportDroneIdPB.DroneInfo.productType)
  return _internal_producttype();
}
inline void ReportDroneIdPB_DroneInfo::_internal_set_producttype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  producttype_ = value;
}
inline void ReportDroneIdPB_DroneInfo::set_producttype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_producttype(value);
  // @@protoc_insertion_point(field_set:ReportDroneIdPB.DroneInfo.productType)
}

// string droneName = 2;
inline void ReportDroneIdPB_DroneInfo::clear_dronename() {
  dronename_.ClearToEmpty();
}
inline const std::string& ReportDroneIdPB_DroneInfo::dronename() const {
  // @@protoc_insertion_point(field_get:ReportDroneIdPB.DroneInfo.droneName)
  return _internal_dronename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReportDroneIdPB_DroneInfo::set_dronename(ArgT0&& arg0, ArgT... args) {
 
 dronename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ReportDroneIdPB.DroneInfo.droneName)
}
inline std::string* ReportDroneIdPB_DroneInfo::mutable_dronename() {
  std::string* _s = _internal_mutable_dronename();
  // @@protoc_insertion_point(field_mutable:ReportDroneIdPB.DroneInfo.droneName)
  return _s;
}
inline const std::string& ReportDroneIdPB_DroneInfo::_internal_dronename() const {
  return dronename_.Get();
}
inline void ReportDroneIdPB_DroneInfo::_internal_set_dronename(const std::string& value) {
  
  dronename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReportDroneIdPB_DroneInfo::_internal_mutable_dronename() {
  
  return dronename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReportDroneIdPB_DroneInfo::release_dronename() {
  // @@protoc_insertion_point(field_release:ReportDroneIdPB.DroneInfo.droneName)
  return dronename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReportDroneIdPB_DroneInfo::set_allocated_dronename(std::string* dronename) {
  if (dronename != nullptr) {
    
  } else {
    
  }
  dronename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dronename,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:ReportDroneIdPB.DroneInfo.droneName)
}

// string serialNum = 3;
inline void ReportDroneIdPB_DroneInfo::clear_serialnum() {
  serialnum_.ClearToEmpty();
}
inline const std::string& ReportDroneIdPB_DroneInfo::serialnum() const {
  // @@protoc_insertion_point(field_get:ReportDroneIdPB.DroneInfo.serialNum)
  return _internal_serialnum();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReportDroneIdPB_DroneInfo::set_serialnum(ArgT0&& arg0, ArgT... args) {
 
 serialnum_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ReportDroneIdPB.DroneInfo.serialNum)
}
inline std::string* ReportDroneIdPB_DroneInfo::mutable_serialnum() {
  std::string* _s = _internal_mutable_serialnum();
  // @@protoc_insertion_point(field_mutable:ReportDroneIdPB.DroneInfo.serialNum)
  return _s;
}
inline const std::string& ReportDroneIdPB_DroneInfo::_internal_serialnum() const {
  return serialnum_.Get();
}
inline void ReportDroneIdPB_DroneInfo::_internal_set_serialnum(const std::string& value) {
  
  serialnum_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReportDroneIdPB_DroneInfo::_internal_mutable_serialnum() {
  
  return serialnum_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReportDroneIdPB_DroneInfo::release_serialnum() {
  // @@protoc_insertion_point(field_release:ReportDroneIdPB.DroneInfo.serialNum)
  return serialnum_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReportDroneIdPB_DroneInfo::set_allocated_serialnum(std::string* serialnum) {
  if (serialnum != nullptr) {
    
  } else {
    
  }
  serialnum_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), serialnum,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:ReportDroneIdPB.DroneInfo.serialNum)
}

// int32 droneLongitude = 4;
inline void ReportDroneIdPB_DroneInfo::clear_dronelongitude() {
  dronelongitude_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReportDroneIdPB_DroneInfo::_internal_dronelongitude() const {
  return dronelongitude_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReportDroneIdPB_DroneInfo::dronelongitude() const {
  // @@protoc_insertion_point(field_get:ReportDroneIdPB.DroneInfo.droneLongitude)
  return _internal_dronelongitude();
}
inline void ReportDroneIdPB_DroneInfo::_internal_set_dronelongitude(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  dronelongitude_ = value;
}
inline void ReportDroneIdPB_DroneInfo::set_dronelongitude(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_dronelongitude(value);
  // @@protoc_insertion_point(field_set:ReportDroneIdPB.DroneInfo.droneLongitude)
}

// int32 droneLatitude = 5;
inline void ReportDroneIdPB_DroneInfo::clear_dronelatitude() {
  dronelatitude_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReportDroneIdPB_DroneInfo::_internal_dronelatitude() const {
  return dronelatitude_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReportDroneIdPB_DroneInfo::dronelatitude() const {
  // @@protoc_insertion_point(field_get:ReportDroneIdPB.DroneInfo.droneLatitude)
  return _internal_dronelatitude();
}
inline void ReportDroneIdPB_DroneInfo::_internal_set_dronelatitude(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  dronelatitude_ = value;
}
inline void ReportDroneIdPB_DroneInfo::set_dronelatitude(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_dronelatitude(value);
  // @@protoc_insertion_point(field_set:ReportDroneIdPB.DroneInfo.droneLatitude)
}

// int32 droneHeight = 6;
inline void ReportDroneIdPB_DroneInfo::clear_droneheight() {
  droneheight_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReportDroneIdPB_DroneInfo::_internal_droneheight() const {
  return droneheight_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReportDroneIdPB_DroneInfo::droneheight() const {
  // @@protoc_insertion_point(field_get:ReportDroneIdPB.DroneInfo.droneHeight)
  return _internal_droneheight();
}
inline void ReportDroneIdPB_DroneInfo::_internal_set_droneheight(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  droneheight_ = value;
}
inline void ReportDroneIdPB_DroneInfo::set_droneheight(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_droneheight(value);
  // @@protoc_insertion_point(field_set:ReportDroneIdPB.DroneInfo.droneHeight)
}

// int32 droneYawAngle = 7;
inline void ReportDroneIdPB_DroneInfo::clear_droneyawangle() {
  droneyawangle_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReportDroneIdPB_DroneInfo::_internal_droneyawangle() const {
  return droneyawangle_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReportDroneIdPB_DroneInfo::droneyawangle() const {
  // @@protoc_insertion_point(field_get:ReportDroneIdPB.DroneInfo.droneYawAngle)
  return _internal_droneyawangle();
}
inline void ReportDroneIdPB_DroneInfo::_internal_set_droneyawangle(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  droneyawangle_ = value;
}
inline void ReportDroneIdPB_DroneInfo::set_droneyawangle(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_droneyawangle(value);
  // @@protoc_insertion_point(field_set:ReportDroneIdPB.DroneInfo.droneYawAngle)
}

// int32 droneSpeed = 8;
inline void ReportDroneIdPB_DroneInfo::clear_dronespeed() {
  dronespeed_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReportDroneIdPB_DroneInfo::_internal_dronespeed() const {
  return dronespeed_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReportDroneIdPB_DroneInfo::dronespeed() const {
  // @@protoc_insertion_point(field_get:ReportDroneIdPB.DroneInfo.droneSpeed)
  return _internal_dronespeed();
}
inline void ReportDroneIdPB_DroneInfo::_internal_set_dronespeed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  dronespeed_ = value;
}
inline void ReportDroneIdPB_DroneInfo::set_dronespeed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_dronespeed(value);
  // @@protoc_insertion_point(field_set:ReportDroneIdPB.DroneInfo.droneSpeed)
}

// int32 speedderection = 9;
inline void ReportDroneIdPB_DroneInfo::clear_speedderection() {
  speedderection_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReportDroneIdPB_DroneInfo::_internal_speedderection() const {
  return speedderection_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReportDroneIdPB_DroneInfo::speedderection() const {
  // @@protoc_insertion_point(field_get:ReportDroneIdPB.DroneInfo.speedderection)
  return _internal_speedderection();
}
inline void ReportDroneIdPB_DroneInfo::_internal_set_speedderection(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  speedderection_ = value;
}
inline void ReportDroneIdPB_DroneInfo::set_speedderection(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_speedderection(value);
  // @@protoc_insertion_point(field_set:ReportDroneIdPB.DroneInfo.speedderection)
}

// int32 droneVerticalSpeed = 10;
inline void ReportDroneIdPB_DroneInfo::clear_droneverticalspeed() {
  droneverticalspeed_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReportDroneIdPB_DroneInfo::_internal_droneverticalspeed() const {
  return droneverticalspeed_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReportDroneIdPB_DroneInfo::droneverticalspeed() const {
  // @@protoc_insertion_point(field_get:ReportDroneIdPB.DroneInfo.droneVerticalSpeed)
  return _internal_droneverticalspeed();
}
inline void ReportDroneIdPB_DroneInfo::_internal_set_droneverticalspeed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  droneverticalspeed_ = value;
}
inline void ReportDroneIdPB_DroneInfo::set_droneverticalspeed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_droneverticalspeed(value);
  // @@protoc_insertion_point(field_set:ReportDroneIdPB.DroneInfo.droneVerticalSpeed)
}

// int32 pilotLongitude = 11;
inline void ReportDroneIdPB_DroneInfo::clear_pilotlongitude() {
  pilotlongitude_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReportDroneIdPB_DroneInfo::_internal_pilotlongitude() const {
  return pilotlongitude_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReportDroneIdPB_DroneInfo::pilotlongitude() const {
  // @@protoc_insertion_point(field_get:ReportDroneIdPB.DroneInfo.pilotLongitude)
  return _internal_pilotlongitude();
}
inline void ReportDroneIdPB_DroneInfo::_internal_set_pilotlongitude(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pilotlongitude_ = value;
}
inline void ReportDroneIdPB_DroneInfo::set_pilotlongitude(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pilotlongitude(value);
  // @@protoc_insertion_point(field_set:ReportDroneIdPB.DroneInfo.pilotLongitude)
}

// int32 pilotLatitude = 12;
inline void ReportDroneIdPB_DroneInfo::clear_pilotlatitude() {
  pilotlatitude_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReportDroneIdPB_DroneInfo::_internal_pilotlatitude() const {
  return pilotlatitude_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReportDroneIdPB_DroneInfo::pilotlatitude() const {
  // @@protoc_insertion_point(field_get:ReportDroneIdPB.DroneInfo.pilotLatitude)
  return _internal_pilotlatitude();
}
inline void ReportDroneIdPB_DroneInfo::_internal_set_pilotlatitude(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pilotlatitude_ = value;
}
inline void ReportDroneIdPB_DroneInfo::set_pilotlatitude(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pilotlatitude(value);
  // @@protoc_insertion_point(field_set:ReportDroneIdPB.DroneInfo.pilotLatitude)
}

// uint32 uFreq = 13;
inline void ReportDroneIdPB_DroneInfo::clear_ufreq() {
  ufreq_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReportDroneIdPB_DroneInfo::_internal_ufreq() const {
  return ufreq_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReportDroneIdPB_DroneInfo::ufreq() const {
  // @@protoc_insertion_point(field_get:ReportDroneIdPB.DroneInfo.uFreq)
  return _internal_ufreq();
}
inline void ReportDroneIdPB_DroneInfo::_internal_set_ufreq(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ufreq_ = value;
}
inline void ReportDroneIdPB_DroneInfo::set_ufreq(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ufreq(value);
  // @@protoc_insertion_point(field_set:ReportDroneIdPB.DroneInfo.uFreq)
}

// uint32 uDistance = 14;
inline void ReportDroneIdPB_DroneInfo::clear_udistance() {
  udistance_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReportDroneIdPB_DroneInfo::_internal_udistance() const {
  return udistance_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReportDroneIdPB_DroneInfo::udistance() const {
  // @@protoc_insertion_point(field_get:ReportDroneIdPB.DroneInfo.uDistance)
  return _internal_udistance();
}
inline void ReportDroneIdPB_DroneInfo::_internal_set_udistance(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  udistance_ = value;
}
inline void ReportDroneIdPB_DroneInfo::set_udistance(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_udistance(value);
  // @@protoc_insertion_point(field_set:ReportDroneIdPB.DroneInfo.uDistance)
}

// uint32 dangerLevels = 15;
inline void ReportDroneIdPB_DroneInfo::clear_dangerlevels() {
  dangerlevels_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReportDroneIdPB_DroneInfo::_internal_dangerlevels() const {
  return dangerlevels_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReportDroneIdPB_DroneInfo::dangerlevels() const {
  // @@protoc_insertion_point(field_get:ReportDroneIdPB.DroneInfo.dangerLevels)
  return _internal_dangerlevels();
}
inline void ReportDroneIdPB_DroneInfo::_internal_set_dangerlevels(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  dangerlevels_ = value;
}
inline void ReportDroneIdPB_DroneInfo::set_dangerlevels(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_dangerlevels(value);
  // @@protoc_insertion_point(field_set:ReportDroneIdPB.DroneInfo.dangerLevels)
}

// -------------------------------------------------------------------

// ReportDroneIdPB

// string tracerName = 1;
inline void ReportDroneIdPB::clear_tracername() {
  tracername_.ClearToEmpty();
}
inline const std::string& ReportDroneIdPB::tracername() const {
  // @@protoc_insertion_point(field_get:ReportDroneIdPB.tracerName)
  return _internal_tracername();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReportDroneIdPB::set_tracername(ArgT0&& arg0, ArgT... args) {
 
 tracername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ReportDroneIdPB.tracerName)
}
inline std::string* ReportDroneIdPB::mutable_tracername() {
  std::string* _s = _internal_mutable_tracername();
  // @@protoc_insertion_point(field_mutable:ReportDroneIdPB.tracerName)
  return _s;
}
inline const std::string& ReportDroneIdPB::_internal_tracername() const {
  return tracername_.Get();
}
inline void ReportDroneIdPB::_internal_set_tracername(const std::string& value) {
  
  tracername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReportDroneIdPB::_internal_mutable_tracername() {
  
  return tracername_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReportDroneIdPB::release_tracername() {
  // @@protoc_insertion_point(field_release:ReportDroneIdPB.tracerName)
  return tracername_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReportDroneIdPB::set_allocated_tracername(std::string* tracername) {
  if (tracername != nullptr) {
    
  } else {
    
  }
  tracername_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tracername,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:ReportDroneIdPB.tracerName)
}

// int32 uDroneNum = 2;
inline void ReportDroneIdPB::clear_udronenum() {
  udronenum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReportDroneIdPB::_internal_udronenum() const {
  return udronenum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReportDroneIdPB::udronenum() const {
  // @@protoc_insertion_point(field_get:ReportDroneIdPB.uDroneNum)
  return _internal_udronenum();
}
inline void ReportDroneIdPB::_internal_set_udronenum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  udronenum_ = value;
}
inline void ReportDroneIdPB::set_udronenum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_udronenum(value);
  // @@protoc_insertion_point(field_set:ReportDroneIdPB.uDroneNum)
}

// repeated .ReportDroneIdPB.DroneInfo drones = 3;
inline int ReportDroneIdPB::_internal_drones_size() const {
  return drones_.size();
}
inline int ReportDroneIdPB::drones_size() const {
  return _internal_drones_size();
}
inline void ReportDroneIdPB::clear_drones() {
  drones_.Clear();
}
inline ::ReportDroneIdPB_DroneInfo* ReportDroneIdPB::mutable_drones(int index) {
  // @@protoc_insertion_point(field_mutable:ReportDroneIdPB.drones)
  return drones_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ReportDroneIdPB_DroneInfo >*
ReportDroneIdPB::mutable_drones() {
  // @@protoc_insertion_point(field_mutable_list:ReportDroneIdPB.drones)
  return &drones_;
}
inline const ::ReportDroneIdPB_DroneInfo& ReportDroneIdPB::_internal_drones(int index) const {
  return drones_.Get(index);
}
inline const ::ReportDroneIdPB_DroneInfo& ReportDroneIdPB::drones(int index) const {
  // @@protoc_insertion_point(field_get:ReportDroneIdPB.drones)
  return _internal_drones(index);
}
inline ::ReportDroneIdPB_DroneInfo* ReportDroneIdPB::_internal_add_drones() {
  return drones_.Add();
}
inline ::ReportDroneIdPB_DroneInfo* ReportDroneIdPB::add_drones() {
  ::ReportDroneIdPB_DroneInfo* _add = _internal_add_drones();
  // @@protoc_insertion_point(field_add:ReportDroneIdPB.drones)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ReportDroneIdPB_DroneInfo >&
ReportDroneIdPB::drones() const {
  // @@protoc_insertion_point(field_list:ReportDroneIdPB.drones)
  return drones_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_MavAlink_2eproto
