// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProductDebugCfg.proto

#include "ProductDebugCfg.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr PbSpectrogramAttr::PbSpectrogramAttr(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : file_path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , file_prefix_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , file_index_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , file_max_num_(0){}
struct PbSpectrogramAttrDefaultTypeInternal {
  constexpr PbSpectrogramAttrDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PbSpectrogramAttrDefaultTypeInternal() {}
  union {
    PbSpectrogramAttr _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PbSpectrogramAttrDefaultTypeInternal _PbSpectrogramAttr_default_instance_;
constexpr PbAlgCacheAttr::PbAlgCacheAttr(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : file_path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , file_prefix_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , file_index_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , file_max_num_(0)
  , frame_max_num_(0){}
struct PbAlgCacheAttrDefaultTypeInternal {
  constexpr PbAlgCacheAttrDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PbAlgCacheAttrDefaultTypeInternal() {}
  union {
    PbAlgCacheAttr _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PbAlgCacheAttrDefaultTypeInternal _PbAlgCacheAttr_default_instance_;
constexpr PbAlgExceptAttr::PbAlgExceptAttr(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : file_path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , file_prefix_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , file_index_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , file_max_num_(0){}
struct PbAlgExceptAttrDefaultTypeInternal {
  constexpr PbAlgExceptAttrDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PbAlgExceptAttrDefaultTypeInternal() {}
  union {
    PbAlgExceptAttr _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PbAlgExceptAttrDefaultTypeInternal _PbAlgExceptAttr_default_instance_;
constexpr ProductDebugCfg::ProductDebugCfg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : spectrogramattr_(nullptr)
  , algcacheattr_(nullptr)
  , algexceptattr_(nullptr)
  , flag_debug_app_init_(false)
  , flag_debug_no_run_app_start_(false)
  , flag_debug_no_run_app_init_(false)
  , flag_debug_no_run_linux_app_(false)
  , flag_debug_wifi_connect_(false)
  , flag_debug_run_rid_capture_(false)
  , flag_debug_run_rid_capture_print_(false)
  , flag_debug_no_report_alink_info_(false)
  , flag_debug_tcp_client_ip_(false)
  , flag_debug_droneid_check_crc_(false)
  , flag_debug_droneid_(false)
  , flag_debug_no_fft_dma_(false)
  , flag_debug_disable_buzz_motor_(false)
  , issupportspectrogram_(false)
  , issupportalgcache_(false)
  , issupportalgexcept_(false){}
struct ProductDebugCfgDefaultTypeInternal {
  constexpr ProductDebugCfgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProductDebugCfgDefaultTypeInternal() {}
  union {
    ProductDebugCfg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProductDebugCfgDefaultTypeInternal _ProductDebugCfg_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ProductDebugCfg_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ProductDebugCfg_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ProductDebugCfg_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ProductDebugCfg_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PbSpectrogramAttr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PbSpectrogramAttr, file_path_),
  PROTOBUF_FIELD_OFFSET(::PbSpectrogramAttr, file_prefix_),
  PROTOBUF_FIELD_OFFSET(::PbSpectrogramAttr, file_index_),
  PROTOBUF_FIELD_OFFSET(::PbSpectrogramAttr, file_max_num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PbAlgCacheAttr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PbAlgCacheAttr, file_path_),
  PROTOBUF_FIELD_OFFSET(::PbAlgCacheAttr, file_prefix_),
  PROTOBUF_FIELD_OFFSET(::PbAlgCacheAttr, file_index_),
  PROTOBUF_FIELD_OFFSET(::PbAlgCacheAttr, file_max_num_),
  PROTOBUF_FIELD_OFFSET(::PbAlgCacheAttr, frame_max_num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PbAlgExceptAttr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PbAlgExceptAttr, file_path_),
  PROTOBUF_FIELD_OFFSET(::PbAlgExceptAttr, file_prefix_),
  PROTOBUF_FIELD_OFFSET(::PbAlgExceptAttr, file_index_),
  PROTOBUF_FIELD_OFFSET(::PbAlgExceptAttr, file_max_num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ProductDebugCfg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ProductDebugCfg, flag_debug_app_init_),
  PROTOBUF_FIELD_OFFSET(::ProductDebugCfg, flag_debug_no_run_app_start_),
  PROTOBUF_FIELD_OFFSET(::ProductDebugCfg, flag_debug_no_run_app_init_),
  PROTOBUF_FIELD_OFFSET(::ProductDebugCfg, flag_debug_no_run_linux_app_),
  PROTOBUF_FIELD_OFFSET(::ProductDebugCfg, flag_debug_wifi_connect_),
  PROTOBUF_FIELD_OFFSET(::ProductDebugCfg, flag_debug_run_rid_capture_),
  PROTOBUF_FIELD_OFFSET(::ProductDebugCfg, flag_debug_run_rid_capture_print_),
  PROTOBUF_FIELD_OFFSET(::ProductDebugCfg, flag_debug_no_report_alink_info_),
  PROTOBUF_FIELD_OFFSET(::ProductDebugCfg, flag_debug_tcp_client_ip_),
  PROTOBUF_FIELD_OFFSET(::ProductDebugCfg, flag_debug_droneid_check_crc_),
  PROTOBUF_FIELD_OFFSET(::ProductDebugCfg, flag_debug_droneid_),
  PROTOBUF_FIELD_OFFSET(::ProductDebugCfg, flag_debug_no_fft_dma_),
  PROTOBUF_FIELD_OFFSET(::ProductDebugCfg, flag_debug_disable_buzz_motor_),
  PROTOBUF_FIELD_OFFSET(::ProductDebugCfg, issupportspectrogram_),
  PROTOBUF_FIELD_OFFSET(::ProductDebugCfg, spectrogramattr_),
  PROTOBUF_FIELD_OFFSET(::ProductDebugCfg, issupportalgcache_),
  PROTOBUF_FIELD_OFFSET(::ProductDebugCfg, algcacheattr_),
  PROTOBUF_FIELD_OFFSET(::ProductDebugCfg, issupportalgexcept_),
  PROTOBUF_FIELD_OFFSET(::ProductDebugCfg, algexceptattr_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::PbSpectrogramAttr)},
  { 10, -1, -1, sizeof(::PbAlgCacheAttr)},
  { 21, -1, -1, sizeof(::PbAlgExceptAttr)},
  { 31, -1, -1, sizeof(::ProductDebugCfg)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PbSpectrogramAttr_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PbAlgCacheAttr_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PbAlgExceptAttr_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ProductDebugCfg_default_instance_),
};

const char descriptor_table_protodef_ProductDebugCfg_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025ProductDebugCfg.proto\"e\n\021PbSpectrogram"
  "Attr\022\021\n\tfile_path\030\001 \001(\t\022\023\n\013file_prefix\030\002"
  " \001(\t\022\022\n\nfile_index\030\003 \001(\t\022\024\n\014file_max_num"
  "\030\004 \001(\005\"y\n\016PbAlgCacheAttr\022\021\n\tfile_path\030\001 "
  "\001(\t\022\023\n\013file_prefix\030\002 \001(\t\022\022\n\nfile_index\030\003"
  " \001(\t\022\024\n\014file_max_num\030\004 \001(\005\022\025\n\rframe_max_"
  "num\030\005 \001(\005\"c\n\017PbAlgExceptAttr\022\021\n\tfile_pat"
  "h\030\001 \001(\t\022\023\n\013file_prefix\030\002 \001(\t\022\022\n\nfile_ind"
  "ex\030\003 \001(\t\022\024\n\014file_max_num\030\004 \001(\005\"\260\005\n\017Produ"
  "ctDebugCfg\022\033\n\023flag_debug_app_init\030\001 \001(\010\022"
  "#\n\033flag_debug_no_run_app_start\030\002 \001(\010\022\"\n\032"
  "flag_debug_no_run_app_init\030\003 \001(\010\022#\n\033flag"
  "_debug_no_run_linux_app\030\004 \001(\010\022\037\n\027flag_de"
  "bug_wifi_connect\030\005 \001(\010\022\"\n\032flag_debug_run"
  "_rid_capture\030\006 \001(\010\022(\n flag_debug_run_rid"
  "_capture_print\030\007 \001(\010\022\'\n\037flag_debug_no_re"
  "port_alink_info\030\010 \001(\010\022 \n\030flag_debug_tcp_"
  "client_ip\030\t \001(\010\022$\n\034flag_debug_droneid_ch"
  "eck_crc\030\n \001(\010\022\032\n\022flag_debug_droneid\030\013 \001("
  "\010\022\035\n\025flag_debug_no_fft_dma\030\014 \001(\010\022%\n\035flag"
  "_debug_disable_buzz_motor\030\r \001(\010\022\034\n\024isSup"
  "portSpectrogram\030\025 \001(\010\022+\n\017spectrogramAttr"
  "\030\026 \001(\0132\022.PbSpectrogramAttr\022\031\n\021isSupportA"
  "lgCache\030\027 \001(\010\022%\n\014algCacheAttr\030\030 \001(\0132\017.Pb"
  "AlgCacheAttr\022\032\n\022isSupportAlgExcept\030\031 \001(\010"
  "\022\'\n\ralgExceptAttr\030\032 \001(\0132\020.PbAlgExceptAtt"
  "rb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ProductDebugCfg_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ProductDebugCfg_2eproto = {
  false, false, 1049, descriptor_table_protodef_ProductDebugCfg_2eproto, "ProductDebugCfg.proto", 
  &descriptor_table_ProductDebugCfg_2eproto_once, nullptr, 0, 4,
  schemas, file_default_instances, TableStruct_ProductDebugCfg_2eproto::offsets,
  file_level_metadata_ProductDebugCfg_2eproto, file_level_enum_descriptors_ProductDebugCfg_2eproto, file_level_service_descriptors_ProductDebugCfg_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_ProductDebugCfg_2eproto_getter() {
  return &descriptor_table_ProductDebugCfg_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_ProductDebugCfg_2eproto(&descriptor_table_ProductDebugCfg_2eproto);

// ===================================================================

class PbSpectrogramAttr::_Internal {
 public:
};

PbSpectrogramAttr::PbSpectrogramAttr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PbSpectrogramAttr)
}
PbSpectrogramAttr::PbSpectrogramAttr(const PbSpectrogramAttr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  file_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_file_path().empty()) {
    file_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_file_path(), 
      GetArenaForAllocation());
  }
  file_prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_file_prefix().empty()) {
    file_prefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_file_prefix(), 
      GetArenaForAllocation());
  }
  file_index_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_file_index().empty()) {
    file_index_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_file_index(), 
      GetArenaForAllocation());
  }
  file_max_num_ = from.file_max_num_;
  // @@protoc_insertion_point(copy_constructor:PbSpectrogramAttr)
}

void PbSpectrogramAttr::SharedCtor() {
file_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
file_prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
file_index_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
file_max_num_ = 0;
}

PbSpectrogramAttr::~PbSpectrogramAttr() {
  // @@protoc_insertion_point(destructor:PbSpectrogramAttr)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PbSpectrogramAttr::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  file_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_prefix_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_index_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PbSpectrogramAttr::ArenaDtor(void* object) {
  PbSpectrogramAttr* _this = reinterpret_cast< PbSpectrogramAttr* >(object);
  (void)_this;
}
void PbSpectrogramAttr::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PbSpectrogramAttr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PbSpectrogramAttr::Clear() {
// @@protoc_insertion_point(message_clear_start:PbSpectrogramAttr)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_path_.ClearToEmpty();
  file_prefix_.ClearToEmpty();
  file_index_.ClearToEmpty();
  file_max_num_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PbSpectrogramAttr::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string file_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_file_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PbSpectrogramAttr.file_path"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string file_prefix = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_file_prefix();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PbSpectrogramAttr.file_prefix"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string file_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_file_index();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PbSpectrogramAttr.file_index"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 file_max_num = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          file_max_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PbSpectrogramAttr::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PbSpectrogramAttr)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string file_path = 1;
  if (!this->_internal_file_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_path().data(), static_cast<int>(this->_internal_file_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PbSpectrogramAttr.file_path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_file_path(), target);
  }

  // string file_prefix = 2;
  if (!this->_internal_file_prefix().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_prefix().data(), static_cast<int>(this->_internal_file_prefix().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PbSpectrogramAttr.file_prefix");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_file_prefix(), target);
  }

  // string file_index = 3;
  if (!this->_internal_file_index().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_index().data(), static_cast<int>(this->_internal_file_index().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PbSpectrogramAttr.file_index");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_file_index(), target);
  }

  // int32 file_max_num = 4;
  if (this->_internal_file_max_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_file_max_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PbSpectrogramAttr)
  return target;
}

size_t PbSpectrogramAttr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PbSpectrogramAttr)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string file_path = 1;
  if (!this->_internal_file_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_path());
  }

  // string file_prefix = 2;
  if (!this->_internal_file_prefix().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_prefix());
  }

  // string file_index = 3;
  if (!this->_internal_file_index().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_index());
  }

  // int32 file_max_num = 4;
  if (this->_internal_file_max_num() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_file_max_num());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PbSpectrogramAttr::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PbSpectrogramAttr::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PbSpectrogramAttr::GetClassData() const { return &_class_data_; }

void PbSpectrogramAttr::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PbSpectrogramAttr *>(to)->MergeFrom(
      static_cast<const PbSpectrogramAttr &>(from));
}


void PbSpectrogramAttr::MergeFrom(const PbSpectrogramAttr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PbSpectrogramAttr)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_file_path().empty()) {
    _internal_set_file_path(from._internal_file_path());
  }
  if (!from._internal_file_prefix().empty()) {
    _internal_set_file_prefix(from._internal_file_prefix());
  }
  if (!from._internal_file_index().empty()) {
    _internal_set_file_index(from._internal_file_index());
  }
  if (from._internal_file_max_num() != 0) {
    _internal_set_file_max_num(from._internal_file_max_num());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PbSpectrogramAttr::CopyFrom(const PbSpectrogramAttr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PbSpectrogramAttr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbSpectrogramAttr::IsInitialized() const {
  return true;
}

void PbSpectrogramAttr::InternalSwap(PbSpectrogramAttr* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &file_path_, lhs_arena,
      &other->file_path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &file_prefix_, lhs_arena,
      &other->file_prefix_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &file_index_, lhs_arena,
      &other->file_index_, rhs_arena
  );
  swap(file_max_num_, other->file_max_num_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PbSpectrogramAttr::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ProductDebugCfg_2eproto_getter, &descriptor_table_ProductDebugCfg_2eproto_once,
      file_level_metadata_ProductDebugCfg_2eproto[0]);
}

// ===================================================================

class PbAlgCacheAttr::_Internal {
 public:
};

PbAlgCacheAttr::PbAlgCacheAttr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PbAlgCacheAttr)
}
PbAlgCacheAttr::PbAlgCacheAttr(const PbAlgCacheAttr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  file_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_file_path().empty()) {
    file_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_file_path(), 
      GetArenaForAllocation());
  }
  file_prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_file_prefix().empty()) {
    file_prefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_file_prefix(), 
      GetArenaForAllocation());
  }
  file_index_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_file_index().empty()) {
    file_index_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_file_index(), 
      GetArenaForAllocation());
  }
  ::memcpy(&file_max_num_, &from.file_max_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&frame_max_num_) -
    reinterpret_cast<char*>(&file_max_num_)) + sizeof(frame_max_num_));
  // @@protoc_insertion_point(copy_constructor:PbAlgCacheAttr)
}

void PbAlgCacheAttr::SharedCtor() {
file_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
file_prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
file_index_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&file_max_num_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&frame_max_num_) -
    reinterpret_cast<char*>(&file_max_num_)) + sizeof(frame_max_num_));
}

PbAlgCacheAttr::~PbAlgCacheAttr() {
  // @@protoc_insertion_point(destructor:PbAlgCacheAttr)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PbAlgCacheAttr::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  file_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_prefix_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_index_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PbAlgCacheAttr::ArenaDtor(void* object) {
  PbAlgCacheAttr* _this = reinterpret_cast< PbAlgCacheAttr* >(object);
  (void)_this;
}
void PbAlgCacheAttr::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PbAlgCacheAttr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PbAlgCacheAttr::Clear() {
// @@protoc_insertion_point(message_clear_start:PbAlgCacheAttr)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_path_.ClearToEmpty();
  file_prefix_.ClearToEmpty();
  file_index_.ClearToEmpty();
  ::memset(&file_max_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&frame_max_num_) -
      reinterpret_cast<char*>(&file_max_num_)) + sizeof(frame_max_num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PbAlgCacheAttr::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string file_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_file_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PbAlgCacheAttr.file_path"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string file_prefix = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_file_prefix();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PbAlgCacheAttr.file_prefix"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string file_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_file_index();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PbAlgCacheAttr.file_index"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 file_max_num = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          file_max_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 frame_max_num = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          frame_max_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PbAlgCacheAttr::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PbAlgCacheAttr)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string file_path = 1;
  if (!this->_internal_file_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_path().data(), static_cast<int>(this->_internal_file_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PbAlgCacheAttr.file_path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_file_path(), target);
  }

  // string file_prefix = 2;
  if (!this->_internal_file_prefix().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_prefix().data(), static_cast<int>(this->_internal_file_prefix().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PbAlgCacheAttr.file_prefix");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_file_prefix(), target);
  }

  // string file_index = 3;
  if (!this->_internal_file_index().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_index().data(), static_cast<int>(this->_internal_file_index().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PbAlgCacheAttr.file_index");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_file_index(), target);
  }

  // int32 file_max_num = 4;
  if (this->_internal_file_max_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_file_max_num(), target);
  }

  // int32 frame_max_num = 5;
  if (this->_internal_frame_max_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_frame_max_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PbAlgCacheAttr)
  return target;
}

size_t PbAlgCacheAttr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PbAlgCacheAttr)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string file_path = 1;
  if (!this->_internal_file_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_path());
  }

  // string file_prefix = 2;
  if (!this->_internal_file_prefix().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_prefix());
  }

  // string file_index = 3;
  if (!this->_internal_file_index().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_index());
  }

  // int32 file_max_num = 4;
  if (this->_internal_file_max_num() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_file_max_num());
  }

  // int32 frame_max_num = 5;
  if (this->_internal_frame_max_num() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_frame_max_num());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PbAlgCacheAttr::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PbAlgCacheAttr::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PbAlgCacheAttr::GetClassData() const { return &_class_data_; }

void PbAlgCacheAttr::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PbAlgCacheAttr *>(to)->MergeFrom(
      static_cast<const PbAlgCacheAttr &>(from));
}


void PbAlgCacheAttr::MergeFrom(const PbAlgCacheAttr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PbAlgCacheAttr)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_file_path().empty()) {
    _internal_set_file_path(from._internal_file_path());
  }
  if (!from._internal_file_prefix().empty()) {
    _internal_set_file_prefix(from._internal_file_prefix());
  }
  if (!from._internal_file_index().empty()) {
    _internal_set_file_index(from._internal_file_index());
  }
  if (from._internal_file_max_num() != 0) {
    _internal_set_file_max_num(from._internal_file_max_num());
  }
  if (from._internal_frame_max_num() != 0) {
    _internal_set_frame_max_num(from._internal_frame_max_num());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PbAlgCacheAttr::CopyFrom(const PbAlgCacheAttr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PbAlgCacheAttr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbAlgCacheAttr::IsInitialized() const {
  return true;
}

void PbAlgCacheAttr::InternalSwap(PbAlgCacheAttr* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &file_path_, lhs_arena,
      &other->file_path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &file_prefix_, lhs_arena,
      &other->file_prefix_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &file_index_, lhs_arena,
      &other->file_index_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PbAlgCacheAttr, frame_max_num_)
      + sizeof(PbAlgCacheAttr::frame_max_num_)
      - PROTOBUF_FIELD_OFFSET(PbAlgCacheAttr, file_max_num_)>(
          reinterpret_cast<char*>(&file_max_num_),
          reinterpret_cast<char*>(&other->file_max_num_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PbAlgCacheAttr::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ProductDebugCfg_2eproto_getter, &descriptor_table_ProductDebugCfg_2eproto_once,
      file_level_metadata_ProductDebugCfg_2eproto[1]);
}

// ===================================================================

class PbAlgExceptAttr::_Internal {
 public:
};

PbAlgExceptAttr::PbAlgExceptAttr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PbAlgExceptAttr)
}
PbAlgExceptAttr::PbAlgExceptAttr(const PbAlgExceptAttr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  file_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_file_path().empty()) {
    file_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_file_path(), 
      GetArenaForAllocation());
  }
  file_prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_file_prefix().empty()) {
    file_prefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_file_prefix(), 
      GetArenaForAllocation());
  }
  file_index_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_file_index().empty()) {
    file_index_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_file_index(), 
      GetArenaForAllocation());
  }
  file_max_num_ = from.file_max_num_;
  // @@protoc_insertion_point(copy_constructor:PbAlgExceptAttr)
}

void PbAlgExceptAttr::SharedCtor() {
file_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
file_prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
file_index_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
file_max_num_ = 0;
}

PbAlgExceptAttr::~PbAlgExceptAttr() {
  // @@protoc_insertion_point(destructor:PbAlgExceptAttr)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PbAlgExceptAttr::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  file_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_prefix_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_index_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PbAlgExceptAttr::ArenaDtor(void* object) {
  PbAlgExceptAttr* _this = reinterpret_cast< PbAlgExceptAttr* >(object);
  (void)_this;
}
void PbAlgExceptAttr::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PbAlgExceptAttr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PbAlgExceptAttr::Clear() {
// @@protoc_insertion_point(message_clear_start:PbAlgExceptAttr)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_path_.ClearToEmpty();
  file_prefix_.ClearToEmpty();
  file_index_.ClearToEmpty();
  file_max_num_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PbAlgExceptAttr::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string file_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_file_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PbAlgExceptAttr.file_path"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string file_prefix = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_file_prefix();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PbAlgExceptAttr.file_prefix"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string file_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_file_index();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PbAlgExceptAttr.file_index"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 file_max_num = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          file_max_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PbAlgExceptAttr::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PbAlgExceptAttr)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string file_path = 1;
  if (!this->_internal_file_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_path().data(), static_cast<int>(this->_internal_file_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PbAlgExceptAttr.file_path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_file_path(), target);
  }

  // string file_prefix = 2;
  if (!this->_internal_file_prefix().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_prefix().data(), static_cast<int>(this->_internal_file_prefix().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PbAlgExceptAttr.file_prefix");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_file_prefix(), target);
  }

  // string file_index = 3;
  if (!this->_internal_file_index().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_index().data(), static_cast<int>(this->_internal_file_index().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PbAlgExceptAttr.file_index");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_file_index(), target);
  }

  // int32 file_max_num = 4;
  if (this->_internal_file_max_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_file_max_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PbAlgExceptAttr)
  return target;
}

size_t PbAlgExceptAttr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PbAlgExceptAttr)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string file_path = 1;
  if (!this->_internal_file_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_path());
  }

  // string file_prefix = 2;
  if (!this->_internal_file_prefix().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_prefix());
  }

  // string file_index = 3;
  if (!this->_internal_file_index().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_index());
  }

  // int32 file_max_num = 4;
  if (this->_internal_file_max_num() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_file_max_num());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PbAlgExceptAttr::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PbAlgExceptAttr::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PbAlgExceptAttr::GetClassData() const { return &_class_data_; }

void PbAlgExceptAttr::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PbAlgExceptAttr *>(to)->MergeFrom(
      static_cast<const PbAlgExceptAttr &>(from));
}


void PbAlgExceptAttr::MergeFrom(const PbAlgExceptAttr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PbAlgExceptAttr)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_file_path().empty()) {
    _internal_set_file_path(from._internal_file_path());
  }
  if (!from._internal_file_prefix().empty()) {
    _internal_set_file_prefix(from._internal_file_prefix());
  }
  if (!from._internal_file_index().empty()) {
    _internal_set_file_index(from._internal_file_index());
  }
  if (from._internal_file_max_num() != 0) {
    _internal_set_file_max_num(from._internal_file_max_num());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PbAlgExceptAttr::CopyFrom(const PbAlgExceptAttr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PbAlgExceptAttr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbAlgExceptAttr::IsInitialized() const {
  return true;
}

void PbAlgExceptAttr::InternalSwap(PbAlgExceptAttr* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &file_path_, lhs_arena,
      &other->file_path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &file_prefix_, lhs_arena,
      &other->file_prefix_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &file_index_, lhs_arena,
      &other->file_index_, rhs_arena
  );
  swap(file_max_num_, other->file_max_num_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PbAlgExceptAttr::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ProductDebugCfg_2eproto_getter, &descriptor_table_ProductDebugCfg_2eproto_once,
      file_level_metadata_ProductDebugCfg_2eproto[2]);
}

// ===================================================================

class ProductDebugCfg::_Internal {
 public:
  static const ::PbSpectrogramAttr& spectrogramattr(const ProductDebugCfg* msg);
  static const ::PbAlgCacheAttr& algcacheattr(const ProductDebugCfg* msg);
  static const ::PbAlgExceptAttr& algexceptattr(const ProductDebugCfg* msg);
};

const ::PbSpectrogramAttr&
ProductDebugCfg::_Internal::spectrogramattr(const ProductDebugCfg* msg) {
  return *msg->spectrogramattr_;
}
const ::PbAlgCacheAttr&
ProductDebugCfg::_Internal::algcacheattr(const ProductDebugCfg* msg) {
  return *msg->algcacheattr_;
}
const ::PbAlgExceptAttr&
ProductDebugCfg::_Internal::algexceptattr(const ProductDebugCfg* msg) {
  return *msg->algexceptattr_;
}
ProductDebugCfg::ProductDebugCfg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ProductDebugCfg)
}
ProductDebugCfg::ProductDebugCfg(const ProductDebugCfg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_spectrogramattr()) {
    spectrogramattr_ = new ::PbSpectrogramAttr(*from.spectrogramattr_);
  } else {
    spectrogramattr_ = nullptr;
  }
  if (from._internal_has_algcacheattr()) {
    algcacheattr_ = new ::PbAlgCacheAttr(*from.algcacheattr_);
  } else {
    algcacheattr_ = nullptr;
  }
  if (from._internal_has_algexceptattr()) {
    algexceptattr_ = new ::PbAlgExceptAttr(*from.algexceptattr_);
  } else {
    algexceptattr_ = nullptr;
  }
  ::memcpy(&flag_debug_app_init_, &from.flag_debug_app_init_,
    static_cast<size_t>(reinterpret_cast<char*>(&issupportalgexcept_) -
    reinterpret_cast<char*>(&flag_debug_app_init_)) + sizeof(issupportalgexcept_));
  // @@protoc_insertion_point(copy_constructor:ProductDebugCfg)
}

void ProductDebugCfg::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&spectrogramattr_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&issupportalgexcept_) -
    reinterpret_cast<char*>(&spectrogramattr_)) + sizeof(issupportalgexcept_));
}

ProductDebugCfg::~ProductDebugCfg() {
  // @@protoc_insertion_point(destructor:ProductDebugCfg)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ProductDebugCfg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete spectrogramattr_;
  if (this != internal_default_instance()) delete algcacheattr_;
  if (this != internal_default_instance()) delete algexceptattr_;
}

void ProductDebugCfg::ArenaDtor(void* object) {
  ProductDebugCfg* _this = reinterpret_cast< ProductDebugCfg* >(object);
  (void)_this;
}
void ProductDebugCfg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProductDebugCfg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ProductDebugCfg::Clear() {
// @@protoc_insertion_point(message_clear_start:ProductDebugCfg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && spectrogramattr_ != nullptr) {
    delete spectrogramattr_;
  }
  spectrogramattr_ = nullptr;
  if (GetArenaForAllocation() == nullptr && algcacheattr_ != nullptr) {
    delete algcacheattr_;
  }
  algcacheattr_ = nullptr;
  if (GetArenaForAllocation() == nullptr && algexceptattr_ != nullptr) {
    delete algexceptattr_;
  }
  algexceptattr_ = nullptr;
  ::memset(&flag_debug_app_init_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&issupportalgexcept_) -
      reinterpret_cast<char*>(&flag_debug_app_init_)) + sizeof(issupportalgexcept_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProductDebugCfg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool flag_debug_app_init = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          flag_debug_app_init_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool flag_debug_no_run_app_start = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          flag_debug_no_run_app_start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool flag_debug_no_run_app_init = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          flag_debug_no_run_app_init_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool flag_debug_no_run_linux_app = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          flag_debug_no_run_linux_app_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool flag_debug_wifi_connect = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          flag_debug_wifi_connect_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool flag_debug_run_rid_capture = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          flag_debug_run_rid_capture_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool flag_debug_run_rid_capture_print = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          flag_debug_run_rid_capture_print_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool flag_debug_no_report_alink_info = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          flag_debug_no_report_alink_info_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool flag_debug_tcp_client_ip = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          flag_debug_tcp_client_ip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool flag_debug_droneid_check_crc = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          flag_debug_droneid_check_crc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool flag_debug_droneid = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          flag_debug_droneid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool flag_debug_no_fft_dma = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          flag_debug_no_fft_dma_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool flag_debug_disable_buzz_motor = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          flag_debug_disable_buzz_motor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool isSupportSpectrogram = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          issupportspectrogram_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .PbSpectrogramAttr spectrogramAttr = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_spectrogramattr(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool isSupportAlgCache = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          issupportalgcache_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .PbAlgCacheAttr algCacheAttr = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_algcacheattr(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool isSupportAlgExcept = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          issupportalgexcept_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .PbAlgExceptAttr algExceptAttr = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_algexceptattr(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProductDebugCfg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProductDebugCfg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool flag_debug_app_init = 1;
  if (this->_internal_flag_debug_app_init() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_flag_debug_app_init(), target);
  }

  // bool flag_debug_no_run_app_start = 2;
  if (this->_internal_flag_debug_no_run_app_start() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_flag_debug_no_run_app_start(), target);
  }

  // bool flag_debug_no_run_app_init = 3;
  if (this->_internal_flag_debug_no_run_app_init() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_flag_debug_no_run_app_init(), target);
  }

  // bool flag_debug_no_run_linux_app = 4;
  if (this->_internal_flag_debug_no_run_linux_app() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_flag_debug_no_run_linux_app(), target);
  }

  // bool flag_debug_wifi_connect = 5;
  if (this->_internal_flag_debug_wifi_connect() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_flag_debug_wifi_connect(), target);
  }

  // bool flag_debug_run_rid_capture = 6;
  if (this->_internal_flag_debug_run_rid_capture() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_flag_debug_run_rid_capture(), target);
  }

  // bool flag_debug_run_rid_capture_print = 7;
  if (this->_internal_flag_debug_run_rid_capture_print() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_flag_debug_run_rid_capture_print(), target);
  }

  // bool flag_debug_no_report_alink_info = 8;
  if (this->_internal_flag_debug_no_report_alink_info() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_flag_debug_no_report_alink_info(), target);
  }

  // bool flag_debug_tcp_client_ip = 9;
  if (this->_internal_flag_debug_tcp_client_ip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_flag_debug_tcp_client_ip(), target);
  }

  // bool flag_debug_droneid_check_crc = 10;
  if (this->_internal_flag_debug_droneid_check_crc() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_flag_debug_droneid_check_crc(), target);
  }

  // bool flag_debug_droneid = 11;
  if (this->_internal_flag_debug_droneid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_flag_debug_droneid(), target);
  }

  // bool flag_debug_no_fft_dma = 12;
  if (this->_internal_flag_debug_no_fft_dma() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_flag_debug_no_fft_dma(), target);
  }

  // bool flag_debug_disable_buzz_motor = 13;
  if (this->_internal_flag_debug_disable_buzz_motor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_flag_debug_disable_buzz_motor(), target);
  }

  // bool isSupportSpectrogram = 21;
  if (this->_internal_issupportspectrogram() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(21, this->_internal_issupportspectrogram(), target);
  }

  // .PbSpectrogramAttr spectrogramAttr = 22;
  if (this->_internal_has_spectrogramattr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::spectrogramattr(this), target, stream);
  }

  // bool isSupportAlgCache = 23;
  if (this->_internal_issupportalgcache() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(23, this->_internal_issupportalgcache(), target);
  }

  // .PbAlgCacheAttr algCacheAttr = 24;
  if (this->_internal_has_algcacheattr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        24, _Internal::algcacheattr(this), target, stream);
  }

  // bool isSupportAlgExcept = 25;
  if (this->_internal_issupportalgexcept() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(25, this->_internal_issupportalgexcept(), target);
  }

  // .PbAlgExceptAttr algExceptAttr = 26;
  if (this->_internal_has_algexceptattr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        26, _Internal::algexceptattr(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProductDebugCfg)
  return target;
}

size_t ProductDebugCfg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProductDebugCfg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PbSpectrogramAttr spectrogramAttr = 22;
  if (this->_internal_has_spectrogramattr()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *spectrogramattr_);
  }

  // .PbAlgCacheAttr algCacheAttr = 24;
  if (this->_internal_has_algcacheattr()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *algcacheattr_);
  }

  // .PbAlgExceptAttr algExceptAttr = 26;
  if (this->_internal_has_algexceptattr()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *algexceptattr_);
  }

  // bool flag_debug_app_init = 1;
  if (this->_internal_flag_debug_app_init() != 0) {
    total_size += 1 + 1;
  }

  // bool flag_debug_no_run_app_start = 2;
  if (this->_internal_flag_debug_no_run_app_start() != 0) {
    total_size += 1 + 1;
  }

  // bool flag_debug_no_run_app_init = 3;
  if (this->_internal_flag_debug_no_run_app_init() != 0) {
    total_size += 1 + 1;
  }

  // bool flag_debug_no_run_linux_app = 4;
  if (this->_internal_flag_debug_no_run_linux_app() != 0) {
    total_size += 1 + 1;
  }

  // bool flag_debug_wifi_connect = 5;
  if (this->_internal_flag_debug_wifi_connect() != 0) {
    total_size += 1 + 1;
  }

  // bool flag_debug_run_rid_capture = 6;
  if (this->_internal_flag_debug_run_rid_capture() != 0) {
    total_size += 1 + 1;
  }

  // bool flag_debug_run_rid_capture_print = 7;
  if (this->_internal_flag_debug_run_rid_capture_print() != 0) {
    total_size += 1 + 1;
  }

  // bool flag_debug_no_report_alink_info = 8;
  if (this->_internal_flag_debug_no_report_alink_info() != 0) {
    total_size += 1 + 1;
  }

  // bool flag_debug_tcp_client_ip = 9;
  if (this->_internal_flag_debug_tcp_client_ip() != 0) {
    total_size += 1 + 1;
  }

  // bool flag_debug_droneid_check_crc = 10;
  if (this->_internal_flag_debug_droneid_check_crc() != 0) {
    total_size += 1 + 1;
  }

  // bool flag_debug_droneid = 11;
  if (this->_internal_flag_debug_droneid() != 0) {
    total_size += 1 + 1;
  }

  // bool flag_debug_no_fft_dma = 12;
  if (this->_internal_flag_debug_no_fft_dma() != 0) {
    total_size += 1 + 1;
  }

  // bool flag_debug_disable_buzz_motor = 13;
  if (this->_internal_flag_debug_disable_buzz_motor() != 0) {
    total_size += 1 + 1;
  }

  // bool isSupportSpectrogram = 21;
  if (this->_internal_issupportspectrogram() != 0) {
    total_size += 2 + 1;
  }

  // bool isSupportAlgCache = 23;
  if (this->_internal_issupportalgcache() != 0) {
    total_size += 2 + 1;
  }

  // bool isSupportAlgExcept = 25;
  if (this->_internal_issupportalgexcept() != 0) {
    total_size += 2 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProductDebugCfg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ProductDebugCfg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProductDebugCfg::GetClassData() const { return &_class_data_; }

void ProductDebugCfg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ProductDebugCfg *>(to)->MergeFrom(
      static_cast<const ProductDebugCfg &>(from));
}


void ProductDebugCfg::MergeFrom(const ProductDebugCfg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProductDebugCfg)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_spectrogramattr()) {
    _internal_mutable_spectrogramattr()->::PbSpectrogramAttr::MergeFrom(from._internal_spectrogramattr());
  }
  if (from._internal_has_algcacheattr()) {
    _internal_mutable_algcacheattr()->::PbAlgCacheAttr::MergeFrom(from._internal_algcacheattr());
  }
  if (from._internal_has_algexceptattr()) {
    _internal_mutable_algexceptattr()->::PbAlgExceptAttr::MergeFrom(from._internal_algexceptattr());
  }
  if (from._internal_flag_debug_app_init() != 0) {
    _internal_set_flag_debug_app_init(from._internal_flag_debug_app_init());
  }
  if (from._internal_flag_debug_no_run_app_start() != 0) {
    _internal_set_flag_debug_no_run_app_start(from._internal_flag_debug_no_run_app_start());
  }
  if (from._internal_flag_debug_no_run_app_init() != 0) {
    _internal_set_flag_debug_no_run_app_init(from._internal_flag_debug_no_run_app_init());
  }
  if (from._internal_flag_debug_no_run_linux_app() != 0) {
    _internal_set_flag_debug_no_run_linux_app(from._internal_flag_debug_no_run_linux_app());
  }
  if (from._internal_flag_debug_wifi_connect() != 0) {
    _internal_set_flag_debug_wifi_connect(from._internal_flag_debug_wifi_connect());
  }
  if (from._internal_flag_debug_run_rid_capture() != 0) {
    _internal_set_flag_debug_run_rid_capture(from._internal_flag_debug_run_rid_capture());
  }
  if (from._internal_flag_debug_run_rid_capture_print() != 0) {
    _internal_set_flag_debug_run_rid_capture_print(from._internal_flag_debug_run_rid_capture_print());
  }
  if (from._internal_flag_debug_no_report_alink_info() != 0) {
    _internal_set_flag_debug_no_report_alink_info(from._internal_flag_debug_no_report_alink_info());
  }
  if (from._internal_flag_debug_tcp_client_ip() != 0) {
    _internal_set_flag_debug_tcp_client_ip(from._internal_flag_debug_tcp_client_ip());
  }
  if (from._internal_flag_debug_droneid_check_crc() != 0) {
    _internal_set_flag_debug_droneid_check_crc(from._internal_flag_debug_droneid_check_crc());
  }
  if (from._internal_flag_debug_droneid() != 0) {
    _internal_set_flag_debug_droneid(from._internal_flag_debug_droneid());
  }
  if (from._internal_flag_debug_no_fft_dma() != 0) {
    _internal_set_flag_debug_no_fft_dma(from._internal_flag_debug_no_fft_dma());
  }
  if (from._internal_flag_debug_disable_buzz_motor() != 0) {
    _internal_set_flag_debug_disable_buzz_motor(from._internal_flag_debug_disable_buzz_motor());
  }
  if (from._internal_issupportspectrogram() != 0) {
    _internal_set_issupportspectrogram(from._internal_issupportspectrogram());
  }
  if (from._internal_issupportalgcache() != 0) {
    _internal_set_issupportalgcache(from._internal_issupportalgcache());
  }
  if (from._internal_issupportalgexcept() != 0) {
    _internal_set_issupportalgexcept(from._internal_issupportalgexcept());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProductDebugCfg::CopyFrom(const ProductDebugCfg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProductDebugCfg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProductDebugCfg::IsInitialized() const {
  return true;
}

void ProductDebugCfg::InternalSwap(ProductDebugCfg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProductDebugCfg, issupportalgexcept_)
      + sizeof(ProductDebugCfg::issupportalgexcept_)
      - PROTOBUF_FIELD_OFFSET(ProductDebugCfg, spectrogramattr_)>(
          reinterpret_cast<char*>(&spectrogramattr_),
          reinterpret_cast<char*>(&other->spectrogramattr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProductDebugCfg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ProductDebugCfg_2eproto_getter, &descriptor_table_ProductDebugCfg_2eproto_once,
      file_level_metadata_ProductDebugCfg_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::PbSpectrogramAttr* Arena::CreateMaybeMessage< ::PbSpectrogramAttr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PbSpectrogramAttr >(arena);
}
template<> PROTOBUF_NOINLINE ::PbAlgCacheAttr* Arena::CreateMaybeMessage< ::PbAlgCacheAttr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PbAlgCacheAttr >(arena);
}
template<> PROTOBUF_NOINLINE ::PbAlgExceptAttr* Arena::CreateMaybeMessage< ::PbAlgExceptAttr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PbAlgExceptAttr >(arena);
}
template<> PROTOBUF_NOINLINE ::ProductDebugCfg* Arena::CreateMaybeMessage< ::ProductDebugCfg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProductDebugCfg >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
