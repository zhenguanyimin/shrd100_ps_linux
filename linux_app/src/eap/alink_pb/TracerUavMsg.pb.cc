// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TracerUavMsg.proto

#include "TracerUavMsg.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace protobuf {
namespace traceruav {
constexpr CtrlWorkModePB::CtrlWorkModePB(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : workmode_(0u)
  , dxnum_(0u)
  , dxfreq_(0u){}
struct CtrlWorkModePBDefaultTypeInternal {
  constexpr CtrlWorkModePBDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CtrlWorkModePBDefaultTypeInternal() {}
  union {
    CtrlWorkModePB _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CtrlWorkModePBDefaultTypeInternal _CtrlWorkModePB_default_instance_;
constexpr FlyStatusPB::FlyStatusPB(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : yaw_(0)
  , pitch_(0)
  , roll_(0)
  , wy_(0)
  , wp_(0)
  , wr_(0)
  , longitude_(int64_t{0})
  , latitude_(int64_t{0})
  , altitude_(int64_t{0})
  , vx_(0)
  , vy_(0)
  , vz_(0){}
struct FlyStatusPBDefaultTypeInternal {
  constexpr FlyStatusPBDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FlyStatusPBDefaultTypeInternal() {}
  union {
    FlyStatusPB _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FlyStatusPBDefaultTypeInternal _FlyStatusPB_default_instance_;
constexpr MeasureInfoPb_MeasureInfoData::MeasureInfoPb_MeasureInfoData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tnum_(0u)
  , tfreq_(0u)
  , tamp_(0u)
  , tmfw_(0)
  , tmfy_(0)
  , tffw_(0)
  , tffy_(0){}
struct MeasureInfoPb_MeasureInfoDataDefaultTypeInternal {
  constexpr MeasureInfoPb_MeasureInfoDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MeasureInfoPb_MeasureInfoDataDefaultTypeInternal() {}
  union {
    MeasureInfoPb_MeasureInfoData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MeasureInfoPb_MeasureInfoDataDefaultTypeInternal _MeasureInfoPb_MeasureInfoData_default_instance_;
constexpr MeasureInfoPb::MeasureInfoPb(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : meainfodata_()
  , workstatus_(0u)
  , tarnum_(0u){}
struct MeasureInfoPbDefaultTypeInternal {
  constexpr MeasureInfoPbDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MeasureInfoPbDefaultTypeInternal() {}
  union {
    MeasureInfoPb _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MeasureInfoPbDefaultTypeInternal _MeasureInfoPb_default_instance_;
constexpr TracerUavMessagePB::TracerUavMessagePB(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msgchannel_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , msgname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , workmode_(nullptr)
  , flystatus_(nullptr)
  , measureinfo_(nullptr)
  , msgtype_(0)

  , msghandle_(0u)
  , msgseq_(0u){}
struct TracerUavMessagePBDefaultTypeInternal {
  constexpr TracerUavMessagePBDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TracerUavMessagePBDefaultTypeInternal() {}
  union {
    TracerUavMessagePB _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TracerUavMessagePBDefaultTypeInternal _TracerUavMessagePB_default_instance_;
constexpr AngleInfoPB::AngleInfoPB(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : roll_(0)
  , pitch_(0)
  , yaw_(0){}
struct AngleInfoPBDefaultTypeInternal {
  constexpr AngleInfoPBDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AngleInfoPBDefaultTypeInternal() {}
  union {
    AngleInfoPB _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AngleInfoPBDefaultTypeInternal _AngleInfoPB_default_instance_;
}  // namespace traceruav
}  // namespace protobuf
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_TracerUavMsg_2eproto[6];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_TracerUavMsg_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_TracerUavMsg_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_TracerUavMsg_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobuf::traceruav::CtrlWorkModePB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf::traceruav::CtrlWorkModePB, workmode_),
  PROTOBUF_FIELD_OFFSET(::protobuf::traceruav::CtrlWorkModePB, dxnum_),
  PROTOBUF_FIELD_OFFSET(::protobuf::traceruav::CtrlWorkModePB, dxfreq_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobuf::traceruav::FlyStatusPB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf::traceruav::FlyStatusPB, yaw_),
  PROTOBUF_FIELD_OFFSET(::protobuf::traceruav::FlyStatusPB, pitch_),
  PROTOBUF_FIELD_OFFSET(::protobuf::traceruav::FlyStatusPB, roll_),
  PROTOBUF_FIELD_OFFSET(::protobuf::traceruav::FlyStatusPB, wy_),
  PROTOBUF_FIELD_OFFSET(::protobuf::traceruav::FlyStatusPB, wp_),
  PROTOBUF_FIELD_OFFSET(::protobuf::traceruav::FlyStatusPB, wr_),
  PROTOBUF_FIELD_OFFSET(::protobuf::traceruav::FlyStatusPB, longitude_),
  PROTOBUF_FIELD_OFFSET(::protobuf::traceruav::FlyStatusPB, latitude_),
  PROTOBUF_FIELD_OFFSET(::protobuf::traceruav::FlyStatusPB, altitude_),
  PROTOBUF_FIELD_OFFSET(::protobuf::traceruav::FlyStatusPB, vx_),
  PROTOBUF_FIELD_OFFSET(::protobuf::traceruav::FlyStatusPB, vy_),
  PROTOBUF_FIELD_OFFSET(::protobuf::traceruav::FlyStatusPB, vz_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobuf::traceruav::MeasureInfoPb_MeasureInfoData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf::traceruav::MeasureInfoPb_MeasureInfoData, tnum_),
  PROTOBUF_FIELD_OFFSET(::protobuf::traceruav::MeasureInfoPb_MeasureInfoData, tfreq_),
  PROTOBUF_FIELD_OFFSET(::protobuf::traceruav::MeasureInfoPb_MeasureInfoData, tamp_),
  PROTOBUF_FIELD_OFFSET(::protobuf::traceruav::MeasureInfoPb_MeasureInfoData, tmfw_),
  PROTOBUF_FIELD_OFFSET(::protobuf::traceruav::MeasureInfoPb_MeasureInfoData, tmfy_),
  PROTOBUF_FIELD_OFFSET(::protobuf::traceruav::MeasureInfoPb_MeasureInfoData, tffw_),
  PROTOBUF_FIELD_OFFSET(::protobuf::traceruav::MeasureInfoPb_MeasureInfoData, tffy_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobuf::traceruav::MeasureInfoPb, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf::traceruav::MeasureInfoPb, workstatus_),
  PROTOBUF_FIELD_OFFSET(::protobuf::traceruav::MeasureInfoPb, tarnum_),
  PROTOBUF_FIELD_OFFSET(::protobuf::traceruav::MeasureInfoPb, meainfodata_),
  PROTOBUF_FIELD_OFFSET(::protobuf::traceruav::TracerUavMessagePB, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf::traceruav::TracerUavMessagePB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf::traceruav::TracerUavMessagePB, msgchannel_),
  PROTOBUF_FIELD_OFFSET(::protobuf::traceruav::TracerUavMessagePB, msgtype_),
  PROTOBUF_FIELD_OFFSET(::protobuf::traceruav::TracerUavMessagePB, msgname_),
  PROTOBUF_FIELD_OFFSET(::protobuf::traceruav::TracerUavMessagePB, msghandle_),
  PROTOBUF_FIELD_OFFSET(::protobuf::traceruav::TracerUavMessagePB, msgseq_),
  PROTOBUF_FIELD_OFFSET(::protobuf::traceruav::TracerUavMessagePB, workmode_),
  PROTOBUF_FIELD_OFFSET(::protobuf::traceruav::TracerUavMessagePB, flystatus_),
  PROTOBUF_FIELD_OFFSET(::protobuf::traceruav::TracerUavMessagePB, measureinfo_),
  ~0u,
  ~0u,
  0,
  ~0u,
  ~0u,
  1,
  2,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobuf::traceruav::AngleInfoPB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf::traceruav::AngleInfoPB, roll_),
  PROTOBUF_FIELD_OFFSET(::protobuf::traceruav::AngleInfoPB, pitch_),
  PROTOBUF_FIELD_OFFSET(::protobuf::traceruav::AngleInfoPB, yaw_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::protobuf::traceruav::CtrlWorkModePB)},
  { 9, -1, -1, sizeof(::protobuf::traceruav::FlyStatusPB)},
  { 27, -1, -1, sizeof(::protobuf::traceruav::MeasureInfoPb_MeasureInfoData)},
  { 40, -1, -1, sizeof(::protobuf::traceruav::MeasureInfoPb)},
  { 49, 63, -1, sizeof(::protobuf::traceruav::TracerUavMessagePB)},
  { 71, -1, -1, sizeof(::protobuf::traceruav::AngleInfoPB)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf::traceruav::_CtrlWorkModePB_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf::traceruav::_FlyStatusPB_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf::traceruav::_MeasureInfoPb_MeasureInfoData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf::traceruav::_MeasureInfoPb_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf::traceruav::_TracerUavMessagePB_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf::traceruav::_AngleInfoPB_default_instance_),
};

const char descriptor_table_protodef_TracerUavMsg_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022TracerUavMsg.proto\022\022protobuf.traceruav"
  "\"A\n\016CtrlWorkModePB\022\020\n\010workMode\030\002 \001(\r\022\r\n\005"
  "dxNum\030\003 \001(\r\022\016\n\006dxFreq\030\004 \001(\r\"\266\001\n\013FlyStatu"
  "sPB\022\013\n\003yaw\030\002 \001(\021\022\r\n\005pitch\030\003 \001(\021\022\014\n\004roll\030"
  "\004 \001(\021\022\n\n\002wY\030\005 \001(\021\022\n\n\002wP\030\006 \001(\021\022\n\n\002wR\030\007 \001("
  "\021\022\021\n\tlongitude\030\010 \001(\022\022\020\n\010latitude\030\t \001(\022\022\020"
  "\n\010altitude\030\n \001(\022\022\n\n\002vX\030\013 \001(\021\022\n\n\002vY\030\014 \001(\021"
  "\022\n\n\002vZ\030\r \001(\021\"\361\001\n\rMeasureInfoPb\022\022\n\nworkSt"
  "atus\030\002 \001(\r\022\016\n\006tarNum\030\003 \001(\r\022F\n\013meaInfoDat"
  "a\030\004 \003(\01321.protobuf.traceruav.MeasureInfo"
  "Pb.MeasureInfoData\032t\n\017MeasureInfoData\022\014\n"
  "\004tNum\030\002 \001(\r\022\r\n\005tFreq\030\003 \001(\r\022\014\n\004tAmp\030\004 \001(\r"
  "\022\014\n\004tmFw\030\005 \001(\021\022\014\n\004tmFy\030\006 \001(\021\022\014\n\004tfFw\030\007 \001"
  "(\021\022\014\n\004tfFy\030\010 \001(\021\"\373\002\n\022TracerUavMessagePB\022"
  "\022\n\nmsgChannel\030\002 \001(\t\0220\n\007msgType\030\003 \001(\0162\037.p"
  "rotobuf.traceruav.MessageType\022\024\n\007msgName"
  "\030\004 \001(\tH\000\210\001\001\022\021\n\tmsgHandle\030\005 \001(\r\022\016\n\006msgSeq"
  "\030\006 \001(\r\0229\n\010workMode\030\n \001(\0132\".protobuf.trac"
  "eruav.CtrlWorkModePBH\001\210\001\001\0227\n\tflyStatus\030\013"
  " \001(\0132\037.protobuf.traceruav.FlyStatusPBH\002\210"
  "\001\001\022;\n\013measureInfo\030\014 \001(\0132!.protobuf.trace"
  "ruav.MeasureInfoPbH\003\210\001\001B\n\n\010_msgNameB\013\n\t_"
  "workModeB\014\n\n_flyStatusB\016\n\014_measureInfo\"7"
  "\n\013AngleInfoPB\022\014\n\004roll\030\002 \001(\002\022\r\n\005pitch\030\003 \001"
  "(\002\022\013\n\003yaw\030\004 \001(\002*\221\001\n\013MessageType\022\033\n\027TRACE"
  "RUAVMSG_HEART_BEAT\020\000\022\037\n\033TRACERUAVMSG_WOR"
  "K_MODE_TYPE\020\001\022 \n\034TRACERUAVMSG_FLY_STATUS"
  "_TYPE\020\002\022\"\n\036TRACERUAVMSG_MEASURE_INFO_TYP"
  "E\020\003b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_TracerUavMsg_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_TracerUavMsg_2eproto = {
  false, false, 1131, descriptor_table_protodef_TracerUavMsg_2eproto, "TracerUavMsg.proto", 
  &descriptor_table_TracerUavMsg_2eproto_once, nullptr, 0, 6,
  schemas, file_default_instances, TableStruct_TracerUavMsg_2eproto::offsets,
  file_level_metadata_TracerUavMsg_2eproto, file_level_enum_descriptors_TracerUavMsg_2eproto, file_level_service_descriptors_TracerUavMsg_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_TracerUavMsg_2eproto_getter() {
  return &descriptor_table_TracerUavMsg_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_TracerUavMsg_2eproto(&descriptor_table_TracerUavMsg_2eproto);
namespace protobuf {
namespace traceruav {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TracerUavMsg_2eproto);
  return file_level_enum_descriptors_TracerUavMsg_2eproto[0];
}
bool MessageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CtrlWorkModePB::_Internal {
 public:
};

CtrlWorkModePB::CtrlWorkModePB(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protobuf.traceruav.CtrlWorkModePB)
}
CtrlWorkModePB::CtrlWorkModePB(const CtrlWorkModePB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&workmode_, &from.workmode_,
    static_cast<size_t>(reinterpret_cast<char*>(&dxfreq_) -
    reinterpret_cast<char*>(&workmode_)) + sizeof(dxfreq_));
  // @@protoc_insertion_point(copy_constructor:protobuf.traceruav.CtrlWorkModePB)
}

void CtrlWorkModePB::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&workmode_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&dxfreq_) -
    reinterpret_cast<char*>(&workmode_)) + sizeof(dxfreq_));
}

CtrlWorkModePB::~CtrlWorkModePB() {
  // @@protoc_insertion_point(destructor:protobuf.traceruav.CtrlWorkModePB)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CtrlWorkModePB::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CtrlWorkModePB::ArenaDtor(void* object) {
  CtrlWorkModePB* _this = reinterpret_cast< CtrlWorkModePB* >(object);
  (void)_this;
}
void CtrlWorkModePB::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CtrlWorkModePB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CtrlWorkModePB::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.traceruav.CtrlWorkModePB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&workmode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dxfreq_) -
      reinterpret_cast<char*>(&workmode_)) + sizeof(dxfreq_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CtrlWorkModePB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 workMode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          workmode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 dxNum = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          dxnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 dxFreq = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          dxfreq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CtrlWorkModePB::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.traceruav.CtrlWorkModePB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 workMode = 2;
  if (this->_internal_workmode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_workmode(), target);
  }

  // uint32 dxNum = 3;
  if (this->_internal_dxnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_dxnum(), target);
  }

  // uint32 dxFreq = 4;
  if (this->_internal_dxfreq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_dxfreq(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.traceruav.CtrlWorkModePB)
  return target;
}

size_t CtrlWorkModePB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.traceruav.CtrlWorkModePB)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 workMode = 2;
  if (this->_internal_workmode() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_workmode());
  }

  // uint32 dxNum = 3;
  if (this->_internal_dxnum() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_dxnum());
  }

  // uint32 dxFreq = 4;
  if (this->_internal_dxfreq() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_dxfreq());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CtrlWorkModePB::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CtrlWorkModePB::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CtrlWorkModePB::GetClassData() const { return &_class_data_; }

void CtrlWorkModePB::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CtrlWorkModePB *>(to)->MergeFrom(
      static_cast<const CtrlWorkModePB &>(from));
}


void CtrlWorkModePB::MergeFrom(const CtrlWorkModePB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf.traceruav.CtrlWorkModePB)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_workmode() != 0) {
    _internal_set_workmode(from._internal_workmode());
  }
  if (from._internal_dxnum() != 0) {
    _internal_set_dxnum(from._internal_dxnum());
  }
  if (from._internal_dxfreq() != 0) {
    _internal_set_dxfreq(from._internal_dxfreq());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CtrlWorkModePB::CopyFrom(const CtrlWorkModePB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.traceruav.CtrlWorkModePB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CtrlWorkModePB::IsInitialized() const {
  return true;
}

void CtrlWorkModePB::InternalSwap(CtrlWorkModePB* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CtrlWorkModePB, dxfreq_)
      + sizeof(CtrlWorkModePB::dxfreq_)
      - PROTOBUF_FIELD_OFFSET(CtrlWorkModePB, workmode_)>(
          reinterpret_cast<char*>(&workmode_),
          reinterpret_cast<char*>(&other->workmode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CtrlWorkModePB::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TracerUavMsg_2eproto_getter, &descriptor_table_TracerUavMsg_2eproto_once,
      file_level_metadata_TracerUavMsg_2eproto[0]);
}

// ===================================================================

class FlyStatusPB::_Internal {
 public:
};

FlyStatusPB::FlyStatusPB(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protobuf.traceruav.FlyStatusPB)
}
FlyStatusPB::FlyStatusPB(const FlyStatusPB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&yaw_, &from.yaw_,
    static_cast<size_t>(reinterpret_cast<char*>(&vz_) -
    reinterpret_cast<char*>(&yaw_)) + sizeof(vz_));
  // @@protoc_insertion_point(copy_constructor:protobuf.traceruav.FlyStatusPB)
}

void FlyStatusPB::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&yaw_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&vz_) -
    reinterpret_cast<char*>(&yaw_)) + sizeof(vz_));
}

FlyStatusPB::~FlyStatusPB() {
  // @@protoc_insertion_point(destructor:protobuf.traceruav.FlyStatusPB)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FlyStatusPB::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FlyStatusPB::ArenaDtor(void* object) {
  FlyStatusPB* _this = reinterpret_cast< FlyStatusPB* >(object);
  (void)_this;
}
void FlyStatusPB::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FlyStatusPB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FlyStatusPB::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.traceruav.FlyStatusPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&yaw_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vz_) -
      reinterpret_cast<char*>(&yaw_)) + sizeof(vz_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FlyStatusPB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // sint32 yaw = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 pitch = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          pitch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 roll = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          roll_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 wY = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          wy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 wP = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          wp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 wR = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          wr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint64 longitude = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint64 latitude = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint64 altitude = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          altitude_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 vX = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          vx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 vY = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          vy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 vZ = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          vz_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FlyStatusPB::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.traceruav.FlyStatusPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 yaw = 2;
  if (this->_internal_yaw() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(2, this->_internal_yaw(), target);
  }

  // sint32 pitch = 3;
  if (this->_internal_pitch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(3, this->_internal_pitch(), target);
  }

  // sint32 roll = 4;
  if (this->_internal_roll() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(4, this->_internal_roll(), target);
  }

  // sint32 wY = 5;
  if (this->_internal_wy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(5, this->_internal_wy(), target);
  }

  // sint32 wP = 6;
  if (this->_internal_wp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(6, this->_internal_wp(), target);
  }

  // sint32 wR = 7;
  if (this->_internal_wr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(7, this->_internal_wr(), target);
  }

  // sint64 longitude = 8;
  if (this->_internal_longitude() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt64ToArray(8, this->_internal_longitude(), target);
  }

  // sint64 latitude = 9;
  if (this->_internal_latitude() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt64ToArray(9, this->_internal_latitude(), target);
  }

  // sint64 altitude = 10;
  if (this->_internal_altitude() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt64ToArray(10, this->_internal_altitude(), target);
  }

  // sint32 vX = 11;
  if (this->_internal_vx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(11, this->_internal_vx(), target);
  }

  // sint32 vY = 12;
  if (this->_internal_vy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(12, this->_internal_vy(), target);
  }

  // sint32 vZ = 13;
  if (this->_internal_vz() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(13, this->_internal_vz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.traceruav.FlyStatusPB)
  return target;
}

size_t FlyStatusPB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.traceruav.FlyStatusPB)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // sint32 yaw = 2;
  if (this->_internal_yaw() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32SizePlusOne(this->_internal_yaw());
  }

  // sint32 pitch = 3;
  if (this->_internal_pitch() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32SizePlusOne(this->_internal_pitch());
  }

  // sint32 roll = 4;
  if (this->_internal_roll() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32SizePlusOne(this->_internal_roll());
  }

  // sint32 wY = 5;
  if (this->_internal_wy() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32SizePlusOne(this->_internal_wy());
  }

  // sint32 wP = 6;
  if (this->_internal_wp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32SizePlusOne(this->_internal_wp());
  }

  // sint32 wR = 7;
  if (this->_internal_wr() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32SizePlusOne(this->_internal_wr());
  }

  // sint64 longitude = 8;
  if (this->_internal_longitude() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt64SizePlusOne(this->_internal_longitude());
  }

  // sint64 latitude = 9;
  if (this->_internal_latitude() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt64SizePlusOne(this->_internal_latitude());
  }

  // sint64 altitude = 10;
  if (this->_internal_altitude() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt64SizePlusOne(this->_internal_altitude());
  }

  // sint32 vX = 11;
  if (this->_internal_vx() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32SizePlusOne(this->_internal_vx());
  }

  // sint32 vY = 12;
  if (this->_internal_vy() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32SizePlusOne(this->_internal_vy());
  }

  // sint32 vZ = 13;
  if (this->_internal_vz() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32SizePlusOne(this->_internal_vz());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FlyStatusPB::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FlyStatusPB::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FlyStatusPB::GetClassData() const { return &_class_data_; }

void FlyStatusPB::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FlyStatusPB *>(to)->MergeFrom(
      static_cast<const FlyStatusPB &>(from));
}


void FlyStatusPB::MergeFrom(const FlyStatusPB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf.traceruav.FlyStatusPB)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_yaw() != 0) {
    _internal_set_yaw(from._internal_yaw());
  }
  if (from._internal_pitch() != 0) {
    _internal_set_pitch(from._internal_pitch());
  }
  if (from._internal_roll() != 0) {
    _internal_set_roll(from._internal_roll());
  }
  if (from._internal_wy() != 0) {
    _internal_set_wy(from._internal_wy());
  }
  if (from._internal_wp() != 0) {
    _internal_set_wp(from._internal_wp());
  }
  if (from._internal_wr() != 0) {
    _internal_set_wr(from._internal_wr());
  }
  if (from._internal_longitude() != 0) {
    _internal_set_longitude(from._internal_longitude());
  }
  if (from._internal_latitude() != 0) {
    _internal_set_latitude(from._internal_latitude());
  }
  if (from._internal_altitude() != 0) {
    _internal_set_altitude(from._internal_altitude());
  }
  if (from._internal_vx() != 0) {
    _internal_set_vx(from._internal_vx());
  }
  if (from._internal_vy() != 0) {
    _internal_set_vy(from._internal_vy());
  }
  if (from._internal_vz() != 0) {
    _internal_set_vz(from._internal_vz());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FlyStatusPB::CopyFrom(const FlyStatusPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.traceruav.FlyStatusPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlyStatusPB::IsInitialized() const {
  return true;
}

void FlyStatusPB::InternalSwap(FlyStatusPB* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FlyStatusPB, vz_)
      + sizeof(FlyStatusPB::vz_)
      - PROTOBUF_FIELD_OFFSET(FlyStatusPB, yaw_)>(
          reinterpret_cast<char*>(&yaw_),
          reinterpret_cast<char*>(&other->yaw_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FlyStatusPB::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TracerUavMsg_2eproto_getter, &descriptor_table_TracerUavMsg_2eproto_once,
      file_level_metadata_TracerUavMsg_2eproto[1]);
}

// ===================================================================

class MeasureInfoPb_MeasureInfoData::_Internal {
 public:
};

MeasureInfoPb_MeasureInfoData::MeasureInfoPb_MeasureInfoData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protobuf.traceruav.MeasureInfoPb.MeasureInfoData)
}
MeasureInfoPb_MeasureInfoData::MeasureInfoPb_MeasureInfoData(const MeasureInfoPb_MeasureInfoData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&tnum_, &from.tnum_,
    static_cast<size_t>(reinterpret_cast<char*>(&tffy_) -
    reinterpret_cast<char*>(&tnum_)) + sizeof(tffy_));
  // @@protoc_insertion_point(copy_constructor:protobuf.traceruav.MeasureInfoPb.MeasureInfoData)
}

void MeasureInfoPb_MeasureInfoData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&tnum_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&tffy_) -
    reinterpret_cast<char*>(&tnum_)) + sizeof(tffy_));
}

MeasureInfoPb_MeasureInfoData::~MeasureInfoPb_MeasureInfoData() {
  // @@protoc_insertion_point(destructor:protobuf.traceruav.MeasureInfoPb.MeasureInfoData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MeasureInfoPb_MeasureInfoData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MeasureInfoPb_MeasureInfoData::ArenaDtor(void* object) {
  MeasureInfoPb_MeasureInfoData* _this = reinterpret_cast< MeasureInfoPb_MeasureInfoData* >(object);
  (void)_this;
}
void MeasureInfoPb_MeasureInfoData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MeasureInfoPb_MeasureInfoData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MeasureInfoPb_MeasureInfoData::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.traceruav.MeasureInfoPb.MeasureInfoData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&tnum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tffy_) -
      reinterpret_cast<char*>(&tnum_)) + sizeof(tffy_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MeasureInfoPb_MeasureInfoData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 tNum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          tnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 tFreq = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          tfreq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 tAmp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          tamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 tmFw = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          tmfw_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 tmFy = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          tmfy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 tfFw = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          tffw_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 tfFy = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          tffy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MeasureInfoPb_MeasureInfoData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.traceruav.MeasureInfoPb.MeasureInfoData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 tNum = 2;
  if (this->_internal_tnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_tnum(), target);
  }

  // uint32 tFreq = 3;
  if (this->_internal_tfreq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_tfreq(), target);
  }

  // uint32 tAmp = 4;
  if (this->_internal_tamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_tamp(), target);
  }

  // sint32 tmFw = 5;
  if (this->_internal_tmfw() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(5, this->_internal_tmfw(), target);
  }

  // sint32 tmFy = 6;
  if (this->_internal_tmfy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(6, this->_internal_tmfy(), target);
  }

  // sint32 tfFw = 7;
  if (this->_internal_tffw() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(7, this->_internal_tffw(), target);
  }

  // sint32 tfFy = 8;
  if (this->_internal_tffy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(8, this->_internal_tffy(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.traceruav.MeasureInfoPb.MeasureInfoData)
  return target;
}

size_t MeasureInfoPb_MeasureInfoData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.traceruav.MeasureInfoPb.MeasureInfoData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 tNum = 2;
  if (this->_internal_tnum() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_tnum());
  }

  // uint32 tFreq = 3;
  if (this->_internal_tfreq() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_tfreq());
  }

  // uint32 tAmp = 4;
  if (this->_internal_tamp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_tamp());
  }

  // sint32 tmFw = 5;
  if (this->_internal_tmfw() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32SizePlusOne(this->_internal_tmfw());
  }

  // sint32 tmFy = 6;
  if (this->_internal_tmfy() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32SizePlusOne(this->_internal_tmfy());
  }

  // sint32 tfFw = 7;
  if (this->_internal_tffw() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32SizePlusOne(this->_internal_tffw());
  }

  // sint32 tfFy = 8;
  if (this->_internal_tffy() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32SizePlusOne(this->_internal_tffy());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MeasureInfoPb_MeasureInfoData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MeasureInfoPb_MeasureInfoData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MeasureInfoPb_MeasureInfoData::GetClassData() const { return &_class_data_; }

void MeasureInfoPb_MeasureInfoData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MeasureInfoPb_MeasureInfoData *>(to)->MergeFrom(
      static_cast<const MeasureInfoPb_MeasureInfoData &>(from));
}


void MeasureInfoPb_MeasureInfoData::MergeFrom(const MeasureInfoPb_MeasureInfoData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf.traceruav.MeasureInfoPb.MeasureInfoData)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_tnum() != 0) {
    _internal_set_tnum(from._internal_tnum());
  }
  if (from._internal_tfreq() != 0) {
    _internal_set_tfreq(from._internal_tfreq());
  }
  if (from._internal_tamp() != 0) {
    _internal_set_tamp(from._internal_tamp());
  }
  if (from._internal_tmfw() != 0) {
    _internal_set_tmfw(from._internal_tmfw());
  }
  if (from._internal_tmfy() != 0) {
    _internal_set_tmfy(from._internal_tmfy());
  }
  if (from._internal_tffw() != 0) {
    _internal_set_tffw(from._internal_tffw());
  }
  if (from._internal_tffy() != 0) {
    _internal_set_tffy(from._internal_tffy());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MeasureInfoPb_MeasureInfoData::CopyFrom(const MeasureInfoPb_MeasureInfoData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.traceruav.MeasureInfoPb.MeasureInfoData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MeasureInfoPb_MeasureInfoData::IsInitialized() const {
  return true;
}

void MeasureInfoPb_MeasureInfoData::InternalSwap(MeasureInfoPb_MeasureInfoData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MeasureInfoPb_MeasureInfoData, tffy_)
      + sizeof(MeasureInfoPb_MeasureInfoData::tffy_)
      - PROTOBUF_FIELD_OFFSET(MeasureInfoPb_MeasureInfoData, tnum_)>(
          reinterpret_cast<char*>(&tnum_),
          reinterpret_cast<char*>(&other->tnum_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MeasureInfoPb_MeasureInfoData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TracerUavMsg_2eproto_getter, &descriptor_table_TracerUavMsg_2eproto_once,
      file_level_metadata_TracerUavMsg_2eproto[2]);
}

// ===================================================================

class MeasureInfoPb::_Internal {
 public:
};

MeasureInfoPb::MeasureInfoPb(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  meainfodata_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protobuf.traceruav.MeasureInfoPb)
}
MeasureInfoPb::MeasureInfoPb(const MeasureInfoPb& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      meainfodata_(from.meainfodata_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&workstatus_, &from.workstatus_,
    static_cast<size_t>(reinterpret_cast<char*>(&tarnum_) -
    reinterpret_cast<char*>(&workstatus_)) + sizeof(tarnum_));
  // @@protoc_insertion_point(copy_constructor:protobuf.traceruav.MeasureInfoPb)
}

void MeasureInfoPb::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&workstatus_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&tarnum_) -
    reinterpret_cast<char*>(&workstatus_)) + sizeof(tarnum_));
}

MeasureInfoPb::~MeasureInfoPb() {
  // @@protoc_insertion_point(destructor:protobuf.traceruav.MeasureInfoPb)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MeasureInfoPb::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MeasureInfoPb::ArenaDtor(void* object) {
  MeasureInfoPb* _this = reinterpret_cast< MeasureInfoPb* >(object);
  (void)_this;
}
void MeasureInfoPb::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MeasureInfoPb::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MeasureInfoPb::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.traceruav.MeasureInfoPb)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  meainfodata_.Clear();
  ::memset(&workstatus_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tarnum_) -
      reinterpret_cast<char*>(&workstatus_)) + sizeof(tarnum_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MeasureInfoPb::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 workStatus = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          workstatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 tarNum = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          tarnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .protobuf.traceruav.MeasureInfoPb.MeasureInfoData meaInfoData = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_meainfodata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MeasureInfoPb::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.traceruav.MeasureInfoPb)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 workStatus = 2;
  if (this->_internal_workstatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_workstatus(), target);
  }

  // uint32 tarNum = 3;
  if (this->_internal_tarnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_tarnum(), target);
  }

  // repeated .protobuf.traceruav.MeasureInfoPb.MeasureInfoData meaInfoData = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_meainfodata_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_meainfodata(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.traceruav.MeasureInfoPb)
  return target;
}

size_t MeasureInfoPb::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.traceruav.MeasureInfoPb)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protobuf.traceruav.MeasureInfoPb.MeasureInfoData meaInfoData = 4;
  total_size += 1UL * this->_internal_meainfodata_size();
  for (const auto& msg : this->meainfodata_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 workStatus = 2;
  if (this->_internal_workstatus() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_workstatus());
  }

  // uint32 tarNum = 3;
  if (this->_internal_tarnum() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_tarnum());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MeasureInfoPb::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MeasureInfoPb::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MeasureInfoPb::GetClassData() const { return &_class_data_; }

void MeasureInfoPb::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MeasureInfoPb *>(to)->MergeFrom(
      static_cast<const MeasureInfoPb &>(from));
}


void MeasureInfoPb::MergeFrom(const MeasureInfoPb& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf.traceruav.MeasureInfoPb)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  meainfodata_.MergeFrom(from.meainfodata_);
  if (from._internal_workstatus() != 0) {
    _internal_set_workstatus(from._internal_workstatus());
  }
  if (from._internal_tarnum() != 0) {
    _internal_set_tarnum(from._internal_tarnum());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MeasureInfoPb::CopyFrom(const MeasureInfoPb& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.traceruav.MeasureInfoPb)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MeasureInfoPb::IsInitialized() const {
  return true;
}

void MeasureInfoPb::InternalSwap(MeasureInfoPb* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  meainfodata_.InternalSwap(&other->meainfodata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MeasureInfoPb, tarnum_)
      + sizeof(MeasureInfoPb::tarnum_)
      - PROTOBUF_FIELD_OFFSET(MeasureInfoPb, workstatus_)>(
          reinterpret_cast<char*>(&workstatus_),
          reinterpret_cast<char*>(&other->workstatus_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MeasureInfoPb::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TracerUavMsg_2eproto_getter, &descriptor_table_TracerUavMsg_2eproto_once,
      file_level_metadata_TracerUavMsg_2eproto[3]);
}

// ===================================================================

class TracerUavMessagePB::_Internal {
 public:
  using HasBits = decltype(std::declval<TracerUavMessagePB>()._has_bits_);
  static void set_has_msgname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::protobuf::traceruav::CtrlWorkModePB& workmode(const TracerUavMessagePB* msg);
  static void set_has_workmode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::protobuf::traceruav::FlyStatusPB& flystatus(const TracerUavMessagePB* msg);
  static void set_has_flystatus(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::protobuf::traceruav::MeasureInfoPb& measureinfo(const TracerUavMessagePB* msg);
  static void set_has_measureinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::protobuf::traceruav::CtrlWorkModePB&
TracerUavMessagePB::_Internal::workmode(const TracerUavMessagePB* msg) {
  return *msg->workmode_;
}
const ::protobuf::traceruav::FlyStatusPB&
TracerUavMessagePB::_Internal::flystatus(const TracerUavMessagePB* msg) {
  return *msg->flystatus_;
}
const ::protobuf::traceruav::MeasureInfoPb&
TracerUavMessagePB::_Internal::measureinfo(const TracerUavMessagePB* msg) {
  return *msg->measureinfo_;
}
TracerUavMessagePB::TracerUavMessagePB(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protobuf.traceruav.TracerUavMessagePB)
}
TracerUavMessagePB::TracerUavMessagePB(const TracerUavMessagePB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msgchannel_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msgchannel().empty()) {
    msgchannel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msgchannel(), 
      GetArenaForAllocation());
  }
  msgname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_msgname()) {
    msgname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msgname(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_workmode()) {
    workmode_ = new ::protobuf::traceruav::CtrlWorkModePB(*from.workmode_);
  } else {
    workmode_ = nullptr;
  }
  if (from._internal_has_flystatus()) {
    flystatus_ = new ::protobuf::traceruav::FlyStatusPB(*from.flystatus_);
  } else {
    flystatus_ = nullptr;
  }
  if (from._internal_has_measureinfo()) {
    measureinfo_ = new ::protobuf::traceruav::MeasureInfoPb(*from.measureinfo_);
  } else {
    measureinfo_ = nullptr;
  }
  ::memcpy(&msgtype_, &from.msgtype_,
    static_cast<size_t>(reinterpret_cast<char*>(&msgseq_) -
    reinterpret_cast<char*>(&msgtype_)) + sizeof(msgseq_));
  // @@protoc_insertion_point(copy_constructor:protobuf.traceruav.TracerUavMessagePB)
}

void TracerUavMessagePB::SharedCtor() {
msgchannel_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
msgname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&workmode_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&msgseq_) -
    reinterpret_cast<char*>(&workmode_)) + sizeof(msgseq_));
}

TracerUavMessagePB::~TracerUavMessagePB() {
  // @@protoc_insertion_point(destructor:protobuf.traceruav.TracerUavMessagePB)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TracerUavMessagePB::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  msgchannel_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  msgname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete workmode_;
  if (this != internal_default_instance()) delete flystatus_;
  if (this != internal_default_instance()) delete measureinfo_;
}

void TracerUavMessagePB::ArenaDtor(void* object) {
  TracerUavMessagePB* _this = reinterpret_cast< TracerUavMessagePB* >(object);
  (void)_this;
}
void TracerUavMessagePB::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TracerUavMessagePB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TracerUavMessagePB::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.traceruav.TracerUavMessagePB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msgchannel_.ClearToEmpty();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      msgname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(workmode_ != nullptr);
      workmode_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(flystatus_ != nullptr);
      flystatus_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(measureinfo_ != nullptr);
      measureinfo_->Clear();
    }
  }
  ::memset(&msgtype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msgseq_) -
      reinterpret_cast<char*>(&msgtype_)) + sizeof(msgseq_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TracerUavMessagePB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string msgChannel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_msgchannel();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf.traceruav.TracerUavMessagePB.msgChannel"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .protobuf.traceruav.MessageType msgType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_msgtype(static_cast<::protobuf::traceruav::MessageType>(val));
        } else
          goto handle_unusual;
        continue;
      // optional string msgName = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_msgname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf.traceruav.TracerUavMessagePB.msgName"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 msgHandle = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          msghandle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 msgSeq = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          msgseq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .protobuf.traceruav.CtrlWorkModePB workMode = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_workmode(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .protobuf.traceruav.FlyStatusPB flyStatus = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_flystatus(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .protobuf.traceruav.MeasureInfoPb measureInfo = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_measureinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TracerUavMessagePB::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.traceruav.TracerUavMessagePB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msgChannel = 2;
  if (!this->_internal_msgchannel().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msgchannel().data(), static_cast<int>(this->_internal_msgchannel().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.traceruav.TracerUavMessagePB.msgChannel");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_msgchannel(), target);
  }

  // .protobuf.traceruav.MessageType msgType = 3;
  if (this->_internal_msgtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_msgtype(), target);
  }

  // optional string msgName = 4;
  if (_internal_has_msgname()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msgname().data(), static_cast<int>(this->_internal_msgname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.traceruav.TracerUavMessagePB.msgName");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_msgname(), target);
  }

  // uint32 msgHandle = 5;
  if (this->_internal_msghandle() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_msghandle(), target);
  }

  // uint32 msgSeq = 6;
  if (this->_internal_msgseq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_msgseq(), target);
  }

  // optional .protobuf.traceruav.CtrlWorkModePB workMode = 10;
  if (_internal_has_workmode()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::workmode(this), target, stream);
  }

  // optional .protobuf.traceruav.FlyStatusPB flyStatus = 11;
  if (_internal_has_flystatus()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::flystatus(this), target, stream);
  }

  // optional .protobuf.traceruav.MeasureInfoPb measureInfo = 12;
  if (_internal_has_measureinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::measureinfo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.traceruav.TracerUavMessagePB)
  return target;
}

size_t TracerUavMessagePB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.traceruav.TracerUavMessagePB)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msgChannel = 2;
  if (!this->_internal_msgchannel().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msgchannel());
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string msgName = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_msgname());
    }

    // optional .protobuf.traceruav.CtrlWorkModePB workMode = 10;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *workmode_);
    }

    // optional .protobuf.traceruav.FlyStatusPB flyStatus = 11;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *flystatus_);
    }

    // optional .protobuf.traceruav.MeasureInfoPb measureInfo = 12;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *measureinfo_);
    }

  }
  // .protobuf.traceruav.MessageType msgType = 3;
  if (this->_internal_msgtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_msgtype());
  }

  // uint32 msgHandle = 5;
  if (this->_internal_msghandle() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_msghandle());
  }

  // uint32 msgSeq = 6;
  if (this->_internal_msgseq() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_msgseq());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TracerUavMessagePB::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TracerUavMessagePB::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TracerUavMessagePB::GetClassData() const { return &_class_data_; }

void TracerUavMessagePB::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TracerUavMessagePB *>(to)->MergeFrom(
      static_cast<const TracerUavMessagePB &>(from));
}


void TracerUavMessagePB::MergeFrom(const TracerUavMessagePB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf.traceruav.TracerUavMessagePB)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msgchannel().empty()) {
    _internal_set_msgchannel(from._internal_msgchannel());
  }
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_msgname(from._internal_msgname());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_workmode()->::protobuf::traceruav::CtrlWorkModePB::MergeFrom(from._internal_workmode());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_flystatus()->::protobuf::traceruav::FlyStatusPB::MergeFrom(from._internal_flystatus());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_measureinfo()->::protobuf::traceruav::MeasureInfoPb::MergeFrom(from._internal_measureinfo());
    }
  }
  if (from._internal_msgtype() != 0) {
    _internal_set_msgtype(from._internal_msgtype());
  }
  if (from._internal_msghandle() != 0) {
    _internal_set_msghandle(from._internal_msghandle());
  }
  if (from._internal_msgseq() != 0) {
    _internal_set_msgseq(from._internal_msgseq());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TracerUavMessagePB::CopyFrom(const TracerUavMessagePB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.traceruav.TracerUavMessagePB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TracerUavMessagePB::IsInitialized() const {
  return true;
}

void TracerUavMessagePB::InternalSwap(TracerUavMessagePB* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &msgchannel_, lhs_arena,
      &other->msgchannel_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &msgname_, lhs_arena,
      &other->msgname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TracerUavMessagePB, msgseq_)
      + sizeof(TracerUavMessagePB::msgseq_)
      - PROTOBUF_FIELD_OFFSET(TracerUavMessagePB, workmode_)>(
          reinterpret_cast<char*>(&workmode_),
          reinterpret_cast<char*>(&other->workmode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TracerUavMessagePB::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TracerUavMsg_2eproto_getter, &descriptor_table_TracerUavMsg_2eproto_once,
      file_level_metadata_TracerUavMsg_2eproto[4]);
}

// ===================================================================

class AngleInfoPB::_Internal {
 public:
};

AngleInfoPB::AngleInfoPB(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protobuf.traceruav.AngleInfoPB)
}
AngleInfoPB::AngleInfoPB(const AngleInfoPB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&roll_, &from.roll_,
    static_cast<size_t>(reinterpret_cast<char*>(&yaw_) -
    reinterpret_cast<char*>(&roll_)) + sizeof(yaw_));
  // @@protoc_insertion_point(copy_constructor:protobuf.traceruav.AngleInfoPB)
}

void AngleInfoPB::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&roll_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&yaw_) -
    reinterpret_cast<char*>(&roll_)) + sizeof(yaw_));
}

AngleInfoPB::~AngleInfoPB() {
  // @@protoc_insertion_point(destructor:protobuf.traceruav.AngleInfoPB)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AngleInfoPB::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AngleInfoPB::ArenaDtor(void* object) {
  AngleInfoPB* _this = reinterpret_cast< AngleInfoPB* >(object);
  (void)_this;
}
void AngleInfoPB::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AngleInfoPB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AngleInfoPB::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.traceruav.AngleInfoPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&roll_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yaw_) -
      reinterpret_cast<char*>(&roll_)) + sizeof(yaw_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AngleInfoPB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float roll = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          roll_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float pitch = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          pitch_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float yaw = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AngleInfoPB::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.traceruav.AngleInfoPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float roll = 2;
  if (!(this->_internal_roll() <= 0 && this->_internal_roll() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_roll(), target);
  }

  // float pitch = 3;
  if (!(this->_internal_pitch() <= 0 && this->_internal_pitch() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_pitch(), target);
  }

  // float yaw = 4;
  if (!(this->_internal_yaw() <= 0 && this->_internal_yaw() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_yaw(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.traceruav.AngleInfoPB)
  return target;
}

size_t AngleInfoPB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.traceruav.AngleInfoPB)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float roll = 2;
  if (!(this->_internal_roll() <= 0 && this->_internal_roll() >= 0)) {
    total_size += 1 + 4;
  }

  // float pitch = 3;
  if (!(this->_internal_pitch() <= 0 && this->_internal_pitch() >= 0)) {
    total_size += 1 + 4;
  }

  // float yaw = 4;
  if (!(this->_internal_yaw() <= 0 && this->_internal_yaw() >= 0)) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AngleInfoPB::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AngleInfoPB::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AngleInfoPB::GetClassData() const { return &_class_data_; }

void AngleInfoPB::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AngleInfoPB *>(to)->MergeFrom(
      static_cast<const AngleInfoPB &>(from));
}


void AngleInfoPB::MergeFrom(const AngleInfoPB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf.traceruav.AngleInfoPB)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from._internal_roll() <= 0 && from._internal_roll() >= 0)) {
    _internal_set_roll(from._internal_roll());
  }
  if (!(from._internal_pitch() <= 0 && from._internal_pitch() >= 0)) {
    _internal_set_pitch(from._internal_pitch());
  }
  if (!(from._internal_yaw() <= 0 && from._internal_yaw() >= 0)) {
    _internal_set_yaw(from._internal_yaw());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AngleInfoPB::CopyFrom(const AngleInfoPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.traceruav.AngleInfoPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AngleInfoPB::IsInitialized() const {
  return true;
}

void AngleInfoPB::InternalSwap(AngleInfoPB* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AngleInfoPB, yaw_)
      + sizeof(AngleInfoPB::yaw_)
      - PROTOBUF_FIELD_OFFSET(AngleInfoPB, roll_)>(
          reinterpret_cast<char*>(&roll_),
          reinterpret_cast<char*>(&other->roll_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AngleInfoPB::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TracerUavMsg_2eproto_getter, &descriptor_table_TracerUavMsg_2eproto_once,
      file_level_metadata_TracerUavMsg_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace traceruav
}  // namespace protobuf
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::protobuf::traceruav::CtrlWorkModePB* Arena::CreateMaybeMessage< ::protobuf::traceruav::CtrlWorkModePB >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf::traceruav::CtrlWorkModePB >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf::traceruav::FlyStatusPB* Arena::CreateMaybeMessage< ::protobuf::traceruav::FlyStatusPB >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf::traceruav::FlyStatusPB >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf::traceruav::MeasureInfoPb_MeasureInfoData* Arena::CreateMaybeMessage< ::protobuf::traceruav::MeasureInfoPb_MeasureInfoData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf::traceruav::MeasureInfoPb_MeasureInfoData >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf::traceruav::MeasureInfoPb* Arena::CreateMaybeMessage< ::protobuf::traceruav::MeasureInfoPb >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf::traceruav::MeasureInfoPb >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf::traceruav::TracerUavMessagePB* Arena::CreateMaybeMessage< ::protobuf::traceruav::TracerUavMessagePB >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf::traceruav::TracerUavMessagePB >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf::traceruav::AngleInfoPB* Arena::CreateMaybeMessage< ::protobuf::traceruav::AngleInfoPB >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf::traceruav::AngleInfoPB >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
