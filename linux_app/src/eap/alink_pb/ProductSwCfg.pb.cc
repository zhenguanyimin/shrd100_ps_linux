// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProductSwCfg.proto

#include "ProductSwCfg.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr PbDroneIdAttr::PbDroneIdAttr(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : isenabledmafft_(false){}
struct PbDroneIdAttrDefaultTypeInternal {
  constexpr PbDroneIdAttrDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PbDroneIdAttrDefaultTypeInternal() {}
  union {
    PbDroneIdAttr _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PbDroneIdAttrDefaultTypeInternal _PbDroneIdAttr_default_instance_;
constexpr PbMuteAttr::PbMuteAttr(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : issupportmutemode_(false)
  , issupportswitchversion_(false){}
struct PbMuteAttrDefaultTypeInternal {
  constexpr PbMuteAttrDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PbMuteAttrDefaultTypeInternal() {}
  union {
    PbMuteAttr _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PbMuteAttrDefaultTypeInternal _PbMuteAttr_default_instance_;
constexpr PbNetProto::PbNetProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : netprototype_(0u){}
struct PbNetProtoDefaultTypeInternal {
  constexpr PbNetProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PbNetProtoDefaultTypeInternal() {}
  union {
    PbNetProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PbNetProtoDefaultTypeInternal _PbNetProto_default_instance_;
constexpr PbAlgCompensateAttr::PbAlgCompensateAttr(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : file_path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , file_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct PbAlgCompensateAttrDefaultTypeInternal {
  constexpr PbAlgCompensateAttrDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PbAlgCompensateAttrDefaultTypeInternal() {}
  union {
    PbAlgCompensateAttr _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PbAlgCompensateAttrDefaultTypeInternal _PbAlgCompensateAttr_default_instance_;
constexpr PbBurstDataIrqInfo::PbBurstDataIrqInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : irqdevfilename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , phymemaddr_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , channel_(0)
  , isenabled_(false){}
struct PbBurstDataIrqInfoDefaultTypeInternal {
  constexpr PbBurstDataIrqInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PbBurstDataIrqInfoDefaultTypeInternal() {}
  union {
    PbBurstDataIrqInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PbBurstDataIrqInfoDefaultTypeInternal _PbBurstDataIrqInfo_default_instance_;
constexpr ProductSwCfg::ProductSwCfg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : burstdatairqinfolist_()
  , vertype_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , desc_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , netproto_(nullptr)
  , droneidattr_(nullptr)
  , muteattr_(nullptr)
  , algcompensateattr_(nullptr)
  , devicetype_(0u)
  , issupportremoteid_(false)
  , issupportdroneid_(false)
  , issupportspectrum_(false)
  , issupportspectrumorient_(false)
  , issupportairborne_(false)
  , issupportairborneorient_(false)
  , issupportwarningwhitelist_(false)
  , issupporthitprotect_(false){}
struct ProductSwCfgDefaultTypeInternal {
  constexpr ProductSwCfgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProductSwCfgDefaultTypeInternal() {}
  union {
    ProductSwCfg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProductSwCfgDefaultTypeInternal _ProductSwCfg_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ProductSwCfg_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ProductSwCfg_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ProductSwCfg_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ProductSwCfg_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PbDroneIdAttr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PbDroneIdAttr, isenabledmafft_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PbMuteAttr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PbMuteAttr, issupportmutemode_),
  PROTOBUF_FIELD_OFFSET(::PbMuteAttr, issupportswitchversion_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PbNetProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PbNetProto, netprototype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PbAlgCompensateAttr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PbAlgCompensateAttr, file_path_),
  PROTOBUF_FIELD_OFFSET(::PbAlgCompensateAttr, file_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PbBurstDataIrqInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PbBurstDataIrqInfo, channel_),
  PROTOBUF_FIELD_OFFSET(::PbBurstDataIrqInfo, isenabled_),
  PROTOBUF_FIELD_OFFSET(::PbBurstDataIrqInfo, irqdevfilename_),
  PROTOBUF_FIELD_OFFSET(::PbBurstDataIrqInfo, phymemaddr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ProductSwCfg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ProductSwCfg, vertype_),
  PROTOBUF_FIELD_OFFSET(::ProductSwCfg, desc_),
  PROTOBUF_FIELD_OFFSET(::ProductSwCfg, netproto_),
  PROTOBUF_FIELD_OFFSET(::ProductSwCfg, devicetype_),
  PROTOBUF_FIELD_OFFSET(::ProductSwCfg, issupportremoteid_),
  PROTOBUF_FIELD_OFFSET(::ProductSwCfg, issupportdroneid_),
  PROTOBUF_FIELD_OFFSET(::ProductSwCfg, issupportspectrum_),
  PROTOBUF_FIELD_OFFSET(::ProductSwCfg, issupportspectrumorient_),
  PROTOBUF_FIELD_OFFSET(::ProductSwCfg, issupportairborne_),
  PROTOBUF_FIELD_OFFSET(::ProductSwCfg, issupportairborneorient_),
  PROTOBUF_FIELD_OFFSET(::ProductSwCfg, issupportwarningwhitelist_),
  PROTOBUF_FIELD_OFFSET(::ProductSwCfg, issupporthitprotect_),
  PROTOBUF_FIELD_OFFSET(::ProductSwCfg, droneidattr_),
  PROTOBUF_FIELD_OFFSET(::ProductSwCfg, muteattr_),
  PROTOBUF_FIELD_OFFSET(::ProductSwCfg, algcompensateattr_),
  PROTOBUF_FIELD_OFFSET(::ProductSwCfg, burstdatairqinfolist_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::PbDroneIdAttr)},
  { 7, -1, -1, sizeof(::PbMuteAttr)},
  { 15, -1, -1, sizeof(::PbNetProto)},
  { 22, -1, -1, sizeof(::PbAlgCompensateAttr)},
  { 30, -1, -1, sizeof(::PbBurstDataIrqInfo)},
  { 40, -1, -1, sizeof(::ProductSwCfg)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PbDroneIdAttr_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PbMuteAttr_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PbNetProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PbAlgCompensateAttr_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PbBurstDataIrqInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ProductSwCfg_default_instance_),
};

const char descriptor_table_protodef_ProductSwCfg_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022ProductSwCfg.proto\"\'\n\rPbDroneIdAttr\022\026\n"
  "\016isEnableDmaFFT\030\001 \001(\010\"G\n\nPbMuteAttr\022\031\n\021i"
  "sSupportMuteMode\030\001 \001(\010\022\036\n\026isSupportSwitc"
  "hVersion\030\002 \001(\010\"\"\n\nPbNetProto\022\024\n\014netProto"
  "Type\030\001 \001(\r\";\n\023PbAlgCompensateAttr\022\021\n\tfil"
  "e_path\030\001 \001(\t\022\021\n\tfile_name\030\002 \001(\t\"d\n\022PbBur"
  "stDataIrqInfo\022\017\n\007channel\030\001 \001(\005\022\021\n\tisEnab"
  "led\030\002 \001(\010\022\026\n\016irqDevFileName\030\003 \001(\t\022\022\n\nphy"
  "MemAddr\030\004 \001(\t\"\366\003\n\014ProductSwCfg\022\017\n\007verTyp"
  "e\030\001 \001(\t\022\014\n\004desc\030\002 \001(\t\022\035\n\010netProto\030\003 \001(\0132"
  "\013.PbNetProto\022\022\n\ndeviceType\030\004 \001(\r\022\031\n\021isSu"
  "pportRemoteId\030\020 \001(\010\022\030\n\020isSupportDroneId\030"
  "\021 \001(\010\022\031\n\021isSupportSpectrum\030\022 \001(\010\022\037\n\027isSu"
  "pportSpectrumOrient\030\023 \001(\010\022\031\n\021isSupportAi"
  "rborne\030\024 \001(\010\022\037\n\027isSupportAirborneOrient\030"
  "\025 \001(\010\022!\n\031isSupportWarningWhitelist\030\026 \001(\010"
  "\022\033\n\023isSupportHitProtect\030\027 \001(\010\022#\n\013droneId"
  "Attr\030d \001(\0132\016.PbDroneIdAttr\022\035\n\010muteAttr\030e"
  " \001(\0132\013.PbMuteAttr\022/\n\021algCompensateAttr\030n"
  " \001(\0132\024.PbAlgCompensateAttr\0222\n\024burstDataI"
  "rqInfoList\030\310\001 \003(\0132\023.PbBurstDataIrqInfob\006"
  "proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ProductSwCfg_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ProductSwCfg_2eproto = {
  false, false, 846, descriptor_table_protodef_ProductSwCfg_2eproto, "ProductSwCfg.proto", 
  &descriptor_table_ProductSwCfg_2eproto_once, nullptr, 0, 6,
  schemas, file_default_instances, TableStruct_ProductSwCfg_2eproto::offsets,
  file_level_metadata_ProductSwCfg_2eproto, file_level_enum_descriptors_ProductSwCfg_2eproto, file_level_service_descriptors_ProductSwCfg_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_ProductSwCfg_2eproto_getter() {
  return &descriptor_table_ProductSwCfg_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_ProductSwCfg_2eproto(&descriptor_table_ProductSwCfg_2eproto);

// ===================================================================

class PbDroneIdAttr::_Internal {
 public:
};

PbDroneIdAttr::PbDroneIdAttr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PbDroneIdAttr)
}
PbDroneIdAttr::PbDroneIdAttr(const PbDroneIdAttr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  isenabledmafft_ = from.isenabledmafft_;
  // @@protoc_insertion_point(copy_constructor:PbDroneIdAttr)
}

void PbDroneIdAttr::SharedCtor() {
isenabledmafft_ = false;
}

PbDroneIdAttr::~PbDroneIdAttr() {
  // @@protoc_insertion_point(destructor:PbDroneIdAttr)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PbDroneIdAttr::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PbDroneIdAttr::ArenaDtor(void* object) {
  PbDroneIdAttr* _this = reinterpret_cast< PbDroneIdAttr* >(object);
  (void)_this;
}
void PbDroneIdAttr::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PbDroneIdAttr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PbDroneIdAttr::Clear() {
// @@protoc_insertion_point(message_clear_start:PbDroneIdAttr)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  isenabledmafft_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PbDroneIdAttr::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool isEnableDmaFFT = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          isenabledmafft_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PbDroneIdAttr::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PbDroneIdAttr)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool isEnableDmaFFT = 1;
  if (this->_internal_isenabledmafft() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_isenabledmafft(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PbDroneIdAttr)
  return target;
}

size_t PbDroneIdAttr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PbDroneIdAttr)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool isEnableDmaFFT = 1;
  if (this->_internal_isenabledmafft() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PbDroneIdAttr::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PbDroneIdAttr::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PbDroneIdAttr::GetClassData() const { return &_class_data_; }

void PbDroneIdAttr::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PbDroneIdAttr *>(to)->MergeFrom(
      static_cast<const PbDroneIdAttr &>(from));
}


void PbDroneIdAttr::MergeFrom(const PbDroneIdAttr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PbDroneIdAttr)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_isenabledmafft() != 0) {
    _internal_set_isenabledmafft(from._internal_isenabledmafft());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PbDroneIdAttr::CopyFrom(const PbDroneIdAttr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PbDroneIdAttr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbDroneIdAttr::IsInitialized() const {
  return true;
}

void PbDroneIdAttr::InternalSwap(PbDroneIdAttr* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(isenabledmafft_, other->isenabledmafft_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PbDroneIdAttr::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ProductSwCfg_2eproto_getter, &descriptor_table_ProductSwCfg_2eproto_once,
      file_level_metadata_ProductSwCfg_2eproto[0]);
}

// ===================================================================

class PbMuteAttr::_Internal {
 public:
};

PbMuteAttr::PbMuteAttr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PbMuteAttr)
}
PbMuteAttr::PbMuteAttr(const PbMuteAttr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&issupportmutemode_, &from.issupportmutemode_,
    static_cast<size_t>(reinterpret_cast<char*>(&issupportswitchversion_) -
    reinterpret_cast<char*>(&issupportmutemode_)) + sizeof(issupportswitchversion_));
  // @@protoc_insertion_point(copy_constructor:PbMuteAttr)
}

void PbMuteAttr::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&issupportmutemode_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&issupportswitchversion_) -
    reinterpret_cast<char*>(&issupportmutemode_)) + sizeof(issupportswitchversion_));
}

PbMuteAttr::~PbMuteAttr() {
  // @@protoc_insertion_point(destructor:PbMuteAttr)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PbMuteAttr::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PbMuteAttr::ArenaDtor(void* object) {
  PbMuteAttr* _this = reinterpret_cast< PbMuteAttr* >(object);
  (void)_this;
}
void PbMuteAttr::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PbMuteAttr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PbMuteAttr::Clear() {
// @@protoc_insertion_point(message_clear_start:PbMuteAttr)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&issupportmutemode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&issupportswitchversion_) -
      reinterpret_cast<char*>(&issupportmutemode_)) + sizeof(issupportswitchversion_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PbMuteAttr::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool isSupportMuteMode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          issupportmutemode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool isSupportSwitchVersion = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          issupportswitchversion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PbMuteAttr::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PbMuteAttr)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool isSupportMuteMode = 1;
  if (this->_internal_issupportmutemode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_issupportmutemode(), target);
  }

  // bool isSupportSwitchVersion = 2;
  if (this->_internal_issupportswitchversion() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_issupportswitchversion(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PbMuteAttr)
  return target;
}

size_t PbMuteAttr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PbMuteAttr)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool isSupportMuteMode = 1;
  if (this->_internal_issupportmutemode() != 0) {
    total_size += 1 + 1;
  }

  // bool isSupportSwitchVersion = 2;
  if (this->_internal_issupportswitchversion() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PbMuteAttr::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PbMuteAttr::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PbMuteAttr::GetClassData() const { return &_class_data_; }

void PbMuteAttr::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PbMuteAttr *>(to)->MergeFrom(
      static_cast<const PbMuteAttr &>(from));
}


void PbMuteAttr::MergeFrom(const PbMuteAttr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PbMuteAttr)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_issupportmutemode() != 0) {
    _internal_set_issupportmutemode(from._internal_issupportmutemode());
  }
  if (from._internal_issupportswitchversion() != 0) {
    _internal_set_issupportswitchversion(from._internal_issupportswitchversion());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PbMuteAttr::CopyFrom(const PbMuteAttr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PbMuteAttr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbMuteAttr::IsInitialized() const {
  return true;
}

void PbMuteAttr::InternalSwap(PbMuteAttr* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PbMuteAttr, issupportswitchversion_)
      + sizeof(PbMuteAttr::issupportswitchversion_)
      - PROTOBUF_FIELD_OFFSET(PbMuteAttr, issupportmutemode_)>(
          reinterpret_cast<char*>(&issupportmutemode_),
          reinterpret_cast<char*>(&other->issupportmutemode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PbMuteAttr::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ProductSwCfg_2eproto_getter, &descriptor_table_ProductSwCfg_2eproto_once,
      file_level_metadata_ProductSwCfg_2eproto[1]);
}

// ===================================================================

class PbNetProto::_Internal {
 public:
};

PbNetProto::PbNetProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PbNetProto)
}
PbNetProto::PbNetProto(const PbNetProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  netprototype_ = from.netprototype_;
  // @@protoc_insertion_point(copy_constructor:PbNetProto)
}

void PbNetProto::SharedCtor() {
netprototype_ = 0u;
}

PbNetProto::~PbNetProto() {
  // @@protoc_insertion_point(destructor:PbNetProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PbNetProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PbNetProto::ArenaDtor(void* object) {
  PbNetProto* _this = reinterpret_cast< PbNetProto* >(object);
  (void)_this;
}
void PbNetProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PbNetProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PbNetProto::Clear() {
// @@protoc_insertion_point(message_clear_start:PbNetProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  netprototype_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PbNetProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 netProtoType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          netprototype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PbNetProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PbNetProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 netProtoType = 1;
  if (this->_internal_netprototype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_netprototype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PbNetProto)
  return target;
}

size_t PbNetProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PbNetProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 netProtoType = 1;
  if (this->_internal_netprototype() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_netprototype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PbNetProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PbNetProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PbNetProto::GetClassData() const { return &_class_data_; }

void PbNetProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PbNetProto *>(to)->MergeFrom(
      static_cast<const PbNetProto &>(from));
}


void PbNetProto::MergeFrom(const PbNetProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PbNetProto)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_netprototype() != 0) {
    _internal_set_netprototype(from._internal_netprototype());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PbNetProto::CopyFrom(const PbNetProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PbNetProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbNetProto::IsInitialized() const {
  return true;
}

void PbNetProto::InternalSwap(PbNetProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(netprototype_, other->netprototype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PbNetProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ProductSwCfg_2eproto_getter, &descriptor_table_ProductSwCfg_2eproto_once,
      file_level_metadata_ProductSwCfg_2eproto[2]);
}

// ===================================================================

class PbAlgCompensateAttr::_Internal {
 public:
};

PbAlgCompensateAttr::PbAlgCompensateAttr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PbAlgCompensateAttr)
}
PbAlgCompensateAttr::PbAlgCompensateAttr(const PbAlgCompensateAttr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  file_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_file_path().empty()) {
    file_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_file_path(), 
      GetArenaForAllocation());
  }
  file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_file_name().empty()) {
    file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_file_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:PbAlgCompensateAttr)
}

void PbAlgCompensateAttr::SharedCtor() {
file_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PbAlgCompensateAttr::~PbAlgCompensateAttr() {
  // @@protoc_insertion_point(destructor:PbAlgCompensateAttr)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PbAlgCompensateAttr::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  file_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PbAlgCompensateAttr::ArenaDtor(void* object) {
  PbAlgCompensateAttr* _this = reinterpret_cast< PbAlgCompensateAttr* >(object);
  (void)_this;
}
void PbAlgCompensateAttr::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PbAlgCompensateAttr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PbAlgCompensateAttr::Clear() {
// @@protoc_insertion_point(message_clear_start:PbAlgCompensateAttr)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_path_.ClearToEmpty();
  file_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PbAlgCompensateAttr::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string file_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_file_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PbAlgCompensateAttr.file_path"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string file_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_file_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PbAlgCompensateAttr.file_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PbAlgCompensateAttr::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PbAlgCompensateAttr)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string file_path = 1;
  if (!this->_internal_file_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_path().data(), static_cast<int>(this->_internal_file_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PbAlgCompensateAttr.file_path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_file_path(), target);
  }

  // string file_name = 2;
  if (!this->_internal_file_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_name().data(), static_cast<int>(this->_internal_file_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PbAlgCompensateAttr.file_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_file_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PbAlgCompensateAttr)
  return target;
}

size_t PbAlgCompensateAttr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PbAlgCompensateAttr)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string file_path = 1;
  if (!this->_internal_file_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_path());
  }

  // string file_name = 2;
  if (!this->_internal_file_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PbAlgCompensateAttr::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PbAlgCompensateAttr::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PbAlgCompensateAttr::GetClassData() const { return &_class_data_; }

void PbAlgCompensateAttr::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PbAlgCompensateAttr *>(to)->MergeFrom(
      static_cast<const PbAlgCompensateAttr &>(from));
}


void PbAlgCompensateAttr::MergeFrom(const PbAlgCompensateAttr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PbAlgCompensateAttr)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_file_path().empty()) {
    _internal_set_file_path(from._internal_file_path());
  }
  if (!from._internal_file_name().empty()) {
    _internal_set_file_name(from._internal_file_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PbAlgCompensateAttr::CopyFrom(const PbAlgCompensateAttr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PbAlgCompensateAttr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbAlgCompensateAttr::IsInitialized() const {
  return true;
}

void PbAlgCompensateAttr::InternalSwap(PbAlgCompensateAttr* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &file_path_, lhs_arena,
      &other->file_path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &file_name_, lhs_arena,
      &other->file_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PbAlgCompensateAttr::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ProductSwCfg_2eproto_getter, &descriptor_table_ProductSwCfg_2eproto_once,
      file_level_metadata_ProductSwCfg_2eproto[3]);
}

// ===================================================================

class PbBurstDataIrqInfo::_Internal {
 public:
};

PbBurstDataIrqInfo::PbBurstDataIrqInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PbBurstDataIrqInfo)
}
PbBurstDataIrqInfo::PbBurstDataIrqInfo(const PbBurstDataIrqInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  irqdevfilename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_irqdevfilename().empty()) {
    irqdevfilename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_irqdevfilename(), 
      GetArenaForAllocation());
  }
  phymemaddr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_phymemaddr().empty()) {
    phymemaddr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_phymemaddr(), 
      GetArenaForAllocation());
  }
  ::memcpy(&channel_, &from.channel_,
    static_cast<size_t>(reinterpret_cast<char*>(&isenabled_) -
    reinterpret_cast<char*>(&channel_)) + sizeof(isenabled_));
  // @@protoc_insertion_point(copy_constructor:PbBurstDataIrqInfo)
}

void PbBurstDataIrqInfo::SharedCtor() {
irqdevfilename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
phymemaddr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&channel_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&isenabled_) -
    reinterpret_cast<char*>(&channel_)) + sizeof(isenabled_));
}

PbBurstDataIrqInfo::~PbBurstDataIrqInfo() {
  // @@protoc_insertion_point(destructor:PbBurstDataIrqInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PbBurstDataIrqInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  irqdevfilename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  phymemaddr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PbBurstDataIrqInfo::ArenaDtor(void* object) {
  PbBurstDataIrqInfo* _this = reinterpret_cast< PbBurstDataIrqInfo* >(object);
  (void)_this;
}
void PbBurstDataIrqInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PbBurstDataIrqInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PbBurstDataIrqInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PbBurstDataIrqInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  irqdevfilename_.ClearToEmpty();
  phymemaddr_.ClearToEmpty();
  ::memset(&channel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isenabled_) -
      reinterpret_cast<char*>(&channel_)) + sizeof(isenabled_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PbBurstDataIrqInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 channel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool isEnabled = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          isenabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string irqDevFileName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_irqdevfilename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PbBurstDataIrqInfo.irqDevFileName"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string phyMemAddr = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_phymemaddr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PbBurstDataIrqInfo.phyMemAddr"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PbBurstDataIrqInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PbBurstDataIrqInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 channel = 1;
  if (this->_internal_channel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_channel(), target);
  }

  // bool isEnabled = 2;
  if (this->_internal_isenabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_isenabled(), target);
  }

  // string irqDevFileName = 3;
  if (!this->_internal_irqdevfilename().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_irqdevfilename().data(), static_cast<int>(this->_internal_irqdevfilename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PbBurstDataIrqInfo.irqDevFileName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_irqdevfilename(), target);
  }

  // string phyMemAddr = 4;
  if (!this->_internal_phymemaddr().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_phymemaddr().data(), static_cast<int>(this->_internal_phymemaddr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PbBurstDataIrqInfo.phyMemAddr");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_phymemaddr(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PbBurstDataIrqInfo)
  return target;
}

size_t PbBurstDataIrqInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PbBurstDataIrqInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string irqDevFileName = 3;
  if (!this->_internal_irqdevfilename().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_irqdevfilename());
  }

  // string phyMemAddr = 4;
  if (!this->_internal_phymemaddr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_phymemaddr());
  }

  // int32 channel = 1;
  if (this->_internal_channel() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_channel());
  }

  // bool isEnabled = 2;
  if (this->_internal_isenabled() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PbBurstDataIrqInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PbBurstDataIrqInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PbBurstDataIrqInfo::GetClassData() const { return &_class_data_; }

void PbBurstDataIrqInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PbBurstDataIrqInfo *>(to)->MergeFrom(
      static_cast<const PbBurstDataIrqInfo &>(from));
}


void PbBurstDataIrqInfo::MergeFrom(const PbBurstDataIrqInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PbBurstDataIrqInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_irqdevfilename().empty()) {
    _internal_set_irqdevfilename(from._internal_irqdevfilename());
  }
  if (!from._internal_phymemaddr().empty()) {
    _internal_set_phymemaddr(from._internal_phymemaddr());
  }
  if (from._internal_channel() != 0) {
    _internal_set_channel(from._internal_channel());
  }
  if (from._internal_isenabled() != 0) {
    _internal_set_isenabled(from._internal_isenabled());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PbBurstDataIrqInfo::CopyFrom(const PbBurstDataIrqInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PbBurstDataIrqInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbBurstDataIrqInfo::IsInitialized() const {
  return true;
}

void PbBurstDataIrqInfo::InternalSwap(PbBurstDataIrqInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &irqdevfilename_, lhs_arena,
      &other->irqdevfilename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &phymemaddr_, lhs_arena,
      &other->phymemaddr_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PbBurstDataIrqInfo, isenabled_)
      + sizeof(PbBurstDataIrqInfo::isenabled_)
      - PROTOBUF_FIELD_OFFSET(PbBurstDataIrqInfo, channel_)>(
          reinterpret_cast<char*>(&channel_),
          reinterpret_cast<char*>(&other->channel_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PbBurstDataIrqInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ProductSwCfg_2eproto_getter, &descriptor_table_ProductSwCfg_2eproto_once,
      file_level_metadata_ProductSwCfg_2eproto[4]);
}

// ===================================================================

class ProductSwCfg::_Internal {
 public:
  static const ::PbNetProto& netproto(const ProductSwCfg* msg);
  static const ::PbDroneIdAttr& droneidattr(const ProductSwCfg* msg);
  static const ::PbMuteAttr& muteattr(const ProductSwCfg* msg);
  static const ::PbAlgCompensateAttr& algcompensateattr(const ProductSwCfg* msg);
};

const ::PbNetProto&
ProductSwCfg::_Internal::netproto(const ProductSwCfg* msg) {
  return *msg->netproto_;
}
const ::PbDroneIdAttr&
ProductSwCfg::_Internal::droneidattr(const ProductSwCfg* msg) {
  return *msg->droneidattr_;
}
const ::PbMuteAttr&
ProductSwCfg::_Internal::muteattr(const ProductSwCfg* msg) {
  return *msg->muteattr_;
}
const ::PbAlgCompensateAttr&
ProductSwCfg::_Internal::algcompensateattr(const ProductSwCfg* msg) {
  return *msg->algcompensateattr_;
}
ProductSwCfg::ProductSwCfg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  burstdatairqinfolist_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ProductSwCfg)
}
ProductSwCfg::ProductSwCfg(const ProductSwCfg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      burstdatairqinfolist_(from.burstdatairqinfolist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  vertype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_vertype().empty()) {
    vertype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_vertype(), 
      GetArenaForAllocation());
  }
  desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_desc().empty()) {
    desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_desc(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_netproto()) {
    netproto_ = new ::PbNetProto(*from.netproto_);
  } else {
    netproto_ = nullptr;
  }
  if (from._internal_has_droneidattr()) {
    droneidattr_ = new ::PbDroneIdAttr(*from.droneidattr_);
  } else {
    droneidattr_ = nullptr;
  }
  if (from._internal_has_muteattr()) {
    muteattr_ = new ::PbMuteAttr(*from.muteattr_);
  } else {
    muteattr_ = nullptr;
  }
  if (from._internal_has_algcompensateattr()) {
    algcompensateattr_ = new ::PbAlgCompensateAttr(*from.algcompensateattr_);
  } else {
    algcompensateattr_ = nullptr;
  }
  ::memcpy(&devicetype_, &from.devicetype_,
    static_cast<size_t>(reinterpret_cast<char*>(&issupporthitprotect_) -
    reinterpret_cast<char*>(&devicetype_)) + sizeof(issupporthitprotect_));
  // @@protoc_insertion_point(copy_constructor:ProductSwCfg)
}

void ProductSwCfg::SharedCtor() {
vertype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&netproto_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&issupporthitprotect_) -
    reinterpret_cast<char*>(&netproto_)) + sizeof(issupporthitprotect_));
}

ProductSwCfg::~ProductSwCfg() {
  // @@protoc_insertion_point(destructor:ProductSwCfg)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ProductSwCfg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  vertype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  desc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete netproto_;
  if (this != internal_default_instance()) delete droneidattr_;
  if (this != internal_default_instance()) delete muteattr_;
  if (this != internal_default_instance()) delete algcompensateattr_;
}

void ProductSwCfg::ArenaDtor(void* object) {
  ProductSwCfg* _this = reinterpret_cast< ProductSwCfg* >(object);
  (void)_this;
}
void ProductSwCfg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProductSwCfg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ProductSwCfg::Clear() {
// @@protoc_insertion_point(message_clear_start:ProductSwCfg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  burstdatairqinfolist_.Clear();
  vertype_.ClearToEmpty();
  desc_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && netproto_ != nullptr) {
    delete netproto_;
  }
  netproto_ = nullptr;
  if (GetArenaForAllocation() == nullptr && droneidattr_ != nullptr) {
    delete droneidattr_;
  }
  droneidattr_ = nullptr;
  if (GetArenaForAllocation() == nullptr && muteattr_ != nullptr) {
    delete muteattr_;
  }
  muteattr_ = nullptr;
  if (GetArenaForAllocation() == nullptr && algcompensateattr_ != nullptr) {
    delete algcompensateattr_;
  }
  algcompensateattr_ = nullptr;
  ::memset(&devicetype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&issupporthitprotect_) -
      reinterpret_cast<char*>(&devicetype_)) + sizeof(issupporthitprotect_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProductSwCfg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string verType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_vertype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ProductSwCfg.verType"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string desc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_desc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ProductSwCfg.desc"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .PbNetProto netProto = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_netproto(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 deviceType = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          devicetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool isSupportRemoteId = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          issupportremoteid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool isSupportDroneId = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          issupportdroneid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool isSupportSpectrum = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          issupportspectrum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool isSupportSpectrumOrient = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          issupportspectrumorient_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool isSupportAirborne = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          issupportairborne_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool isSupportAirborneOrient = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          issupportairborneorient_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool isSupportWarningWhitelist = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          issupportwarningwhitelist_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool isSupportHitProtect = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          issupporthitprotect_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .PbDroneIdAttr droneIdAttr = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_droneidattr(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .PbMuteAttr muteAttr = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_muteattr(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .PbAlgCompensateAttr algCompensateAttr = 110;
      case 110:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_algcompensateattr(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .PbBurstDataIrqInfo burstDataIrqInfoList = 200;
      case 200:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_burstdatairqinfolist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<1602>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProductSwCfg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProductSwCfg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string verType = 1;
  if (!this->_internal_vertype().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vertype().data(), static_cast<int>(this->_internal_vertype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ProductSwCfg.verType");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_vertype(), target);
  }

  // string desc = 2;
  if (!this->_internal_desc().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_desc().data(), static_cast<int>(this->_internal_desc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ProductSwCfg.desc");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_desc(), target);
  }

  // .PbNetProto netProto = 3;
  if (this->_internal_has_netproto()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::netproto(this), target, stream);
  }

  // uint32 deviceType = 4;
  if (this->_internal_devicetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_devicetype(), target);
  }

  // bool isSupportRemoteId = 16;
  if (this->_internal_issupportremoteid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_issupportremoteid(), target);
  }

  // bool isSupportDroneId = 17;
  if (this->_internal_issupportdroneid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(17, this->_internal_issupportdroneid(), target);
  }

  // bool isSupportSpectrum = 18;
  if (this->_internal_issupportspectrum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(18, this->_internal_issupportspectrum(), target);
  }

  // bool isSupportSpectrumOrient = 19;
  if (this->_internal_issupportspectrumorient() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(19, this->_internal_issupportspectrumorient(), target);
  }

  // bool isSupportAirborne = 20;
  if (this->_internal_issupportairborne() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(20, this->_internal_issupportairborne(), target);
  }

  // bool isSupportAirborneOrient = 21;
  if (this->_internal_issupportairborneorient() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(21, this->_internal_issupportairborneorient(), target);
  }

  // bool isSupportWarningWhitelist = 22;
  if (this->_internal_issupportwarningwhitelist() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(22, this->_internal_issupportwarningwhitelist(), target);
  }

  // bool isSupportHitProtect = 23;
  if (this->_internal_issupporthitprotect() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(23, this->_internal_issupporthitprotect(), target);
  }

  // .PbDroneIdAttr droneIdAttr = 100;
  if (this->_internal_has_droneidattr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        100, _Internal::droneidattr(this), target, stream);
  }

  // .PbMuteAttr muteAttr = 101;
  if (this->_internal_has_muteattr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        101, _Internal::muteattr(this), target, stream);
  }

  // .PbAlgCompensateAttr algCompensateAttr = 110;
  if (this->_internal_has_algcompensateattr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        110, _Internal::algcompensateattr(this), target, stream);
  }

  // repeated .PbBurstDataIrqInfo burstDataIrqInfoList = 200;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_burstdatairqinfolist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(200, this->_internal_burstdatairqinfolist(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProductSwCfg)
  return target;
}

size_t ProductSwCfg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProductSwCfg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PbBurstDataIrqInfo burstDataIrqInfoList = 200;
  total_size += 2UL * this->_internal_burstdatairqinfolist_size();
  for (const auto& msg : this->burstdatairqinfolist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string verType = 1;
  if (!this->_internal_vertype().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vertype());
  }

  // string desc = 2;
  if (!this->_internal_desc().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_desc());
  }

  // .PbNetProto netProto = 3;
  if (this->_internal_has_netproto()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *netproto_);
  }

  // .PbDroneIdAttr droneIdAttr = 100;
  if (this->_internal_has_droneidattr()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *droneidattr_);
  }

  // .PbMuteAttr muteAttr = 101;
  if (this->_internal_has_muteattr()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *muteattr_);
  }

  // .PbAlgCompensateAttr algCompensateAttr = 110;
  if (this->_internal_has_algcompensateattr()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *algcompensateattr_);
  }

  // uint32 deviceType = 4;
  if (this->_internal_devicetype() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_devicetype());
  }

  // bool isSupportRemoteId = 16;
  if (this->_internal_issupportremoteid() != 0) {
    total_size += 2 + 1;
  }

  // bool isSupportDroneId = 17;
  if (this->_internal_issupportdroneid() != 0) {
    total_size += 2 + 1;
  }

  // bool isSupportSpectrum = 18;
  if (this->_internal_issupportspectrum() != 0) {
    total_size += 2 + 1;
  }

  // bool isSupportSpectrumOrient = 19;
  if (this->_internal_issupportspectrumorient() != 0) {
    total_size += 2 + 1;
  }

  // bool isSupportAirborne = 20;
  if (this->_internal_issupportairborne() != 0) {
    total_size += 2 + 1;
  }

  // bool isSupportAirborneOrient = 21;
  if (this->_internal_issupportairborneorient() != 0) {
    total_size += 2 + 1;
  }

  // bool isSupportWarningWhitelist = 22;
  if (this->_internal_issupportwarningwhitelist() != 0) {
    total_size += 2 + 1;
  }

  // bool isSupportHitProtect = 23;
  if (this->_internal_issupporthitprotect() != 0) {
    total_size += 2 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProductSwCfg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ProductSwCfg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProductSwCfg::GetClassData() const { return &_class_data_; }

void ProductSwCfg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ProductSwCfg *>(to)->MergeFrom(
      static_cast<const ProductSwCfg &>(from));
}


void ProductSwCfg::MergeFrom(const ProductSwCfg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProductSwCfg)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  burstdatairqinfolist_.MergeFrom(from.burstdatairqinfolist_);
  if (!from._internal_vertype().empty()) {
    _internal_set_vertype(from._internal_vertype());
  }
  if (!from._internal_desc().empty()) {
    _internal_set_desc(from._internal_desc());
  }
  if (from._internal_has_netproto()) {
    _internal_mutable_netproto()->::PbNetProto::MergeFrom(from._internal_netproto());
  }
  if (from._internal_has_droneidattr()) {
    _internal_mutable_droneidattr()->::PbDroneIdAttr::MergeFrom(from._internal_droneidattr());
  }
  if (from._internal_has_muteattr()) {
    _internal_mutable_muteattr()->::PbMuteAttr::MergeFrom(from._internal_muteattr());
  }
  if (from._internal_has_algcompensateattr()) {
    _internal_mutable_algcompensateattr()->::PbAlgCompensateAttr::MergeFrom(from._internal_algcompensateattr());
  }
  if (from._internal_devicetype() != 0) {
    _internal_set_devicetype(from._internal_devicetype());
  }
  if (from._internal_issupportremoteid() != 0) {
    _internal_set_issupportremoteid(from._internal_issupportremoteid());
  }
  if (from._internal_issupportdroneid() != 0) {
    _internal_set_issupportdroneid(from._internal_issupportdroneid());
  }
  if (from._internal_issupportspectrum() != 0) {
    _internal_set_issupportspectrum(from._internal_issupportspectrum());
  }
  if (from._internal_issupportspectrumorient() != 0) {
    _internal_set_issupportspectrumorient(from._internal_issupportspectrumorient());
  }
  if (from._internal_issupportairborne() != 0) {
    _internal_set_issupportairborne(from._internal_issupportairborne());
  }
  if (from._internal_issupportairborneorient() != 0) {
    _internal_set_issupportairborneorient(from._internal_issupportairborneorient());
  }
  if (from._internal_issupportwarningwhitelist() != 0) {
    _internal_set_issupportwarningwhitelist(from._internal_issupportwarningwhitelist());
  }
  if (from._internal_issupporthitprotect() != 0) {
    _internal_set_issupporthitprotect(from._internal_issupporthitprotect());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProductSwCfg::CopyFrom(const ProductSwCfg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProductSwCfg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProductSwCfg::IsInitialized() const {
  return true;
}

void ProductSwCfg::InternalSwap(ProductSwCfg* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  burstdatairqinfolist_.InternalSwap(&other->burstdatairqinfolist_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &vertype_, lhs_arena,
      &other->vertype_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &desc_, lhs_arena,
      &other->desc_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProductSwCfg, issupporthitprotect_)
      + sizeof(ProductSwCfg::issupporthitprotect_)
      - PROTOBUF_FIELD_OFFSET(ProductSwCfg, netproto_)>(
          reinterpret_cast<char*>(&netproto_),
          reinterpret_cast<char*>(&other->netproto_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProductSwCfg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ProductSwCfg_2eproto_getter, &descriptor_table_ProductSwCfg_2eproto_once,
      file_level_metadata_ProductSwCfg_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::PbDroneIdAttr* Arena::CreateMaybeMessage< ::PbDroneIdAttr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PbDroneIdAttr >(arena);
}
template<> PROTOBUF_NOINLINE ::PbMuteAttr* Arena::CreateMaybeMessage< ::PbMuteAttr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PbMuteAttr >(arena);
}
template<> PROTOBUF_NOINLINE ::PbNetProto* Arena::CreateMaybeMessage< ::PbNetProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PbNetProto >(arena);
}
template<> PROTOBUF_NOINLINE ::PbAlgCompensateAttr* Arena::CreateMaybeMessage< ::PbAlgCompensateAttr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PbAlgCompensateAttr >(arena);
}
template<> PROTOBUF_NOINLINE ::PbBurstDataIrqInfo* Arena::CreateMaybeMessage< ::PbBurstDataIrqInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PbBurstDataIrqInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ProductSwCfg* Arena::CreateMaybeMessage< ::ProductSwCfg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProductSwCfg >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
