// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MavAlink.proto

#include "MavAlink.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr ReportDroneIdPB_DroneInfo::ReportDroneIdPB_DroneInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : dronename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , serialnum_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , producttype_(0u)
  , dronelongitude_(0)
  , dronelatitude_(0)
  , droneheight_(0)
  , droneyawangle_(0)
  , dronespeed_(0)
  , speedderection_(0)
  , droneverticalspeed_(0)
  , pilotlongitude_(0)
  , pilotlatitude_(0)
  , ufreq_(0u)
  , udistance_(0u)
  , dangerlevels_(0u){}
struct ReportDroneIdPB_DroneInfoDefaultTypeInternal {
  constexpr ReportDroneIdPB_DroneInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReportDroneIdPB_DroneInfoDefaultTypeInternal() {}
  union {
    ReportDroneIdPB_DroneInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReportDroneIdPB_DroneInfoDefaultTypeInternal _ReportDroneIdPB_DroneInfo_default_instance_;
constexpr ReportDroneIdPB::ReportDroneIdPB(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : drones_()
  , tracername_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , udronenum_(0){}
struct ReportDroneIdPBDefaultTypeInternal {
  constexpr ReportDroneIdPBDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReportDroneIdPBDefaultTypeInternal() {}
  union {
    ReportDroneIdPB _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReportDroneIdPBDefaultTypeInternal _ReportDroneIdPB_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_MavAlink_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_MavAlink_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_MavAlink_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_MavAlink_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ReportDroneIdPB_DroneInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ReportDroneIdPB_DroneInfo, producttype_),
  PROTOBUF_FIELD_OFFSET(::ReportDroneIdPB_DroneInfo, dronename_),
  PROTOBUF_FIELD_OFFSET(::ReportDroneIdPB_DroneInfo, serialnum_),
  PROTOBUF_FIELD_OFFSET(::ReportDroneIdPB_DroneInfo, dronelongitude_),
  PROTOBUF_FIELD_OFFSET(::ReportDroneIdPB_DroneInfo, dronelatitude_),
  PROTOBUF_FIELD_OFFSET(::ReportDroneIdPB_DroneInfo, droneheight_),
  PROTOBUF_FIELD_OFFSET(::ReportDroneIdPB_DroneInfo, droneyawangle_),
  PROTOBUF_FIELD_OFFSET(::ReportDroneIdPB_DroneInfo, dronespeed_),
  PROTOBUF_FIELD_OFFSET(::ReportDroneIdPB_DroneInfo, speedderection_),
  PROTOBUF_FIELD_OFFSET(::ReportDroneIdPB_DroneInfo, droneverticalspeed_),
  PROTOBUF_FIELD_OFFSET(::ReportDroneIdPB_DroneInfo, pilotlongitude_),
  PROTOBUF_FIELD_OFFSET(::ReportDroneIdPB_DroneInfo, pilotlatitude_),
  PROTOBUF_FIELD_OFFSET(::ReportDroneIdPB_DroneInfo, ufreq_),
  PROTOBUF_FIELD_OFFSET(::ReportDroneIdPB_DroneInfo, udistance_),
  PROTOBUF_FIELD_OFFSET(::ReportDroneIdPB_DroneInfo, dangerlevels_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ReportDroneIdPB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ReportDroneIdPB, tracername_),
  PROTOBUF_FIELD_OFFSET(::ReportDroneIdPB, udronenum_),
  PROTOBUF_FIELD_OFFSET(::ReportDroneIdPB, drones_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::ReportDroneIdPB_DroneInfo)},
  { 21, -1, -1, sizeof(::ReportDroneIdPB)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ReportDroneIdPB_DroneInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ReportDroneIdPB_default_instance_),
};

const char descriptor_table_protodef_MavAlink_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016MavAlink.proto\"\267\003\n\017ReportDroneIdPB\022\022\n\n"
  "tracerName\030\001 \001(\t\022\021\n\tuDroneNum\030\002 \001(\005\022*\n\006d"
  "rones\030\003 \003(\0132\032.ReportDroneIdPB.DroneInfo\032"
  "\320\002\n\tDroneInfo\022\023\n\013productType\030\001 \001(\r\022\021\n\tdr"
  "oneName\030\002 \001(\t\022\021\n\tserialNum\030\003 \001(\t\022\026\n\016dron"
  "eLongitude\030\004 \001(\005\022\025\n\rdroneLatitude\030\005 \001(\005\022"
  "\023\n\013droneHeight\030\006 \001(\005\022\025\n\rdroneYawAngle\030\007 "
  "\001(\005\022\022\n\ndroneSpeed\030\010 \001(\005\022\026\n\016speedderectio"
  "n\030\t \001(\005\022\032\n\022droneVerticalSpeed\030\n \001(\005\022\026\n\016p"
  "ilotLongitude\030\013 \001(\005\022\025\n\rpilotLatitude\030\014 \001"
  "(\005\022\r\n\005uFreq\030\r \001(\r\022\021\n\tuDistance\030\016 \001(\r\022\024\n\014"
  "dangerLevels\030\017 \001(\rb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_MavAlink_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_MavAlink_2eproto = {
  false, false, 466, descriptor_table_protodef_MavAlink_2eproto, "MavAlink.proto", 
  &descriptor_table_MavAlink_2eproto_once, nullptr, 0, 2,
  schemas, file_default_instances, TableStruct_MavAlink_2eproto::offsets,
  file_level_metadata_MavAlink_2eproto, file_level_enum_descriptors_MavAlink_2eproto, file_level_service_descriptors_MavAlink_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_MavAlink_2eproto_getter() {
  return &descriptor_table_MavAlink_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_MavAlink_2eproto(&descriptor_table_MavAlink_2eproto);

// ===================================================================

class ReportDroneIdPB_DroneInfo::_Internal {
 public:
};

ReportDroneIdPB_DroneInfo::ReportDroneIdPB_DroneInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ReportDroneIdPB.DroneInfo)
}
ReportDroneIdPB_DroneInfo::ReportDroneIdPB_DroneInfo(const ReportDroneIdPB_DroneInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  dronename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dronename().empty()) {
    dronename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_dronename(), 
      GetArenaForAllocation());
  }
  serialnum_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_serialnum().empty()) {
    serialnum_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_serialnum(), 
      GetArenaForAllocation());
  }
  ::memcpy(&producttype_, &from.producttype_,
    static_cast<size_t>(reinterpret_cast<char*>(&dangerlevels_) -
    reinterpret_cast<char*>(&producttype_)) + sizeof(dangerlevels_));
  // @@protoc_insertion_point(copy_constructor:ReportDroneIdPB.DroneInfo)
}

void ReportDroneIdPB_DroneInfo::SharedCtor() {
dronename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
serialnum_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&producttype_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&dangerlevels_) -
    reinterpret_cast<char*>(&producttype_)) + sizeof(dangerlevels_));
}

ReportDroneIdPB_DroneInfo::~ReportDroneIdPB_DroneInfo() {
  // @@protoc_insertion_point(destructor:ReportDroneIdPB.DroneInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ReportDroneIdPB_DroneInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  dronename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  serialnum_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReportDroneIdPB_DroneInfo::ArenaDtor(void* object) {
  ReportDroneIdPB_DroneInfo* _this = reinterpret_cast< ReportDroneIdPB_DroneInfo* >(object);
  (void)_this;
}
void ReportDroneIdPB_DroneInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReportDroneIdPB_DroneInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReportDroneIdPB_DroneInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ReportDroneIdPB.DroneInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dronename_.ClearToEmpty();
  serialnum_.ClearToEmpty();
  ::memset(&producttype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dangerlevels_) -
      reinterpret_cast<char*>(&producttype_)) + sizeof(dangerlevels_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReportDroneIdPB_DroneInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 productType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          producttype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string droneName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_dronename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ReportDroneIdPB.DroneInfo.droneName"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string serialNum = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_serialnum();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ReportDroneIdPB.DroneInfo.serialNum"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 droneLongitude = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          dronelongitude_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 droneLatitude = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          dronelatitude_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 droneHeight = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          droneheight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 droneYawAngle = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          droneyawangle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 droneSpeed = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          dronespeed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 speedderection = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          speedderection_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 droneVerticalSpeed = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          droneverticalspeed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 pilotLongitude = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          pilotlongitude_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 pilotLatitude = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          pilotlatitude_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 uFreq = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          ufreq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 uDistance = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          udistance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 dangerLevels = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          dangerlevels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReportDroneIdPB_DroneInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ReportDroneIdPB.DroneInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 productType = 1;
  if (this->_internal_producttype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_producttype(), target);
  }

  // string droneName = 2;
  if (!this->_internal_dronename().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dronename().data(), static_cast<int>(this->_internal_dronename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ReportDroneIdPB.DroneInfo.droneName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_dronename(), target);
  }

  // string serialNum = 3;
  if (!this->_internal_serialnum().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_serialnum().data(), static_cast<int>(this->_internal_serialnum().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ReportDroneIdPB.DroneInfo.serialNum");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_serialnum(), target);
  }

  // int32 droneLongitude = 4;
  if (this->_internal_dronelongitude() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_dronelongitude(), target);
  }

  // int32 droneLatitude = 5;
  if (this->_internal_dronelatitude() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_dronelatitude(), target);
  }

  // int32 droneHeight = 6;
  if (this->_internal_droneheight() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_droneheight(), target);
  }

  // int32 droneYawAngle = 7;
  if (this->_internal_droneyawangle() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_droneyawangle(), target);
  }

  // int32 droneSpeed = 8;
  if (this->_internal_dronespeed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_dronespeed(), target);
  }

  // int32 speedderection = 9;
  if (this->_internal_speedderection() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_speedderection(), target);
  }

  // int32 droneVerticalSpeed = 10;
  if (this->_internal_droneverticalspeed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_droneverticalspeed(), target);
  }

  // int32 pilotLongitude = 11;
  if (this->_internal_pilotlongitude() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_pilotlongitude(), target);
  }

  // int32 pilotLatitude = 12;
  if (this->_internal_pilotlatitude() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_pilotlatitude(), target);
  }

  // uint32 uFreq = 13;
  if (this->_internal_ufreq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_ufreq(), target);
  }

  // uint32 uDistance = 14;
  if (this->_internal_udistance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_udistance(), target);
  }

  // uint32 dangerLevels = 15;
  if (this->_internal_dangerlevels() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_dangerlevels(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ReportDroneIdPB.DroneInfo)
  return target;
}

size_t ReportDroneIdPB_DroneInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ReportDroneIdPB.DroneInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string droneName = 2;
  if (!this->_internal_dronename().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dronename());
  }

  // string serialNum = 3;
  if (!this->_internal_serialnum().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_serialnum());
  }

  // uint32 productType = 1;
  if (this->_internal_producttype() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_producttype());
  }

  // int32 droneLongitude = 4;
  if (this->_internal_dronelongitude() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_dronelongitude());
  }

  // int32 droneLatitude = 5;
  if (this->_internal_dronelatitude() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_dronelatitude());
  }

  // int32 droneHeight = 6;
  if (this->_internal_droneheight() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_droneheight());
  }

  // int32 droneYawAngle = 7;
  if (this->_internal_droneyawangle() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_droneyawangle());
  }

  // int32 droneSpeed = 8;
  if (this->_internal_dronespeed() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_dronespeed());
  }

  // int32 speedderection = 9;
  if (this->_internal_speedderection() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_speedderection());
  }

  // int32 droneVerticalSpeed = 10;
  if (this->_internal_droneverticalspeed() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_droneverticalspeed());
  }

  // int32 pilotLongitude = 11;
  if (this->_internal_pilotlongitude() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_pilotlongitude());
  }

  // int32 pilotLatitude = 12;
  if (this->_internal_pilotlatitude() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_pilotlatitude());
  }

  // uint32 uFreq = 13;
  if (this->_internal_ufreq() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_ufreq());
  }

  // uint32 uDistance = 14;
  if (this->_internal_udistance() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_udistance());
  }

  // uint32 dangerLevels = 15;
  if (this->_internal_dangerlevels() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_dangerlevels());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReportDroneIdPB_DroneInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReportDroneIdPB_DroneInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReportDroneIdPB_DroneInfo::GetClassData() const { return &_class_data_; }

void ReportDroneIdPB_DroneInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReportDroneIdPB_DroneInfo *>(to)->MergeFrom(
      static_cast<const ReportDroneIdPB_DroneInfo &>(from));
}


void ReportDroneIdPB_DroneInfo::MergeFrom(const ReportDroneIdPB_DroneInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ReportDroneIdPB.DroneInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_dronename().empty()) {
    _internal_set_dronename(from._internal_dronename());
  }
  if (!from._internal_serialnum().empty()) {
    _internal_set_serialnum(from._internal_serialnum());
  }
  if (from._internal_producttype() != 0) {
    _internal_set_producttype(from._internal_producttype());
  }
  if (from._internal_dronelongitude() != 0) {
    _internal_set_dronelongitude(from._internal_dronelongitude());
  }
  if (from._internal_dronelatitude() != 0) {
    _internal_set_dronelatitude(from._internal_dronelatitude());
  }
  if (from._internal_droneheight() != 0) {
    _internal_set_droneheight(from._internal_droneheight());
  }
  if (from._internal_droneyawangle() != 0) {
    _internal_set_droneyawangle(from._internal_droneyawangle());
  }
  if (from._internal_dronespeed() != 0) {
    _internal_set_dronespeed(from._internal_dronespeed());
  }
  if (from._internal_speedderection() != 0) {
    _internal_set_speedderection(from._internal_speedderection());
  }
  if (from._internal_droneverticalspeed() != 0) {
    _internal_set_droneverticalspeed(from._internal_droneverticalspeed());
  }
  if (from._internal_pilotlongitude() != 0) {
    _internal_set_pilotlongitude(from._internal_pilotlongitude());
  }
  if (from._internal_pilotlatitude() != 0) {
    _internal_set_pilotlatitude(from._internal_pilotlatitude());
  }
  if (from._internal_ufreq() != 0) {
    _internal_set_ufreq(from._internal_ufreq());
  }
  if (from._internal_udistance() != 0) {
    _internal_set_udistance(from._internal_udistance());
  }
  if (from._internal_dangerlevels() != 0) {
    _internal_set_dangerlevels(from._internal_dangerlevels());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReportDroneIdPB_DroneInfo::CopyFrom(const ReportDroneIdPB_DroneInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ReportDroneIdPB.DroneInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportDroneIdPB_DroneInfo::IsInitialized() const {
  return true;
}

void ReportDroneIdPB_DroneInfo::InternalSwap(ReportDroneIdPB_DroneInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &dronename_, lhs_arena,
      &other->dronename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &serialnum_, lhs_arena,
      &other->serialnum_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReportDroneIdPB_DroneInfo, dangerlevels_)
      + sizeof(ReportDroneIdPB_DroneInfo::dangerlevels_)
      - PROTOBUF_FIELD_OFFSET(ReportDroneIdPB_DroneInfo, producttype_)>(
          reinterpret_cast<char*>(&producttype_),
          reinterpret_cast<char*>(&other->producttype_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReportDroneIdPB_DroneInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_MavAlink_2eproto_getter, &descriptor_table_MavAlink_2eproto_once,
      file_level_metadata_MavAlink_2eproto[0]);
}

// ===================================================================

class ReportDroneIdPB::_Internal {
 public:
};

ReportDroneIdPB::ReportDroneIdPB(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  drones_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ReportDroneIdPB)
}
ReportDroneIdPB::ReportDroneIdPB(const ReportDroneIdPB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      drones_(from.drones_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tracername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tracername().empty()) {
    tracername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tracername(), 
      GetArenaForAllocation());
  }
  udronenum_ = from.udronenum_;
  // @@protoc_insertion_point(copy_constructor:ReportDroneIdPB)
}

void ReportDroneIdPB::SharedCtor() {
tracername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
udronenum_ = 0;
}

ReportDroneIdPB::~ReportDroneIdPB() {
  // @@protoc_insertion_point(destructor:ReportDroneIdPB)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ReportDroneIdPB::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  tracername_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReportDroneIdPB::ArenaDtor(void* object) {
  ReportDroneIdPB* _this = reinterpret_cast< ReportDroneIdPB* >(object);
  (void)_this;
}
void ReportDroneIdPB::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReportDroneIdPB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReportDroneIdPB::Clear() {
// @@protoc_insertion_point(message_clear_start:ReportDroneIdPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  drones_.Clear();
  tracername_.ClearToEmpty();
  udronenum_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReportDroneIdPB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string tracerName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_tracername();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ReportDroneIdPB.tracerName"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 uDroneNum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          udronenum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .ReportDroneIdPB.DroneInfo drones = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_drones(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReportDroneIdPB::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ReportDroneIdPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tracerName = 1;
  if (!this->_internal_tracername().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tracername().data(), static_cast<int>(this->_internal_tracername().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ReportDroneIdPB.tracerName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tracername(), target);
  }

  // int32 uDroneNum = 2;
  if (this->_internal_udronenum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_udronenum(), target);
  }

  // repeated .ReportDroneIdPB.DroneInfo drones = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_drones_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_drones(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ReportDroneIdPB)
  return target;
}

size_t ReportDroneIdPB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ReportDroneIdPB)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ReportDroneIdPB.DroneInfo drones = 3;
  total_size += 1UL * this->_internal_drones_size();
  for (const auto& msg : this->drones_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string tracerName = 1;
  if (!this->_internal_tracername().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tracername());
  }

  // int32 uDroneNum = 2;
  if (this->_internal_udronenum() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_udronenum());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReportDroneIdPB::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReportDroneIdPB::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReportDroneIdPB::GetClassData() const { return &_class_data_; }

void ReportDroneIdPB::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReportDroneIdPB *>(to)->MergeFrom(
      static_cast<const ReportDroneIdPB &>(from));
}


void ReportDroneIdPB::MergeFrom(const ReportDroneIdPB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ReportDroneIdPB)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  drones_.MergeFrom(from.drones_);
  if (!from._internal_tracername().empty()) {
    _internal_set_tracername(from._internal_tracername());
  }
  if (from._internal_udronenum() != 0) {
    _internal_set_udronenum(from._internal_udronenum());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReportDroneIdPB::CopyFrom(const ReportDroneIdPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ReportDroneIdPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportDroneIdPB::IsInitialized() const {
  return true;
}

void ReportDroneIdPB::InternalSwap(ReportDroneIdPB* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  drones_.InternalSwap(&other->drones_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &tracername_, lhs_arena,
      &other->tracername_, rhs_arena
  );
  swap(udronenum_, other->udronenum_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReportDroneIdPB::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_MavAlink_2eproto_getter, &descriptor_table_MavAlink_2eproto_once,
      file_level_metadata_MavAlink_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ReportDroneIdPB_DroneInfo* Arena::CreateMaybeMessage< ::ReportDroneIdPB_DroneInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ReportDroneIdPB_DroneInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ReportDroneIdPB* Arena::CreateMaybeMessage< ::ReportDroneIdPB >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ReportDroneIdPB >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
