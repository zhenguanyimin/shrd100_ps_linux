// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProductSwCfg.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ProductSwCfg_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ProductSwCfg_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ProductSwCfg_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ProductSwCfg_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ProductSwCfg_2eproto;
class PbAlgCompensateAttr;
struct PbAlgCompensateAttrDefaultTypeInternal;
extern PbAlgCompensateAttrDefaultTypeInternal _PbAlgCompensateAttr_default_instance_;
class PbBurstDataIrqInfo;
struct PbBurstDataIrqInfoDefaultTypeInternal;
extern PbBurstDataIrqInfoDefaultTypeInternal _PbBurstDataIrqInfo_default_instance_;
class PbDroneIdAttr;
struct PbDroneIdAttrDefaultTypeInternal;
extern PbDroneIdAttrDefaultTypeInternal _PbDroneIdAttr_default_instance_;
class PbMuteAttr;
struct PbMuteAttrDefaultTypeInternal;
extern PbMuteAttrDefaultTypeInternal _PbMuteAttr_default_instance_;
class PbNetProto;
struct PbNetProtoDefaultTypeInternal;
extern PbNetProtoDefaultTypeInternal _PbNetProto_default_instance_;
class ProductSwCfg;
struct ProductSwCfgDefaultTypeInternal;
extern ProductSwCfgDefaultTypeInternal _ProductSwCfg_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::PbAlgCompensateAttr* Arena::CreateMaybeMessage<::PbAlgCompensateAttr>(Arena*);
template<> ::PbBurstDataIrqInfo* Arena::CreateMaybeMessage<::PbBurstDataIrqInfo>(Arena*);
template<> ::PbDroneIdAttr* Arena::CreateMaybeMessage<::PbDroneIdAttr>(Arena*);
template<> ::PbMuteAttr* Arena::CreateMaybeMessage<::PbMuteAttr>(Arena*);
template<> ::PbNetProto* Arena::CreateMaybeMessage<::PbNetProto>(Arena*);
template<> ::ProductSwCfg* Arena::CreateMaybeMessage<::ProductSwCfg>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class PbDroneIdAttr final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PbDroneIdAttr) */ {
 public:
  inline PbDroneIdAttr() : PbDroneIdAttr(nullptr) {}
  ~PbDroneIdAttr() override;
  explicit constexpr PbDroneIdAttr(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PbDroneIdAttr(const PbDroneIdAttr& from);
  PbDroneIdAttr(PbDroneIdAttr&& from) noexcept
    : PbDroneIdAttr() {
    *this = ::std::move(from);
  }

  inline PbDroneIdAttr& operator=(const PbDroneIdAttr& from) {
    CopyFrom(from);
    return *this;
  }
  inline PbDroneIdAttr& operator=(PbDroneIdAttr&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PbDroneIdAttr& default_instance() {
    return *internal_default_instance();
  }
  static inline const PbDroneIdAttr* internal_default_instance() {
    return reinterpret_cast<const PbDroneIdAttr*>(
               &_PbDroneIdAttr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PbDroneIdAttr& a, PbDroneIdAttr& b) {
    a.Swap(&b);
  }
  inline void Swap(PbDroneIdAttr* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PbDroneIdAttr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PbDroneIdAttr* New() const final {
    return new PbDroneIdAttr();
  }

  PbDroneIdAttr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PbDroneIdAttr>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PbDroneIdAttr& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PbDroneIdAttr& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PbDroneIdAttr* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PbDroneIdAttr";
  }
  protected:
  explicit PbDroneIdAttr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsEnableDmaFFTFieldNumber = 1,
  };
  // bool isEnableDmaFFT = 1;
  void clear_isenabledmafft();
  bool isenabledmafft() const;
  void set_isenabledmafft(bool value);
  private:
  bool _internal_isenabledmafft() const;
  void _internal_set_isenabledmafft(bool value);
  public:

  // @@protoc_insertion_point(class_scope:PbDroneIdAttr)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool isenabledmafft_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ProductSwCfg_2eproto;
};
// -------------------------------------------------------------------

class PbMuteAttr final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PbMuteAttr) */ {
 public:
  inline PbMuteAttr() : PbMuteAttr(nullptr) {}
  ~PbMuteAttr() override;
  explicit constexpr PbMuteAttr(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PbMuteAttr(const PbMuteAttr& from);
  PbMuteAttr(PbMuteAttr&& from) noexcept
    : PbMuteAttr() {
    *this = ::std::move(from);
  }

  inline PbMuteAttr& operator=(const PbMuteAttr& from) {
    CopyFrom(from);
    return *this;
  }
  inline PbMuteAttr& operator=(PbMuteAttr&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PbMuteAttr& default_instance() {
    return *internal_default_instance();
  }
  static inline const PbMuteAttr* internal_default_instance() {
    return reinterpret_cast<const PbMuteAttr*>(
               &_PbMuteAttr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PbMuteAttr& a, PbMuteAttr& b) {
    a.Swap(&b);
  }
  inline void Swap(PbMuteAttr* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PbMuteAttr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PbMuteAttr* New() const final {
    return new PbMuteAttr();
  }

  PbMuteAttr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PbMuteAttr>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PbMuteAttr& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PbMuteAttr& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PbMuteAttr* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PbMuteAttr";
  }
  protected:
  explicit PbMuteAttr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsSupportMuteModeFieldNumber = 1,
    kIsSupportSwitchVersionFieldNumber = 2,
  };
  // bool isSupportMuteMode = 1;
  void clear_issupportmutemode();
  bool issupportmutemode() const;
  void set_issupportmutemode(bool value);
  private:
  bool _internal_issupportmutemode() const;
  void _internal_set_issupportmutemode(bool value);
  public:

  // bool isSupportSwitchVersion = 2;
  void clear_issupportswitchversion();
  bool issupportswitchversion() const;
  void set_issupportswitchversion(bool value);
  private:
  bool _internal_issupportswitchversion() const;
  void _internal_set_issupportswitchversion(bool value);
  public:

  // @@protoc_insertion_point(class_scope:PbMuteAttr)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool issupportmutemode_;
  bool issupportswitchversion_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ProductSwCfg_2eproto;
};
// -------------------------------------------------------------------

class PbNetProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PbNetProto) */ {
 public:
  inline PbNetProto() : PbNetProto(nullptr) {}
  ~PbNetProto() override;
  explicit constexpr PbNetProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PbNetProto(const PbNetProto& from);
  PbNetProto(PbNetProto&& from) noexcept
    : PbNetProto() {
    *this = ::std::move(from);
  }

  inline PbNetProto& operator=(const PbNetProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline PbNetProto& operator=(PbNetProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PbNetProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const PbNetProto* internal_default_instance() {
    return reinterpret_cast<const PbNetProto*>(
               &_PbNetProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PbNetProto& a, PbNetProto& b) {
    a.Swap(&b);
  }
  inline void Swap(PbNetProto* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PbNetProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PbNetProto* New() const final {
    return new PbNetProto();
  }

  PbNetProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PbNetProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PbNetProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PbNetProto& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PbNetProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PbNetProto";
  }
  protected:
  explicit PbNetProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNetProtoTypeFieldNumber = 1,
  };
  // uint32 netProtoType = 1;
  void clear_netprototype();
  ::PROTOBUF_NAMESPACE_ID::uint32 netprototype() const;
  void set_netprototype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_netprototype() const;
  void _internal_set_netprototype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:PbNetProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 netprototype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ProductSwCfg_2eproto;
};
// -------------------------------------------------------------------

class PbAlgCompensateAttr final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PbAlgCompensateAttr) */ {
 public:
  inline PbAlgCompensateAttr() : PbAlgCompensateAttr(nullptr) {}
  ~PbAlgCompensateAttr() override;
  explicit constexpr PbAlgCompensateAttr(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PbAlgCompensateAttr(const PbAlgCompensateAttr& from);
  PbAlgCompensateAttr(PbAlgCompensateAttr&& from) noexcept
    : PbAlgCompensateAttr() {
    *this = ::std::move(from);
  }

  inline PbAlgCompensateAttr& operator=(const PbAlgCompensateAttr& from) {
    CopyFrom(from);
    return *this;
  }
  inline PbAlgCompensateAttr& operator=(PbAlgCompensateAttr&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PbAlgCompensateAttr& default_instance() {
    return *internal_default_instance();
  }
  static inline const PbAlgCompensateAttr* internal_default_instance() {
    return reinterpret_cast<const PbAlgCompensateAttr*>(
               &_PbAlgCompensateAttr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PbAlgCompensateAttr& a, PbAlgCompensateAttr& b) {
    a.Swap(&b);
  }
  inline void Swap(PbAlgCompensateAttr* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PbAlgCompensateAttr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PbAlgCompensateAttr* New() const final {
    return new PbAlgCompensateAttr();
  }

  PbAlgCompensateAttr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PbAlgCompensateAttr>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PbAlgCompensateAttr& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PbAlgCompensateAttr& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PbAlgCompensateAttr* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PbAlgCompensateAttr";
  }
  protected:
  explicit PbAlgCompensateAttr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilePathFieldNumber = 1,
    kFileNameFieldNumber = 2,
  };
  // string file_path = 1;
  void clear_file_path();
  const std::string& file_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_path();
  PROTOBUF_MUST_USE_RESULT std::string* release_file_path();
  void set_allocated_file_path(std::string* file_path);
  private:
  const std::string& _internal_file_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_path(const std::string& value);
  std::string* _internal_mutable_file_path();
  public:

  // string file_name = 2;
  void clear_file_name();
  const std::string& file_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_file_name();
  void set_allocated_file_name(std::string* file_name);
  private:
  const std::string& _internal_file_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_name(const std::string& value);
  std::string* _internal_mutable_file_name();
  public:

  // @@protoc_insertion_point(class_scope:PbAlgCompensateAttr)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ProductSwCfg_2eproto;
};
// -------------------------------------------------------------------

class PbBurstDataIrqInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PbBurstDataIrqInfo) */ {
 public:
  inline PbBurstDataIrqInfo() : PbBurstDataIrqInfo(nullptr) {}
  ~PbBurstDataIrqInfo() override;
  explicit constexpr PbBurstDataIrqInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PbBurstDataIrqInfo(const PbBurstDataIrqInfo& from);
  PbBurstDataIrqInfo(PbBurstDataIrqInfo&& from) noexcept
    : PbBurstDataIrqInfo() {
    *this = ::std::move(from);
  }

  inline PbBurstDataIrqInfo& operator=(const PbBurstDataIrqInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PbBurstDataIrqInfo& operator=(PbBurstDataIrqInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PbBurstDataIrqInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const PbBurstDataIrqInfo* internal_default_instance() {
    return reinterpret_cast<const PbBurstDataIrqInfo*>(
               &_PbBurstDataIrqInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PbBurstDataIrqInfo& a, PbBurstDataIrqInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PbBurstDataIrqInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PbBurstDataIrqInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PbBurstDataIrqInfo* New() const final {
    return new PbBurstDataIrqInfo();
  }

  PbBurstDataIrqInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PbBurstDataIrqInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PbBurstDataIrqInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PbBurstDataIrqInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PbBurstDataIrqInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PbBurstDataIrqInfo";
  }
  protected:
  explicit PbBurstDataIrqInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIrqDevFileNameFieldNumber = 3,
    kPhyMemAddrFieldNumber = 4,
    kChannelFieldNumber = 1,
    kIsEnabledFieldNumber = 2,
  };
  // string irqDevFileName = 3;
  void clear_irqdevfilename();
  const std::string& irqdevfilename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_irqdevfilename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_irqdevfilename();
  PROTOBUF_MUST_USE_RESULT std::string* release_irqdevfilename();
  void set_allocated_irqdevfilename(std::string* irqdevfilename);
  private:
  const std::string& _internal_irqdevfilename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_irqdevfilename(const std::string& value);
  std::string* _internal_mutable_irqdevfilename();
  public:

  // string phyMemAddr = 4;
  void clear_phymemaddr();
  const std::string& phymemaddr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_phymemaddr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_phymemaddr();
  PROTOBUF_MUST_USE_RESULT std::string* release_phymemaddr();
  void set_allocated_phymemaddr(std::string* phymemaddr);
  private:
  const std::string& _internal_phymemaddr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_phymemaddr(const std::string& value);
  std::string* _internal_mutable_phymemaddr();
  public:

  // int32 channel = 1;
  void clear_channel();
  ::PROTOBUF_NAMESPACE_ID::int32 channel() const;
  void set_channel(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_channel() const;
  void _internal_set_channel(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool isEnabled = 2;
  void clear_isenabled();
  bool isenabled() const;
  void set_isenabled(bool value);
  private:
  bool _internal_isenabled() const;
  void _internal_set_isenabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:PbBurstDataIrqInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr irqdevfilename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr phymemaddr_;
  ::PROTOBUF_NAMESPACE_ID::int32 channel_;
  bool isenabled_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ProductSwCfg_2eproto;
};
// -------------------------------------------------------------------

class ProductSwCfg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProductSwCfg) */ {
 public:
  inline ProductSwCfg() : ProductSwCfg(nullptr) {}
  ~ProductSwCfg() override;
  explicit constexpr ProductSwCfg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProductSwCfg(const ProductSwCfg& from);
  ProductSwCfg(ProductSwCfg&& from) noexcept
    : ProductSwCfg() {
    *this = ::std::move(from);
  }

  inline ProductSwCfg& operator=(const ProductSwCfg& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProductSwCfg& operator=(ProductSwCfg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProductSwCfg& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProductSwCfg* internal_default_instance() {
    return reinterpret_cast<const ProductSwCfg*>(
               &_ProductSwCfg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ProductSwCfg& a, ProductSwCfg& b) {
    a.Swap(&b);
  }
  inline void Swap(ProductSwCfg* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProductSwCfg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProductSwCfg* New() const final {
    return new ProductSwCfg();
  }

  ProductSwCfg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProductSwCfg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProductSwCfg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ProductSwCfg& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProductSwCfg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProductSwCfg";
  }
  protected:
  explicit ProductSwCfg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBurstDataIrqInfoListFieldNumber = 200,
    kVerTypeFieldNumber = 1,
    kDescFieldNumber = 2,
    kNetProtoFieldNumber = 3,
    kDroneIdAttrFieldNumber = 100,
    kMuteAttrFieldNumber = 101,
    kAlgCompensateAttrFieldNumber = 110,
    kDeviceTypeFieldNumber = 4,
    kIsSupportRemoteIdFieldNumber = 16,
    kIsSupportDroneIdFieldNumber = 17,
    kIsSupportSpectrumFieldNumber = 18,
    kIsSupportSpectrumOrientFieldNumber = 19,
    kIsSupportAirborneFieldNumber = 20,
    kIsSupportAirborneOrientFieldNumber = 21,
    kIsSupportWarningWhitelistFieldNumber = 22,
    kIsSupportHitProtectFieldNumber = 23,
  };
  // repeated .PbBurstDataIrqInfo burstDataIrqInfoList = 200;
  int burstdatairqinfolist_size() const;
  private:
  int _internal_burstdatairqinfolist_size() const;
  public:
  void clear_burstdatairqinfolist();
  ::PbBurstDataIrqInfo* mutable_burstdatairqinfolist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PbBurstDataIrqInfo >*
      mutable_burstdatairqinfolist();
  private:
  const ::PbBurstDataIrqInfo& _internal_burstdatairqinfolist(int index) const;
  ::PbBurstDataIrqInfo* _internal_add_burstdatairqinfolist();
  public:
  const ::PbBurstDataIrqInfo& burstdatairqinfolist(int index) const;
  ::PbBurstDataIrqInfo* add_burstdatairqinfolist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PbBurstDataIrqInfo >&
      burstdatairqinfolist() const;

  // string verType = 1;
  void clear_vertype();
  const std::string& vertype() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_vertype(ArgT0&& arg0, ArgT... args);
  std::string* mutable_vertype();
  PROTOBUF_MUST_USE_RESULT std::string* release_vertype();
  void set_allocated_vertype(std::string* vertype);
  private:
  const std::string& _internal_vertype() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_vertype(const std::string& value);
  std::string* _internal_mutable_vertype();
  public:

  // string desc = 2;
  void clear_desc();
  const std::string& desc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_desc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_desc();
  PROTOBUF_MUST_USE_RESULT std::string* release_desc();
  void set_allocated_desc(std::string* desc);
  private:
  const std::string& _internal_desc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_desc(const std::string& value);
  std::string* _internal_mutable_desc();
  public:

  // .PbNetProto netProto = 3;
  bool has_netproto() const;
  private:
  bool _internal_has_netproto() const;
  public:
  void clear_netproto();
  const ::PbNetProto& netproto() const;
  PROTOBUF_MUST_USE_RESULT ::PbNetProto* release_netproto();
  ::PbNetProto* mutable_netproto();
  void set_allocated_netproto(::PbNetProto* netproto);
  private:
  const ::PbNetProto& _internal_netproto() const;
  ::PbNetProto* _internal_mutable_netproto();
  public:
  void unsafe_arena_set_allocated_netproto(
      ::PbNetProto* netproto);
  ::PbNetProto* unsafe_arena_release_netproto();

  // .PbDroneIdAttr droneIdAttr = 100;
  bool has_droneidattr() const;
  private:
  bool _internal_has_droneidattr() const;
  public:
  void clear_droneidattr();
  const ::PbDroneIdAttr& droneidattr() const;
  PROTOBUF_MUST_USE_RESULT ::PbDroneIdAttr* release_droneidattr();
  ::PbDroneIdAttr* mutable_droneidattr();
  void set_allocated_droneidattr(::PbDroneIdAttr* droneidattr);
  private:
  const ::PbDroneIdAttr& _internal_droneidattr() const;
  ::PbDroneIdAttr* _internal_mutable_droneidattr();
  public:
  void unsafe_arena_set_allocated_droneidattr(
      ::PbDroneIdAttr* droneidattr);
  ::PbDroneIdAttr* unsafe_arena_release_droneidattr();

  // .PbMuteAttr muteAttr = 101;
  bool has_muteattr() const;
  private:
  bool _internal_has_muteattr() const;
  public:
  void clear_muteattr();
  const ::PbMuteAttr& muteattr() const;
  PROTOBUF_MUST_USE_RESULT ::PbMuteAttr* release_muteattr();
  ::PbMuteAttr* mutable_muteattr();
  void set_allocated_muteattr(::PbMuteAttr* muteattr);
  private:
  const ::PbMuteAttr& _internal_muteattr() const;
  ::PbMuteAttr* _internal_mutable_muteattr();
  public:
  void unsafe_arena_set_allocated_muteattr(
      ::PbMuteAttr* muteattr);
  ::PbMuteAttr* unsafe_arena_release_muteattr();

  // .PbAlgCompensateAttr algCompensateAttr = 110;
  bool has_algcompensateattr() const;
  private:
  bool _internal_has_algcompensateattr() const;
  public:
  void clear_algcompensateattr();
  const ::PbAlgCompensateAttr& algcompensateattr() const;
  PROTOBUF_MUST_USE_RESULT ::PbAlgCompensateAttr* release_algcompensateattr();
  ::PbAlgCompensateAttr* mutable_algcompensateattr();
  void set_allocated_algcompensateattr(::PbAlgCompensateAttr* algcompensateattr);
  private:
  const ::PbAlgCompensateAttr& _internal_algcompensateattr() const;
  ::PbAlgCompensateAttr* _internal_mutable_algcompensateattr();
  public:
  void unsafe_arena_set_allocated_algcompensateattr(
      ::PbAlgCompensateAttr* algcompensateattr);
  ::PbAlgCompensateAttr* unsafe_arena_release_algcompensateattr();

  // uint32 deviceType = 4;
  void clear_devicetype();
  ::PROTOBUF_NAMESPACE_ID::uint32 devicetype() const;
  void set_devicetype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_devicetype() const;
  void _internal_set_devicetype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool isSupportRemoteId = 16;
  void clear_issupportremoteid();
  bool issupportremoteid() const;
  void set_issupportremoteid(bool value);
  private:
  bool _internal_issupportremoteid() const;
  void _internal_set_issupportremoteid(bool value);
  public:

  // bool isSupportDroneId = 17;
  void clear_issupportdroneid();
  bool issupportdroneid() const;
  void set_issupportdroneid(bool value);
  private:
  bool _internal_issupportdroneid() const;
  void _internal_set_issupportdroneid(bool value);
  public:

  // bool isSupportSpectrum = 18;
  void clear_issupportspectrum();
  bool issupportspectrum() const;
  void set_issupportspectrum(bool value);
  private:
  bool _internal_issupportspectrum() const;
  void _internal_set_issupportspectrum(bool value);
  public:

  // bool isSupportSpectrumOrient = 19;
  void clear_issupportspectrumorient();
  bool issupportspectrumorient() const;
  void set_issupportspectrumorient(bool value);
  private:
  bool _internal_issupportspectrumorient() const;
  void _internal_set_issupportspectrumorient(bool value);
  public:

  // bool isSupportAirborne = 20;
  void clear_issupportairborne();
  bool issupportairborne() const;
  void set_issupportairborne(bool value);
  private:
  bool _internal_issupportairborne() const;
  void _internal_set_issupportairborne(bool value);
  public:

  // bool isSupportAirborneOrient = 21;
  void clear_issupportairborneorient();
  bool issupportairborneorient() const;
  void set_issupportairborneorient(bool value);
  private:
  bool _internal_issupportairborneorient() const;
  void _internal_set_issupportairborneorient(bool value);
  public:

  // bool isSupportWarningWhitelist = 22;
  void clear_issupportwarningwhitelist();
  bool issupportwarningwhitelist() const;
  void set_issupportwarningwhitelist(bool value);
  private:
  bool _internal_issupportwarningwhitelist() const;
  void _internal_set_issupportwarningwhitelist(bool value);
  public:

  // bool isSupportHitProtect = 23;
  void clear_issupporthitprotect();
  bool issupporthitprotect() const;
  void set_issupporthitprotect(bool value);
  private:
  bool _internal_issupporthitprotect() const;
  void _internal_set_issupporthitprotect(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ProductSwCfg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PbBurstDataIrqInfo > burstdatairqinfolist_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vertype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr desc_;
  ::PbNetProto* netproto_;
  ::PbDroneIdAttr* droneidattr_;
  ::PbMuteAttr* muteattr_;
  ::PbAlgCompensateAttr* algcompensateattr_;
  ::PROTOBUF_NAMESPACE_ID::uint32 devicetype_;
  bool issupportremoteid_;
  bool issupportdroneid_;
  bool issupportspectrum_;
  bool issupportspectrumorient_;
  bool issupportairborne_;
  bool issupportairborneorient_;
  bool issupportwarningwhitelist_;
  bool issupporthitprotect_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ProductSwCfg_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PbDroneIdAttr

// bool isEnableDmaFFT = 1;
inline void PbDroneIdAttr::clear_isenabledmafft() {
  isenabledmafft_ = false;
}
inline bool PbDroneIdAttr::_internal_isenabledmafft() const {
  return isenabledmafft_;
}
inline bool PbDroneIdAttr::isenabledmafft() const {
  // @@protoc_insertion_point(field_get:PbDroneIdAttr.isEnableDmaFFT)
  return _internal_isenabledmafft();
}
inline void PbDroneIdAttr::_internal_set_isenabledmafft(bool value) {
  
  isenabledmafft_ = value;
}
inline void PbDroneIdAttr::set_isenabledmafft(bool value) {
  _internal_set_isenabledmafft(value);
  // @@protoc_insertion_point(field_set:PbDroneIdAttr.isEnableDmaFFT)
}

// -------------------------------------------------------------------

// PbMuteAttr

// bool isSupportMuteMode = 1;
inline void PbMuteAttr::clear_issupportmutemode() {
  issupportmutemode_ = false;
}
inline bool PbMuteAttr::_internal_issupportmutemode() const {
  return issupportmutemode_;
}
inline bool PbMuteAttr::issupportmutemode() const {
  // @@protoc_insertion_point(field_get:PbMuteAttr.isSupportMuteMode)
  return _internal_issupportmutemode();
}
inline void PbMuteAttr::_internal_set_issupportmutemode(bool value) {
  
  issupportmutemode_ = value;
}
inline void PbMuteAttr::set_issupportmutemode(bool value) {
  _internal_set_issupportmutemode(value);
  // @@protoc_insertion_point(field_set:PbMuteAttr.isSupportMuteMode)
}

// bool isSupportSwitchVersion = 2;
inline void PbMuteAttr::clear_issupportswitchversion() {
  issupportswitchversion_ = false;
}
inline bool PbMuteAttr::_internal_issupportswitchversion() const {
  return issupportswitchversion_;
}
inline bool PbMuteAttr::issupportswitchversion() const {
  // @@protoc_insertion_point(field_get:PbMuteAttr.isSupportSwitchVersion)
  return _internal_issupportswitchversion();
}
inline void PbMuteAttr::_internal_set_issupportswitchversion(bool value) {
  
  issupportswitchversion_ = value;
}
inline void PbMuteAttr::set_issupportswitchversion(bool value) {
  _internal_set_issupportswitchversion(value);
  // @@protoc_insertion_point(field_set:PbMuteAttr.isSupportSwitchVersion)
}

// -------------------------------------------------------------------

// PbNetProto

// uint32 netProtoType = 1;
inline void PbNetProto::clear_netprototype() {
  netprototype_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PbNetProto::_internal_netprototype() const {
  return netprototype_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PbNetProto::netprototype() const {
  // @@protoc_insertion_point(field_get:PbNetProto.netProtoType)
  return _internal_netprototype();
}
inline void PbNetProto::_internal_set_netprototype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  netprototype_ = value;
}
inline void PbNetProto::set_netprototype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_netprototype(value);
  // @@protoc_insertion_point(field_set:PbNetProto.netProtoType)
}

// -------------------------------------------------------------------

// PbAlgCompensateAttr

// string file_path = 1;
inline void PbAlgCompensateAttr::clear_file_path() {
  file_path_.ClearToEmpty();
}
inline const std::string& PbAlgCompensateAttr::file_path() const {
  // @@protoc_insertion_point(field_get:PbAlgCompensateAttr.file_path)
  return _internal_file_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PbAlgCompensateAttr::set_file_path(ArgT0&& arg0, ArgT... args) {
 
 file_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PbAlgCompensateAttr.file_path)
}
inline std::string* PbAlgCompensateAttr::mutable_file_path() {
  std::string* _s = _internal_mutable_file_path();
  // @@protoc_insertion_point(field_mutable:PbAlgCompensateAttr.file_path)
  return _s;
}
inline const std::string& PbAlgCompensateAttr::_internal_file_path() const {
  return file_path_.Get();
}
inline void PbAlgCompensateAttr::_internal_set_file_path(const std::string& value) {
  
  file_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PbAlgCompensateAttr::_internal_mutable_file_path() {
  
  return file_path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PbAlgCompensateAttr::release_file_path() {
  // @@protoc_insertion_point(field_release:PbAlgCompensateAttr.file_path)
  return file_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PbAlgCompensateAttr::set_allocated_file_path(std::string* file_path) {
  if (file_path != nullptr) {
    
  } else {
    
  }
  file_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_path,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:PbAlgCompensateAttr.file_path)
}

// string file_name = 2;
inline void PbAlgCompensateAttr::clear_file_name() {
  file_name_.ClearToEmpty();
}
inline const std::string& PbAlgCompensateAttr::file_name() const {
  // @@protoc_insertion_point(field_get:PbAlgCompensateAttr.file_name)
  return _internal_file_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PbAlgCompensateAttr::set_file_name(ArgT0&& arg0, ArgT... args) {
 
 file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PbAlgCompensateAttr.file_name)
}
inline std::string* PbAlgCompensateAttr::mutable_file_name() {
  std::string* _s = _internal_mutable_file_name();
  // @@protoc_insertion_point(field_mutable:PbAlgCompensateAttr.file_name)
  return _s;
}
inline const std::string& PbAlgCompensateAttr::_internal_file_name() const {
  return file_name_.Get();
}
inline void PbAlgCompensateAttr::_internal_set_file_name(const std::string& value) {
  
  file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PbAlgCompensateAttr::_internal_mutable_file_name() {
  
  return file_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PbAlgCompensateAttr::release_file_name() {
  // @@protoc_insertion_point(field_release:PbAlgCompensateAttr.file_name)
  return file_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PbAlgCompensateAttr::set_allocated_file_name(std::string* file_name) {
  if (file_name != nullptr) {
    
  } else {
    
  }
  file_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:PbAlgCompensateAttr.file_name)
}

// -------------------------------------------------------------------

// PbBurstDataIrqInfo

// int32 channel = 1;
inline void PbBurstDataIrqInfo::clear_channel() {
  channel_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PbBurstDataIrqInfo::_internal_channel() const {
  return channel_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PbBurstDataIrqInfo::channel() const {
  // @@protoc_insertion_point(field_get:PbBurstDataIrqInfo.channel)
  return _internal_channel();
}
inline void PbBurstDataIrqInfo::_internal_set_channel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  channel_ = value;
}
inline void PbBurstDataIrqInfo::set_channel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_channel(value);
  // @@protoc_insertion_point(field_set:PbBurstDataIrqInfo.channel)
}

// bool isEnabled = 2;
inline void PbBurstDataIrqInfo::clear_isenabled() {
  isenabled_ = false;
}
inline bool PbBurstDataIrqInfo::_internal_isenabled() const {
  return isenabled_;
}
inline bool PbBurstDataIrqInfo::isenabled() const {
  // @@protoc_insertion_point(field_get:PbBurstDataIrqInfo.isEnabled)
  return _internal_isenabled();
}
inline void PbBurstDataIrqInfo::_internal_set_isenabled(bool value) {
  
  isenabled_ = value;
}
inline void PbBurstDataIrqInfo::set_isenabled(bool value) {
  _internal_set_isenabled(value);
  // @@protoc_insertion_point(field_set:PbBurstDataIrqInfo.isEnabled)
}

// string irqDevFileName = 3;
inline void PbBurstDataIrqInfo::clear_irqdevfilename() {
  irqdevfilename_.ClearToEmpty();
}
inline const std::string& PbBurstDataIrqInfo::irqdevfilename() const {
  // @@protoc_insertion_point(field_get:PbBurstDataIrqInfo.irqDevFileName)
  return _internal_irqdevfilename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PbBurstDataIrqInfo::set_irqdevfilename(ArgT0&& arg0, ArgT... args) {
 
 irqdevfilename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PbBurstDataIrqInfo.irqDevFileName)
}
inline std::string* PbBurstDataIrqInfo::mutable_irqdevfilename() {
  std::string* _s = _internal_mutable_irqdevfilename();
  // @@protoc_insertion_point(field_mutable:PbBurstDataIrqInfo.irqDevFileName)
  return _s;
}
inline const std::string& PbBurstDataIrqInfo::_internal_irqdevfilename() const {
  return irqdevfilename_.Get();
}
inline void PbBurstDataIrqInfo::_internal_set_irqdevfilename(const std::string& value) {
  
  irqdevfilename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PbBurstDataIrqInfo::_internal_mutable_irqdevfilename() {
  
  return irqdevfilename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PbBurstDataIrqInfo::release_irqdevfilename() {
  // @@protoc_insertion_point(field_release:PbBurstDataIrqInfo.irqDevFileName)
  return irqdevfilename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PbBurstDataIrqInfo::set_allocated_irqdevfilename(std::string* irqdevfilename) {
  if (irqdevfilename != nullptr) {
    
  } else {
    
  }
  irqdevfilename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), irqdevfilename,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:PbBurstDataIrqInfo.irqDevFileName)
}

// string phyMemAddr = 4;
inline void PbBurstDataIrqInfo::clear_phymemaddr() {
  phymemaddr_.ClearToEmpty();
}
inline const std::string& PbBurstDataIrqInfo::phymemaddr() const {
  // @@protoc_insertion_point(field_get:PbBurstDataIrqInfo.phyMemAddr)
  return _internal_phymemaddr();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PbBurstDataIrqInfo::set_phymemaddr(ArgT0&& arg0, ArgT... args) {
 
 phymemaddr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PbBurstDataIrqInfo.phyMemAddr)
}
inline std::string* PbBurstDataIrqInfo::mutable_phymemaddr() {
  std::string* _s = _internal_mutable_phymemaddr();
  // @@protoc_insertion_point(field_mutable:PbBurstDataIrqInfo.phyMemAddr)
  return _s;
}
inline const std::string& PbBurstDataIrqInfo::_internal_phymemaddr() const {
  return phymemaddr_.Get();
}
inline void PbBurstDataIrqInfo::_internal_set_phymemaddr(const std::string& value) {
  
  phymemaddr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PbBurstDataIrqInfo::_internal_mutable_phymemaddr() {
  
  return phymemaddr_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PbBurstDataIrqInfo::release_phymemaddr() {
  // @@protoc_insertion_point(field_release:PbBurstDataIrqInfo.phyMemAddr)
  return phymemaddr_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PbBurstDataIrqInfo::set_allocated_phymemaddr(std::string* phymemaddr) {
  if (phymemaddr != nullptr) {
    
  } else {
    
  }
  phymemaddr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), phymemaddr,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:PbBurstDataIrqInfo.phyMemAddr)
}

// -------------------------------------------------------------------

// ProductSwCfg

// string verType = 1;
inline void ProductSwCfg::clear_vertype() {
  vertype_.ClearToEmpty();
}
inline const std::string& ProductSwCfg::vertype() const {
  // @@protoc_insertion_point(field_get:ProductSwCfg.verType)
  return _internal_vertype();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProductSwCfg::set_vertype(ArgT0&& arg0, ArgT... args) {
 
 vertype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ProductSwCfg.verType)
}
inline std::string* ProductSwCfg::mutable_vertype() {
  std::string* _s = _internal_mutable_vertype();
  // @@protoc_insertion_point(field_mutable:ProductSwCfg.verType)
  return _s;
}
inline const std::string& ProductSwCfg::_internal_vertype() const {
  return vertype_.Get();
}
inline void ProductSwCfg::_internal_set_vertype(const std::string& value) {
  
  vertype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ProductSwCfg::_internal_mutable_vertype() {
  
  return vertype_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ProductSwCfg::release_vertype() {
  // @@protoc_insertion_point(field_release:ProductSwCfg.verType)
  return vertype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ProductSwCfg::set_allocated_vertype(std::string* vertype) {
  if (vertype != nullptr) {
    
  } else {
    
  }
  vertype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vertype,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:ProductSwCfg.verType)
}

// string desc = 2;
inline void ProductSwCfg::clear_desc() {
  desc_.ClearToEmpty();
}
inline const std::string& ProductSwCfg::desc() const {
  // @@protoc_insertion_point(field_get:ProductSwCfg.desc)
  return _internal_desc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProductSwCfg::set_desc(ArgT0&& arg0, ArgT... args) {
 
 desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ProductSwCfg.desc)
}
inline std::string* ProductSwCfg::mutable_desc() {
  std::string* _s = _internal_mutable_desc();
  // @@protoc_insertion_point(field_mutable:ProductSwCfg.desc)
  return _s;
}
inline const std::string& ProductSwCfg::_internal_desc() const {
  return desc_.Get();
}
inline void ProductSwCfg::_internal_set_desc(const std::string& value) {
  
  desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ProductSwCfg::_internal_mutable_desc() {
  
  return desc_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ProductSwCfg::release_desc() {
  // @@protoc_insertion_point(field_release:ProductSwCfg.desc)
  return desc_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ProductSwCfg::set_allocated_desc(std::string* desc) {
  if (desc != nullptr) {
    
  } else {
    
  }
  desc_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), desc,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:ProductSwCfg.desc)
}

// .PbNetProto netProto = 3;
inline bool ProductSwCfg::_internal_has_netproto() const {
  return this != internal_default_instance() && netproto_ != nullptr;
}
inline bool ProductSwCfg::has_netproto() const {
  return _internal_has_netproto();
}
inline void ProductSwCfg::clear_netproto() {
  if (GetArenaForAllocation() == nullptr && netproto_ != nullptr) {
    delete netproto_;
  }
  netproto_ = nullptr;
}
inline const ::PbNetProto& ProductSwCfg::_internal_netproto() const {
  const ::PbNetProto* p = netproto_;
  return p != nullptr ? *p : reinterpret_cast<const ::PbNetProto&>(
      ::_PbNetProto_default_instance_);
}
inline const ::PbNetProto& ProductSwCfg::netproto() const {
  // @@protoc_insertion_point(field_get:ProductSwCfg.netProto)
  return _internal_netproto();
}
inline void ProductSwCfg::unsafe_arena_set_allocated_netproto(
    ::PbNetProto* netproto) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(netproto_);
  }
  netproto_ = netproto;
  if (netproto) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProductSwCfg.netProto)
}
inline ::PbNetProto* ProductSwCfg::release_netproto() {
  
  ::PbNetProto* temp = netproto_;
  netproto_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PbNetProto* ProductSwCfg::unsafe_arena_release_netproto() {
  // @@protoc_insertion_point(field_release:ProductSwCfg.netProto)
  
  ::PbNetProto* temp = netproto_;
  netproto_ = nullptr;
  return temp;
}
inline ::PbNetProto* ProductSwCfg::_internal_mutable_netproto() {
  
  if (netproto_ == nullptr) {
    auto* p = CreateMaybeMessage<::PbNetProto>(GetArenaForAllocation());
    netproto_ = p;
  }
  return netproto_;
}
inline ::PbNetProto* ProductSwCfg::mutable_netproto() {
  ::PbNetProto* _msg = _internal_mutable_netproto();
  // @@protoc_insertion_point(field_mutable:ProductSwCfg.netProto)
  return _msg;
}
inline void ProductSwCfg::set_allocated_netproto(::PbNetProto* netproto) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete netproto_;
  }
  if (netproto) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::PbNetProto>::GetOwningArena(netproto);
    if (message_arena != submessage_arena) {
      netproto = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, netproto, submessage_arena);
    }
    
  } else {
    
  }
  netproto_ = netproto;
  // @@protoc_insertion_point(field_set_allocated:ProductSwCfg.netProto)
}

// uint32 deviceType = 4;
inline void ProductSwCfg::clear_devicetype() {
  devicetype_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProductSwCfg::_internal_devicetype() const {
  return devicetype_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProductSwCfg::devicetype() const {
  // @@protoc_insertion_point(field_get:ProductSwCfg.deviceType)
  return _internal_devicetype();
}
inline void ProductSwCfg::_internal_set_devicetype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  devicetype_ = value;
}
inline void ProductSwCfg::set_devicetype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_devicetype(value);
  // @@protoc_insertion_point(field_set:ProductSwCfg.deviceType)
}

// bool isSupportRemoteId = 16;
inline void ProductSwCfg::clear_issupportremoteid() {
  issupportremoteid_ = false;
}
inline bool ProductSwCfg::_internal_issupportremoteid() const {
  return issupportremoteid_;
}
inline bool ProductSwCfg::issupportremoteid() const {
  // @@protoc_insertion_point(field_get:ProductSwCfg.isSupportRemoteId)
  return _internal_issupportremoteid();
}
inline void ProductSwCfg::_internal_set_issupportremoteid(bool value) {
  
  issupportremoteid_ = value;
}
inline void ProductSwCfg::set_issupportremoteid(bool value) {
  _internal_set_issupportremoteid(value);
  // @@protoc_insertion_point(field_set:ProductSwCfg.isSupportRemoteId)
}

// bool isSupportDroneId = 17;
inline void ProductSwCfg::clear_issupportdroneid() {
  issupportdroneid_ = false;
}
inline bool ProductSwCfg::_internal_issupportdroneid() const {
  return issupportdroneid_;
}
inline bool ProductSwCfg::issupportdroneid() const {
  // @@protoc_insertion_point(field_get:ProductSwCfg.isSupportDroneId)
  return _internal_issupportdroneid();
}
inline void ProductSwCfg::_internal_set_issupportdroneid(bool value) {
  
  issupportdroneid_ = value;
}
inline void ProductSwCfg::set_issupportdroneid(bool value) {
  _internal_set_issupportdroneid(value);
  // @@protoc_insertion_point(field_set:ProductSwCfg.isSupportDroneId)
}

// bool isSupportSpectrum = 18;
inline void ProductSwCfg::clear_issupportspectrum() {
  issupportspectrum_ = false;
}
inline bool ProductSwCfg::_internal_issupportspectrum() const {
  return issupportspectrum_;
}
inline bool ProductSwCfg::issupportspectrum() const {
  // @@protoc_insertion_point(field_get:ProductSwCfg.isSupportSpectrum)
  return _internal_issupportspectrum();
}
inline void ProductSwCfg::_internal_set_issupportspectrum(bool value) {
  
  issupportspectrum_ = value;
}
inline void ProductSwCfg::set_issupportspectrum(bool value) {
  _internal_set_issupportspectrum(value);
  // @@protoc_insertion_point(field_set:ProductSwCfg.isSupportSpectrum)
}

// bool isSupportSpectrumOrient = 19;
inline void ProductSwCfg::clear_issupportspectrumorient() {
  issupportspectrumorient_ = false;
}
inline bool ProductSwCfg::_internal_issupportspectrumorient() const {
  return issupportspectrumorient_;
}
inline bool ProductSwCfg::issupportspectrumorient() const {
  // @@protoc_insertion_point(field_get:ProductSwCfg.isSupportSpectrumOrient)
  return _internal_issupportspectrumorient();
}
inline void ProductSwCfg::_internal_set_issupportspectrumorient(bool value) {
  
  issupportspectrumorient_ = value;
}
inline void ProductSwCfg::set_issupportspectrumorient(bool value) {
  _internal_set_issupportspectrumorient(value);
  // @@protoc_insertion_point(field_set:ProductSwCfg.isSupportSpectrumOrient)
}

// bool isSupportAirborne = 20;
inline void ProductSwCfg::clear_issupportairborne() {
  issupportairborne_ = false;
}
inline bool ProductSwCfg::_internal_issupportairborne() const {
  return issupportairborne_;
}
inline bool ProductSwCfg::issupportairborne() const {
  // @@protoc_insertion_point(field_get:ProductSwCfg.isSupportAirborne)
  return _internal_issupportairborne();
}
inline void ProductSwCfg::_internal_set_issupportairborne(bool value) {
  
  issupportairborne_ = value;
}
inline void ProductSwCfg::set_issupportairborne(bool value) {
  _internal_set_issupportairborne(value);
  // @@protoc_insertion_point(field_set:ProductSwCfg.isSupportAirborne)
}

// bool isSupportAirborneOrient = 21;
inline void ProductSwCfg::clear_issupportairborneorient() {
  issupportairborneorient_ = false;
}
inline bool ProductSwCfg::_internal_issupportairborneorient() const {
  return issupportairborneorient_;
}
inline bool ProductSwCfg::issupportairborneorient() const {
  // @@protoc_insertion_point(field_get:ProductSwCfg.isSupportAirborneOrient)
  return _internal_issupportairborneorient();
}
inline void ProductSwCfg::_internal_set_issupportairborneorient(bool value) {
  
  issupportairborneorient_ = value;
}
inline void ProductSwCfg::set_issupportairborneorient(bool value) {
  _internal_set_issupportairborneorient(value);
  // @@protoc_insertion_point(field_set:ProductSwCfg.isSupportAirborneOrient)
}

// bool isSupportWarningWhitelist = 22;
inline void ProductSwCfg::clear_issupportwarningwhitelist() {
  issupportwarningwhitelist_ = false;
}
inline bool ProductSwCfg::_internal_issupportwarningwhitelist() const {
  return issupportwarningwhitelist_;
}
inline bool ProductSwCfg::issupportwarningwhitelist() const {
  // @@protoc_insertion_point(field_get:ProductSwCfg.isSupportWarningWhitelist)
  return _internal_issupportwarningwhitelist();
}
inline void ProductSwCfg::_internal_set_issupportwarningwhitelist(bool value) {
  
  issupportwarningwhitelist_ = value;
}
inline void ProductSwCfg::set_issupportwarningwhitelist(bool value) {
  _internal_set_issupportwarningwhitelist(value);
  // @@protoc_insertion_point(field_set:ProductSwCfg.isSupportWarningWhitelist)
}

// bool isSupportHitProtect = 23;
inline void ProductSwCfg::clear_issupporthitprotect() {
  issupporthitprotect_ = false;
}
inline bool ProductSwCfg::_internal_issupporthitprotect() const {
  return issupporthitprotect_;
}
inline bool ProductSwCfg::issupporthitprotect() const {
  // @@protoc_insertion_point(field_get:ProductSwCfg.isSupportHitProtect)
  return _internal_issupporthitprotect();
}
inline void ProductSwCfg::_internal_set_issupporthitprotect(bool value) {
  
  issupporthitprotect_ = value;
}
inline void ProductSwCfg::set_issupporthitprotect(bool value) {
  _internal_set_issupporthitprotect(value);
  // @@protoc_insertion_point(field_set:ProductSwCfg.isSupportHitProtect)
}

// .PbDroneIdAttr droneIdAttr = 100;
inline bool ProductSwCfg::_internal_has_droneidattr() const {
  return this != internal_default_instance() && droneidattr_ != nullptr;
}
inline bool ProductSwCfg::has_droneidattr() const {
  return _internal_has_droneidattr();
}
inline void ProductSwCfg::clear_droneidattr() {
  if (GetArenaForAllocation() == nullptr && droneidattr_ != nullptr) {
    delete droneidattr_;
  }
  droneidattr_ = nullptr;
}
inline const ::PbDroneIdAttr& ProductSwCfg::_internal_droneidattr() const {
  const ::PbDroneIdAttr* p = droneidattr_;
  return p != nullptr ? *p : reinterpret_cast<const ::PbDroneIdAttr&>(
      ::_PbDroneIdAttr_default_instance_);
}
inline const ::PbDroneIdAttr& ProductSwCfg::droneidattr() const {
  // @@protoc_insertion_point(field_get:ProductSwCfg.droneIdAttr)
  return _internal_droneidattr();
}
inline void ProductSwCfg::unsafe_arena_set_allocated_droneidattr(
    ::PbDroneIdAttr* droneidattr) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(droneidattr_);
  }
  droneidattr_ = droneidattr;
  if (droneidattr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProductSwCfg.droneIdAttr)
}
inline ::PbDroneIdAttr* ProductSwCfg::release_droneidattr() {
  
  ::PbDroneIdAttr* temp = droneidattr_;
  droneidattr_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PbDroneIdAttr* ProductSwCfg::unsafe_arena_release_droneidattr() {
  // @@protoc_insertion_point(field_release:ProductSwCfg.droneIdAttr)
  
  ::PbDroneIdAttr* temp = droneidattr_;
  droneidattr_ = nullptr;
  return temp;
}
inline ::PbDroneIdAttr* ProductSwCfg::_internal_mutable_droneidattr() {
  
  if (droneidattr_ == nullptr) {
    auto* p = CreateMaybeMessage<::PbDroneIdAttr>(GetArenaForAllocation());
    droneidattr_ = p;
  }
  return droneidattr_;
}
inline ::PbDroneIdAttr* ProductSwCfg::mutable_droneidattr() {
  ::PbDroneIdAttr* _msg = _internal_mutable_droneidattr();
  // @@protoc_insertion_point(field_mutable:ProductSwCfg.droneIdAttr)
  return _msg;
}
inline void ProductSwCfg::set_allocated_droneidattr(::PbDroneIdAttr* droneidattr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete droneidattr_;
  }
  if (droneidattr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::PbDroneIdAttr>::GetOwningArena(droneidattr);
    if (message_arena != submessage_arena) {
      droneidattr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, droneidattr, submessage_arena);
    }
    
  } else {
    
  }
  droneidattr_ = droneidattr;
  // @@protoc_insertion_point(field_set_allocated:ProductSwCfg.droneIdAttr)
}

// .PbMuteAttr muteAttr = 101;
inline bool ProductSwCfg::_internal_has_muteattr() const {
  return this != internal_default_instance() && muteattr_ != nullptr;
}
inline bool ProductSwCfg::has_muteattr() const {
  return _internal_has_muteattr();
}
inline void ProductSwCfg::clear_muteattr() {
  if (GetArenaForAllocation() == nullptr && muteattr_ != nullptr) {
    delete muteattr_;
  }
  muteattr_ = nullptr;
}
inline const ::PbMuteAttr& ProductSwCfg::_internal_muteattr() const {
  const ::PbMuteAttr* p = muteattr_;
  return p != nullptr ? *p : reinterpret_cast<const ::PbMuteAttr&>(
      ::_PbMuteAttr_default_instance_);
}
inline const ::PbMuteAttr& ProductSwCfg::muteattr() const {
  // @@protoc_insertion_point(field_get:ProductSwCfg.muteAttr)
  return _internal_muteattr();
}
inline void ProductSwCfg::unsafe_arena_set_allocated_muteattr(
    ::PbMuteAttr* muteattr) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(muteattr_);
  }
  muteattr_ = muteattr;
  if (muteattr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProductSwCfg.muteAttr)
}
inline ::PbMuteAttr* ProductSwCfg::release_muteattr() {
  
  ::PbMuteAttr* temp = muteattr_;
  muteattr_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PbMuteAttr* ProductSwCfg::unsafe_arena_release_muteattr() {
  // @@protoc_insertion_point(field_release:ProductSwCfg.muteAttr)
  
  ::PbMuteAttr* temp = muteattr_;
  muteattr_ = nullptr;
  return temp;
}
inline ::PbMuteAttr* ProductSwCfg::_internal_mutable_muteattr() {
  
  if (muteattr_ == nullptr) {
    auto* p = CreateMaybeMessage<::PbMuteAttr>(GetArenaForAllocation());
    muteattr_ = p;
  }
  return muteattr_;
}
inline ::PbMuteAttr* ProductSwCfg::mutable_muteattr() {
  ::PbMuteAttr* _msg = _internal_mutable_muteattr();
  // @@protoc_insertion_point(field_mutable:ProductSwCfg.muteAttr)
  return _msg;
}
inline void ProductSwCfg::set_allocated_muteattr(::PbMuteAttr* muteattr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete muteattr_;
  }
  if (muteattr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::PbMuteAttr>::GetOwningArena(muteattr);
    if (message_arena != submessage_arena) {
      muteattr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, muteattr, submessage_arena);
    }
    
  } else {
    
  }
  muteattr_ = muteattr;
  // @@protoc_insertion_point(field_set_allocated:ProductSwCfg.muteAttr)
}

// .PbAlgCompensateAttr algCompensateAttr = 110;
inline bool ProductSwCfg::_internal_has_algcompensateattr() const {
  return this != internal_default_instance() && algcompensateattr_ != nullptr;
}
inline bool ProductSwCfg::has_algcompensateattr() const {
  return _internal_has_algcompensateattr();
}
inline void ProductSwCfg::clear_algcompensateattr() {
  if (GetArenaForAllocation() == nullptr && algcompensateattr_ != nullptr) {
    delete algcompensateattr_;
  }
  algcompensateattr_ = nullptr;
}
inline const ::PbAlgCompensateAttr& ProductSwCfg::_internal_algcompensateattr() const {
  const ::PbAlgCompensateAttr* p = algcompensateattr_;
  return p != nullptr ? *p : reinterpret_cast<const ::PbAlgCompensateAttr&>(
      ::_PbAlgCompensateAttr_default_instance_);
}
inline const ::PbAlgCompensateAttr& ProductSwCfg::algcompensateattr() const {
  // @@protoc_insertion_point(field_get:ProductSwCfg.algCompensateAttr)
  return _internal_algcompensateattr();
}
inline void ProductSwCfg::unsafe_arena_set_allocated_algcompensateattr(
    ::PbAlgCompensateAttr* algcompensateattr) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(algcompensateattr_);
  }
  algcompensateattr_ = algcompensateattr;
  if (algcompensateattr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProductSwCfg.algCompensateAttr)
}
inline ::PbAlgCompensateAttr* ProductSwCfg::release_algcompensateattr() {
  
  ::PbAlgCompensateAttr* temp = algcompensateattr_;
  algcompensateattr_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PbAlgCompensateAttr* ProductSwCfg::unsafe_arena_release_algcompensateattr() {
  // @@protoc_insertion_point(field_release:ProductSwCfg.algCompensateAttr)
  
  ::PbAlgCompensateAttr* temp = algcompensateattr_;
  algcompensateattr_ = nullptr;
  return temp;
}
inline ::PbAlgCompensateAttr* ProductSwCfg::_internal_mutable_algcompensateattr() {
  
  if (algcompensateattr_ == nullptr) {
    auto* p = CreateMaybeMessage<::PbAlgCompensateAttr>(GetArenaForAllocation());
    algcompensateattr_ = p;
  }
  return algcompensateattr_;
}
inline ::PbAlgCompensateAttr* ProductSwCfg::mutable_algcompensateattr() {
  ::PbAlgCompensateAttr* _msg = _internal_mutable_algcompensateattr();
  // @@protoc_insertion_point(field_mutable:ProductSwCfg.algCompensateAttr)
  return _msg;
}
inline void ProductSwCfg::set_allocated_algcompensateattr(::PbAlgCompensateAttr* algcompensateattr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete algcompensateattr_;
  }
  if (algcompensateattr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::PbAlgCompensateAttr>::GetOwningArena(algcompensateattr);
    if (message_arena != submessage_arena) {
      algcompensateattr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, algcompensateattr, submessage_arena);
    }
    
  } else {
    
  }
  algcompensateattr_ = algcompensateattr;
  // @@protoc_insertion_point(field_set_allocated:ProductSwCfg.algCompensateAttr)
}

// repeated .PbBurstDataIrqInfo burstDataIrqInfoList = 200;
inline int ProductSwCfg::_internal_burstdatairqinfolist_size() const {
  return burstdatairqinfolist_.size();
}
inline int ProductSwCfg::burstdatairqinfolist_size() const {
  return _internal_burstdatairqinfolist_size();
}
inline void ProductSwCfg::clear_burstdatairqinfolist() {
  burstdatairqinfolist_.Clear();
}
inline ::PbBurstDataIrqInfo* ProductSwCfg::mutable_burstdatairqinfolist(int index) {
  // @@protoc_insertion_point(field_mutable:ProductSwCfg.burstDataIrqInfoList)
  return burstdatairqinfolist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PbBurstDataIrqInfo >*
ProductSwCfg::mutable_burstdatairqinfolist() {
  // @@protoc_insertion_point(field_mutable_list:ProductSwCfg.burstDataIrqInfoList)
  return &burstdatairqinfolist_;
}
inline const ::PbBurstDataIrqInfo& ProductSwCfg::_internal_burstdatairqinfolist(int index) const {
  return burstdatairqinfolist_.Get(index);
}
inline const ::PbBurstDataIrqInfo& ProductSwCfg::burstdatairqinfolist(int index) const {
  // @@protoc_insertion_point(field_get:ProductSwCfg.burstDataIrqInfoList)
  return _internal_burstdatairqinfolist(index);
}
inline ::PbBurstDataIrqInfo* ProductSwCfg::_internal_add_burstdatairqinfolist() {
  return burstdatairqinfolist_.Add();
}
inline ::PbBurstDataIrqInfo* ProductSwCfg::add_burstdatairqinfolist() {
  ::PbBurstDataIrqInfo* _add = _internal_add_burstdatairqinfolist();
  // @@protoc_insertion_point(field_add:ProductSwCfg.burstDataIrqInfoList)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PbBurstDataIrqInfo >&
ProductSwCfg::burstdatairqinfolist() const {
  // @@protoc_insertion_point(field_list:ProductSwCfg.burstDataIrqInfoList)
  return burstdatairqinfolist_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ProductSwCfg_2eproto
