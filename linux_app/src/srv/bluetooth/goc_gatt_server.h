/********************************************************
 * Do NOT edit this file. It is generated by AT parser. *
********************************************************/


#ifndef _GOC_GATT_SERVER_H__
#define _GOC_GATT_SERVER_H__

#ifdef __cplusplus
extern "C" {
#endif

#include "bluetooth.h"

typedef void (*server_registered_callback)(uint8_t status, uint8_t server_if, bt_uuid_t uuid);
typedef void (*client_connected_callback)(bt_bdaddr_t address, uint8_t connected, uint16_t conn_id, uint8_t server_if);
typedef void (*service_added_callback)(uint8_t status, uint8_t server_if, uint8_t svc_type, uint16_t svc_inst_id, bt_uuid_t srvc_uuid, uint16_t handle);
typedef void (*included_service_added_callback)(uint8_t status, uint8_t server_if, uint16_t srvc_handle, uint16_t incl_srvc_handle);
typedef void (*characteristic_added_callback)(uint8_t status, uint8_t server_if, bt_uuid_t char_uuid, uint16_t srvc_handle, uint16_t char_handle);
typedef void (*descriptor_added_callback)(uint8_t status, uint8_t server_if, bt_uuid_t descr_uuid, uint16_t srvc_handle, uint16_t descr_handle);
typedef void (*service_started_callback)(uint8_t status, uint8_t server_if, uint16_t srvc_handle);
typedef void (*response_send_completed_callback)(uint8_t status, uint16_t handle);
typedef void (*attribute_read_callback)(bt_bdaddr_t address, uint16_t conn_id, uint16_t trans_id, uint16_t attr_handle, uint16_t offset, uint8_t is_long);
typedef void (*attribute_write_callback)(bt_bdaddr_t address, uint16_t conn_id, uint16_t trans_id, uint16_t attr_handle, uint16_t offset, uint8_t need_rsp, uint8_t is_prep, uint16_t valueLen, uint8_t * value);
typedef void (*notification_sent_callback)(uint16_t conn_id, uint8_t status);
typedef void (*mtu_changed_callback)(uint16_t conn_id, uint16_t mtu);
typedef void (*server_register_client_cbk)(uint8_t client_if, bt_uuid_t uuid);

typedef struct tag_gatt_server_callback {
	server_registered_callback server_registered_cb;
	client_connected_callback client_connected_cb;
	service_added_callback service_added_cb;
	included_service_added_callback included_service_added_cb;
	characteristic_added_callback characteristic_added_cb;
	descriptor_added_callback descriptor_added_cb;
	service_started_callback service_started_cb;
	response_send_completed_callback response_send_completed_cb;
	attribute_read_callback attribute_read_cb;
	attribute_write_callback attribute_write_cb;
	notification_sent_callback notification_sent_cb;
	mtu_changed_callback mtu_changed_cb;
} gatt_server_callback_t;

void goc_gatt_server_init(gatt_server_callback_t *cbk);
void goc_gatt_server_done();
bt_status_t goc_gatt_server_register_app(bt_uuid_t uuid16);
bt_status_t goc_gatt_server_unregister_app(uint8_t server_if);
bt_status_t goc_gatt_server_add_service(uint8_t server_if, uint8_t service_type, uint16_t service_id_inst_id, bt_uuid_t service_uuid, uint8_t num_handles);
bt_status_t goc_gatt_server_add_included_service(uint8_t server_if, uint16_t svc_handle, uint16_t included_svc_handle);
bt_status_t goc_gatt_server_add_characteristic(uint8_t server_if, uint16_t svc_handle, bt_uuid_t char_uuid, uint8_t properties, uint16_t permissions);
bt_status_t goc_gatt_server_add_descriptor(uint8_t server_if, uint16_t svc_handle, bt_uuid_t desc_uuid, uint16_t permissions);
bt_status_t goc_gatt_server_start_service(uint8_t server_if, uint16_t svc_handle, uint8_t transport);
bt_status_t goc_gatt_server_send_indication(uint8_t server_if, uint16_t attr_handle, uint16_t conn_id, uint8_t confirm, uint16_t valLen, uint8_t * val);
bt_status_t goc_gatt_server_send_notification(uint8_t server_if, uint16_t attr_handle, uint16_t conn_id, uint16_t valLen, uint8_t * val);
bt_status_t goc_gatt_server_send_response(uint8_t server_if, uint16_t conn_id, uint16_t trans_id, uint8_t status, uint16_t handle, uint16_t offset, uint8_t auth_req, uint16_t valLen, uint8_t * val);

#ifdef __cplusplus
}
#endif

#endif /*_GOC_GATT_SERVER_H__*/
