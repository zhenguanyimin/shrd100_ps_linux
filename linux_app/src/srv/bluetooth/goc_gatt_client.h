/********************************************************
 * Do NOT edit this file. It is generated by AT parser. *
********************************************************/


#ifndef _GOC_GATT_CLIENT_H__
#define _GOC_GATT_CLIENT_H__

#ifdef __cplusplus
extern "C" {
#endif
#include "bluetooth.h"

typedef void (*scan_result_callback)(bt_bdaddr_t address, uint8_t rssi, uint16_t adv_dataLen, uint8_t * adv_data, uint8_t data_type);
typedef void (*scan_address_name_callback)(bt_bdaddr_t address, uint16_t nameLen, uint8_t * name);
typedef void (*notify_callback)(uint16_t conn_id, bt_bdaddr_t address, uint8_t srvcType, uint16_t srvcInstId, bt_uuid_t srvcUuid, uint16_t charInstId, bt_uuid_t charUuid, uint8_t isNotify, uint16_t dataLen, uint8_t * data);
typedef void (*connected_callback)(uint8_t client_if, uint16_t conn_id, uint8_t status, bt_bdaddr_t address);
typedef void (*disconnected_callback)(uint8_t client_if, uint16_t conn_id, uint8_t status, bt_bdaddr_t address);
typedef void (*search_completed_callback)(uint16_t conn_id, uint8_t status);
typedef void (*search_result_callback)(uint16_t conn_id, uint8_t srvcType, uint16_t srvcInstId, bt_uuid_t srvcUuid);
typedef void (*get_characteristic_callback)(uint16_t conn_id, uint8_t status, uint8_t srvcType, uint16_t srvcInstId, bt_uuid_t srvcUuid, uint16_t charInstId, bt_uuid_t charUuid, int charProp);
typedef void (*get_descriptor_callback)(uint16_t conn_id, uint8_t status, uint8_t srvcType, uint16_t srvcInstId, bt_uuid_t srvcUuid, uint16_t charInstId, bt_uuid_t charUuid, uint16_t descrInstId, bt_uuid_t descrUuid);
typedef void (*get_included_service_callback)(uint16_t conn_id, uint8_t status, uint8_t srvcType, uint16_t srvcInstId, bt_uuid_t srvcUuid, uint8_t inclSrvcType, uint16_t inclSrvcInstId, bt_uuid_t inclSrvcUuid);
typedef void (*register_for_notifications_callback)(uint16_t conn_id, uint8_t status, uint8_t registered, uint8_t srvcType, uint16_t srvcInstId, bt_uuid_t srvcUuid, uint16_t charInstId, bt_uuid_t charUuid);
typedef void (*read_characteristic_callback)(uint16_t conn_id, uint8_t status, uint8_t srvcType, uint16_t srvcInstId, bt_uuid_t srvcUuid, uint16_t charInstId, bt_uuid_t charUuid, uint8_t charType, uint16_t dataLen, uint8_t * data);
typedef void (*write_characteristic_callback)(uint16_t conn_id, uint8_t status, uint8_t srvcType, uint16_t srvcInstId, bt_uuid_t srvcUuid, uint16_t charInstId, bt_uuid_t charUuid);
typedef void (*execute_completed_callback)(uint16_t conn_id, uint8_t status);
typedef void (*read_descriptor_callback)(uint16_t conn_id, uint8_t status, uint8_t srvcType, uint16_t srvcInstId, bt_uuid_t srvcUuid, uint16_t charInstId, bt_uuid_t charUuid, uint16_t descrInstId, bt_uuid_t descrUuid, uint8_t charType, uint16_t dataLen, uint8_t * data);
typedef void (*write_descriptor_callback)(uint16_t conn_id, uint8_t status, uint8_t srvcType, uint16_t srvcInstId, bt_uuid_t srvcUuid, uint16_t charInstId, bt_uuid_t charUuid, uint16_t descrInstId, bt_uuid_t descrUuid);
typedef void (*read_remote_rssi_callback)(uint8_t client_if, bt_bdaddr_t address, uint8_t rssi, uint8_t status);
typedef void (*receive_data_from_central_callback)(uint16_t conn_id, bt_bdaddr_t address, uint16_t dataLen, uint8_t * data);
typedef void (*configure_mtu_callback)(int conn_id, uint8_t status, int mtu);
typedef void (*advertise_callback_callback)(uint8_t status, uint8_t client_if);
typedef void (*scan_filter_config_callback)(int action, uint8_t client_if, uint8_t status, int filt_type, int avbl_space);
typedef void (*scan_filter_params_configured_callback)(int action, uint8_t client_if, uint8_t status, int avbl_space);
typedef void (*scan_filter_enable_disabled_callback)(int action, uint8_t client_if, uint8_t status);
typedef void (*advertise_instance_enabled_callback)(uint8_t client_if, uint8_t status);
typedef void (*advertise_data_updated_callback)(uint8_t client_if, uint8_t status);
typedef void (*advertise_data_set_callback)(uint8_t client_if, uint8_t status);
typedef void (*advertise_instance_disabled_callback)(uint8_t client_if, uint8_t status);
typedef void (*client_congestion_callback)(int conn_id, uint8_t congested);
typedef void (*batch_scan_storage_configured_callback)(uint8_t client_if, uint8_t status);
typedef void (*batch_scan_start_stopped_callback)(int startstop_action, uint8_t client_if, uint8_t status);
typedef void (*batch_scan_reports_callback)(uint8_t client_if, uint8_t status, int report_format, int num_records, uint16_t rep_dataLen, uint8_t * rep_data);
typedef void (*batch_scan_threshold_crossed_callback)(uint8_t client_if);

typedef struct tag_gatt_client_callback {
	scan_result_callback scan_result_cb;
	scan_address_name_callback scan_address_name_cb;
	notify_callback notify_cb;
	connected_callback connected_cb;
	disconnected_callback disconnected_cb;
	search_completed_callback search_completed_cb;
	search_result_callback search_result_cb;
	get_characteristic_callback get_characteristic_cb;
	get_descriptor_callback get_descriptor_cb;
	get_included_service_callback get_included_service_cb;
	register_for_notifications_callback register_for_notifications_cb;
	read_characteristic_callback read_characteristic_cb;
	write_characteristic_callback write_characteristic_cb;
	execute_completed_callback execute_completed_cb;
	read_descriptor_callback read_descriptor_cb;
	write_descriptor_callback write_descriptor_cb;
	read_remote_rssi_callback read_remote_rssi_cb;
	receive_data_from_central_callback receive_data_from_central_cb;
	configure_mtu_callback configure_mtu_cb;
	advertise_callback_callback advertise_callback_cb;
	scan_filter_config_callback scan_filter_config_cb;
	scan_filter_params_configured_callback scan_filter_params_configured_cb;
	scan_filter_enable_disabled_callback scan_filter_enable_disabled_cb;
	advertise_instance_enabled_callback advertise_instance_enabled_cb;
	advertise_data_updated_callback advertise_data_updated_cb;
	advertise_data_set_callback advertise_data_set_cb;
	advertise_instance_disabled_callback advertise_instance_disabled_cb;
	client_congestion_callback client_congestion_cb;
	batch_scan_storage_configured_callback batch_scan_storage_configured_cb;
	batch_scan_start_stopped_callback batch_scan_start_stopped_cb;
	batch_scan_reports_callback batch_scan_reports_cb;
	batch_scan_threshold_crossed_callback batch_scan_threshold_crossed_cb;
} gatt_client_callback_t;

void goc_gatt_client_init(gatt_client_callback_t *cbk);
void goc_gatt_client_done();
bt_status_t goc_gatt_client_scan(uint8_t start);
bt_status_t goc_gatt_client_connect(bt_bdaddr_t address, uint8_t is_direct, uint8_t transport);
bt_status_t goc_gatt_client_disconnect(uint8_t client_if, bt_bdaddr_t address, uint16_t conn_id);
bt_status_t goc_gatt_client_listen(uint8_t client_if, uint8_t enable);
bt_status_t goc_gatt_client_listen_ex(uint8_t client_if, uint8_t enable, uint16_t min_interval, uint16_t max_interval);
bt_status_t goc_gatt_client_refresh(uint8_t client_if, bt_bdaddr_t address);
bt_status_t goc_gatt_client_search_service(uint16_t conn_id, uint8_t search_all, uint16_t uuid16);
bt_status_t goc_gatt_client_get_included_service(uint16_t conn_id, uint8_t service_type, uint16_t service_id_inst_id, bt_uuid_t service_uuid16, uint8_t incl_service_type, uint16_t incl_service_id_inst_id, bt_uuid_t incl_uuid16);
bt_status_t goc_gatt_client_get_characteristic(uint16_t conn_id, uint8_t service_type, uint16_t service_id_inst_id, bt_uuid_t service_uuid16, uint16_t char_id_inst_id, bt_uuid_t char_uuid16);
bt_status_t goc_gatt_client_get_descriptor(uint16_t conn_id, uint8_t service_type, uint16_t service_id_inst_id, bt_uuid_t service_uuid16, uint16_t char_id_inst_id, bt_uuid_t char_uuid16, uint16_t descr_id_inst_id, bt_uuid_t desc_uuid16);
bt_status_t goc_gatt_client_read_characteristic(uint16_t conn_id, uint8_t service_type, uint16_t service_id_inst_id, bt_uuid_t service_uuid16, uint16_t char_id_inst_id, bt_uuid_t char_uuid16, uint8_t authReq);
bt_status_t goc_gatt_client_write_characteristic(uint16_t conn_id, uint8_t service_type, uint16_t service_id_inst_id, bt_uuid_t service_uuid16, uint16_t char_id_inst_id, bt_uuid_t char_uuid16, uint8_t write_type, uint8_t auth_req, uint16_t val_len, uint8_t * value);
bt_status_t goc_gatt_client_read_descriptor(uint16_t conn_id, uint8_t service_type, uint16_t service_id_inst_id, bt_uuid_t service_uuid16, uint16_t char_id_inst_id, bt_uuid_t char_uuid16, uint16_t descr_id_inst_id, bt_uuid_t descr_uuid16, uint8_t authReq);
bt_status_t goc_gatt_client_write_descriptor(uint16_t conn_id, uint8_t service_type, uint16_t service_id_inst_id, bt_uuid_t service_uuid16, uint16_t char_id_inst_id, bt_uuid_t char_uuid16, uint16_t descr_id_inst_id, bt_uuid_t descr_uuid16, uint8_t write_type, uint8_t auth_req, uint16_t len, uint8_t * value);
bt_status_t goc_gatt_client_execute_write(uint16_t conn_id, uint8_t execute);
bt_status_t goc_gatt_client_register_for_notifications(uint8_t client_if, bt_bdaddr_t address, uint8_t service_type, uint16_t service_id_inst_id, bt_uuid_t service_uuid16, uint16_t char_id_inst_id, bt_uuid_t char_uuid16, uint8_t enable);
bt_status_t goc_gatt_client_read_remote_rssi(uint8_t client_if, bt_bdaddr_t address);
bt_status_t goc_gatt_client_configure_mtu(uint16_t conn_id, uint16_t mtu);
bt_status_t goc_gatt_connection_parameter_update(uint8_t client_if, bt_bdaddr_t address, uint16_t minInterval, uint16_t maxInterval, uint16_t latency, uint16_t timeout);
bt_status_t goc_gatt_client_set_adv_data(uint8_t client_if, uint8_t set_scan_rsp, uint8_t incl_name, uint8_t incl_txpower, uint16_t appearance, uint16_t manufacturer_dataLen, uint8_t * manufacturer_data, uint16_t service_dataLen, uint8_t * service_data, uint16_t service_uuidLen, uint8_t * service_uuid);
bt_status_t goc_gatt_set_adv_data(uint8_t server_if, uint8_t setScanRsp, uint8_t inclName, uint8_t inclTxPower, uint16_t minSlaveConnectionInterval, uint16_t maxSlaveConnectionInterval, uint16_t appearance, uint16_t manufacturerDataLen, uint8_t * manufacturerData, uint16_t serviceDataLen, uint8_t * serviceData, uint16_t serviceUuidLen, uint8_t * serviceUuid);

#ifdef __cplusplus
}
#endif

#endif /*_GOC_GATT_CLIENT_H__*/
